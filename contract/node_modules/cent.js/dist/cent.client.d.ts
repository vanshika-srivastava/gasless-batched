import { CentOptions } from './cent-options.interface';
export declare class CentClient {
    private readonly options;
    constructor(options: CentOptions);
    private methodFactory;
    publish: (params?: {
        channel: string;
    } & {
        data: Record<string, any>;
    } & {
        skip_history?: boolean;
    }) => Promise<Partial<import("./interfaces").StreamPosition>>;
    broadcast: (params?: {
        data: Record<string, any>;
    } & {
        skip_history?: boolean;
    } & {
        channels: string[];
    }) => Promise<Partial<import("./interfaces").StreamPosition>[]>;
    subscribe: (params?: {
        user: string;
    } & {
        channel: string;
    } & {
        client: string;
    }) => Promise<import("./cent-responses.interface").OverrideResponse>;
    unsubscribe: (params?: {
        user: string;
    } & {
        channel: string;
    } & {
        client: string;
    }) => Promise<import("./cent-responses.interface").EmptyResponse>;
    disconnect: (params?: {
        user: string;
    } & {
        client: string;
    }) => Promise<import("./cent-responses.interface").EmptyResponse>;
    refresh: (params?: {
        user: string;
    } & {
        client: string;
    }) => Promise<import("./cent-responses.interface").EmptyResponse>;
    getPresence: (params?: {
        channel: string;
    }) => Promise<import("./cent-responses.interface").PresenceResponse>;
    getPresenceStats: (params?: {
        channel: string;
    }) => Promise<import("./cent-responses.interface").PresenceStatsResponse>;
    getHistory: (params?: {
        channel: string;
    } & {
        since?: import("./interfaces").StreamPosition;
        limit?: number;
        reverse?: boolean;
    }) => Promise<import("./cent-responses.interface").HistoryResponse>;
    removeHistory: (params?: {
        channel: string;
    }) => Promise<import("./cent-responses.interface").EmptyResponse>;
    getChannels: (params?: {
        pattern: string;
    }) => Promise<import("./cent-responses.interface").ChannelsResponse>;
    getInfo: (params?: {}) => Promise<import("./cent-responses.interface").InfoResponse>;
}
