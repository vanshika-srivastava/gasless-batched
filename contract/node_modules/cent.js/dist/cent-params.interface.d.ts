import { CentMethods } from './cent-methods.enum';
import { StreamPosition } from './interfaces';
declare type UserParams = {
    user: string;
};
declare type ChannelParams = {
    channel: string;
};
declare type DataParams = {
    data: Record<string, any>;
};
declare type SkipHistoryParams = {
    skip_history?: boolean;
};
declare type ClientParams = {
    client: string;
};
declare type PublishParams = ChannelParams & DataParams & SkipHistoryParams;
declare type BroadcastParams = DataParams & SkipHistoryParams & {
    channels: string[];
};
declare type SubscribeParams = UserParams & ChannelParams & ClientParams;
declare type UnsubscribeParams = UserParams & ChannelParams & ClientParams;
declare type DisconnectParams = UserParams & ClientParams;
declare type RefreshParams = UserParams & ClientParams;
declare type ChannelsParams = {
    pattern: string;
};
declare type InfoParams = {};
export interface CentParams {
    [CentMethods.Publish]: PublishParams;
    [CentMethods.Broadcast]: BroadcastParams;
    [CentMethods.Subscribe]: SubscribeParams;
    [CentMethods.Unsubscribe]: UnsubscribeParams;
    [CentMethods.Disconnect]: DisconnectParams;
    [CentMethods.Refresh]: RefreshParams;
    [CentMethods.Presence]: ChannelParams;
    [CentMethods.PresenceStats]: ChannelParams;
    [CentMethods.History]: ChannelParams & {
        since?: StreamPosition;
        limit?: number;
        reverse?: boolean;
    };
    [CentMethods.HistoryRemove]: ChannelParams;
    [CentMethods.Channels]: ChannelsParams;
    [CentMethods.Info]: InfoParams;
}
export {};
