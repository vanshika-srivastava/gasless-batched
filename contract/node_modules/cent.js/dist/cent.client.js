"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CentClient = void 0;
const axios_1 = require("axios");
const cent_exception_1 = require("./cent.exception");
const cent_methods_enum_1 = require("./cent-methods.enum");
class CentClient {
    constructor(options) {
        this.publish = this.methodFactory(cent_methods_enum_1.CentMethods.Publish);
        this.broadcast = this.methodFactory(cent_methods_enum_1.CentMethods.Broadcast);
        this.subscribe = this.methodFactory(cent_methods_enum_1.CentMethods.Subscribe);
        this.unsubscribe = this.methodFactory(cent_methods_enum_1.CentMethods.Unsubscribe);
        this.disconnect = this.methodFactory(cent_methods_enum_1.CentMethods.Disconnect);
        this.refresh = this.methodFactory(cent_methods_enum_1.CentMethods.Refresh);
        this.getPresence = this.methodFactory(cent_methods_enum_1.CentMethods.Presence);
        this.getPresenceStats = this.methodFactory(cent_methods_enum_1.CentMethods.PresenceStats);
        this.getHistory = this.methodFactory(cent_methods_enum_1.CentMethods.History);
        this.removeHistory = this.methodFactory(cent_methods_enum_1.CentMethods.HistoryRemove);
        this.getChannels = this.methodFactory(cent_methods_enum_1.CentMethods.Channels);
        this.getInfo = this.methodFactory(cent_methods_enum_1.CentMethods.Info);
        this.options = options;
    }
    methodFactory(method) {
        return (params) => (0, axios_1.default)({
            method: 'POST',
            url: this.options.url,
            timeout: this.options.timeout,
            headers: {
                'Content-Type': 'application/json',
                Authorization: `apikey ${this.options.token}`
            },
            data: { method, params }
        })
            .then(({ data }) => data === null || data === void 0 ? void 0 : data.result)
            .catch(err => {
            throw new cent_exception_1.CentException(err);
        });
    }
}
exports.CentClient = CentClient;
