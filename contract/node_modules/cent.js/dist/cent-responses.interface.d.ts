import { CentMethods } from './cent-methods.enum';
import { ClientInfo, Node, Publication, StreamPosition } from './interfaces';
export declare type PublishResponse = Partial<StreamPosition>;
export interface OverrideResponse {
    presence?: boolean;
    join_leave?: boolean;
    position?: boolean;
    recover?: boolean;
}
export declare type PresenceResponse = {
    presence: Record<string, ClientInfo>;
};
export declare type PresenceStatsResponse = {
    num_clients: number;
    num_users: number;
};
export declare type ChannelsResponse = {
    channels: Record<string, Omit<PresenceStatsResponse, 'num_users'>>;
};
export declare type HistoryResponse = StreamPosition & {
    publications: Array<Publication>;
};
export declare type EmptyResponse = {};
export declare type InfoResponse = {
    nodes: Node[];
};
export interface CentResponses {
    [CentMethods.Publish]: PublishResponse;
    [CentMethods.Broadcast]: PublishResponse[];
    [CentMethods.Subscribe]: OverrideResponse;
    [CentMethods.Unsubscribe]: EmptyResponse;
    [CentMethods.Disconnect]: EmptyResponse;
    [CentMethods.Refresh]: EmptyResponse;
    [CentMethods.Presence]: PresenceResponse;
    [CentMethods.PresenceStats]: PresenceStatsResponse;
    [CentMethods.History]: HistoryResponse;
    [CentMethods.HistoryRemove]: EmptyResponse;
    [CentMethods.Channels]: ChannelsResponse;
    [CentMethods.Info]: InfoResponse;
}
