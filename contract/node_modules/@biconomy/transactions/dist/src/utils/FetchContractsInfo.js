"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.findContractAddressesByVersion = exports.findChainById = exports.getDefaultCallbackHandlerContract = exports.getFallbackGasTankContract = exports.getSmartWalletContract = exports.getMultiSendCallOnlyContract = exports.getMultiSendContract = exports.getSmartWalletFactoryContract = void 0;
function getSmartWalletFactoryContract(smartAccountVersion, ethAdapter, address) {
    return ethAdapter.getSmartWalletFactoryContract(smartAccountVersion, address);
}
exports.getSmartWalletFactoryContract = getSmartWalletFactoryContract;
function getMultiSendContract(smartAccountVersion, ethAdapter, address) {
    return ethAdapter.getMultiSendContract(smartAccountVersion, address);
}
exports.getMultiSendContract = getMultiSendContract;
function getMultiSendCallOnlyContract(smartAccountVersion, ethAdapter, address) {
    return ethAdapter.getMultiSendCallOnlyContract(smartAccountVersion, address);
}
exports.getMultiSendCallOnlyContract = getMultiSendCallOnlyContract;
function getSmartWalletContract(smartAccountVersion, ethAdapter, address) {
    return ethAdapter.getSmartWalletContract(smartAccountVersion, address);
}
exports.getSmartWalletContract = getSmartWalletContract;
function getFallbackGasTankContract(smartAccountVersion, ethAdapter, address) {
    return ethAdapter.getFallbackGasTankContract(smartAccountVersion, address);
}
exports.getFallbackGasTankContract = getFallbackGasTankContract;
function getDefaultCallbackHandlerContract(smartAccountVersion, ethAdapter, address) {
    return ethAdapter.getDefaultCallbackHandlerContract(smartAccountVersion, address);
}
exports.getDefaultCallbackHandlerContract = getDefaultCallbackHandlerContract;
function findChainById(chainId, chainConfig) {
    const currentChainInfo = chainConfig.find((n) => {
        return n.chainId === chainId;
    });
    if (currentChainInfo)
        return currentChainInfo;
    throw new Error('Chain Not Found');
}
exports.findChainById = findChainById;
function findContractAddressesByVersion(smartAccountVersion, chainId, chainConfig) {
    var _a, _b, _c, _d, _e, _f;
    const chainInfo = findChainById(chainId, chainConfig);
    /* eslint-disable  @typescript-eslint/no-explicit-any */
    const entryPointAddress = (_a = chainInfo.entryPoint.find((element) => {
        return element.version === smartAccountVersion;
    })) === null || _a === void 0 ? void 0 : _a.address;
    /* eslint-disable  @typescript-eslint/no-explicit-any */
    const walletFactoryAddress = (_b = chainInfo.walletFactory.find((element) => {
        return element.version === smartAccountVersion;
    })) === null || _b === void 0 ? void 0 : _b.address;
    /* eslint-disable  @typescript-eslint/no-explicit-any */
    const walletAddress = (_c = chainInfo.wallet.find((element) => {
        return element.version === smartAccountVersion;
    })) === null || _c === void 0 ? void 0 : _c.address;
    /* eslint-disable  @typescript-eslint/no-explicit-any */
    const multiSendAddress = (_d = chainInfo.multiSend.find((element) => {
        return element.version === smartAccountVersion;
    })) === null || _d === void 0 ? void 0 : _d.address;
    /* eslint-disable  @typescript-eslint/no-explicit-any */
    const multiSendCallAddress = (_e = chainInfo.multiSendCall.find((element) => {
        return element.version === smartAccountVersion;
    })) === null || _e === void 0 ? void 0 : _e.address;
    /* eslint-disable  @typescript-eslint/no-explicit-any */
    const fallBackHandlerAddress = (_f = chainInfo.fallBackHandler.find((element) => {
        return element.version === smartAccountVersion;
    })) === null || _f === void 0 ? void 0 : _f.address;
    if (!chainInfo) {
        throw new Error('Chain Not Found');
    }
    return {
        walletAddress,
        walletFactoryAddress,
        multiSendAddress,
        multiSendCallAddress,
        entryPointAddress,
        fallBackHandlerAddress
    };
}
exports.findContractAddressesByVersion = findContractAddressesByVersion;
//# sourceMappingURL=FetchContractsInfo.js.map