"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Utils = void 0;
const ethers_1 = require("ethers");
const constants_1 = require("@ethersproject/constants");
const common_1 = require("@biconomy/common");
class Utils {
    constructor() {
        this.buildSmartAccountTransaction = (template) => {
            return {
                to: template.to,
                value: template.value || 0,
                data: template.data || '0x',
                operation: template.operation || 0,
                targetTxGas: template.targetTxGas || 0,
                baseGas: template.baseGas || 0,
                gasPrice: template.gasPrice || 0,
                tokenGasPriceFactor: template.tokenGasPriceFactor || 1,
                gasToken: template.gasToken || constants_1.AddressZero,
                refundReceiver: template.refundReceiver || constants_1.AddressZero,
                nonce: template.nonce
            };
        };
        this.buildSmartAccountTransactions = (transactions) => {
            const txs = [];
            for (let i = 0; i < transactions.length; i++) {
                const innerTx = this.buildSmartAccountTransaction({
                    to: transactions[i].to,
                    value: transactions[i].value,
                    data: transactions[i].data,
                    nonce: 0
                });
                txs.push(innerTx);
            }
            return txs;
        };
        this.buildMultiSendSmartAccountTx = (multiSend, txs, nonce, overrides) => {
            return this.buildContractCall(multiSend, 'multiSend', [this.encodeMultiSend(txs)], nonce, true, overrides);
        };
        this.buildMultiSendTx = (multiSend, txs, nonce, delegateCall) => {
            const data = multiSend.interface.encodeFunctionData('multiSend', [this.encodeMultiSend(txs)]);
            return this.buildSmartAccountTransaction(Object.assign({
                to: multiSend.address,
                data,
                operation: delegateCall ? 1 : 0,
                nonce
            }));
        };
        this.encodeMultiSend = (txs) => {
            return '0x' + txs.map((tx) => this.encodeMetaTransaction(tx)).join('');
        };
        this.encodeMetaTransaction = (tx) => {
            const data = ethers_1.utils.arrayify(tx.data);
            const encoded = ethers_1.utils.solidityPack(['uint8', 'address', 'uint256', 'uint256', 'bytes'], [tx.operation, tx.to, tx.value, data.length, data]);
            return encoded.slice(2);
        };
        /* eslint-disable  @typescript-eslint/no-explicit-any */
        this.buildContractCall = (contract, method, params, nonce, delegateCall, overrides) => {
            const data = contract.interface.encodeFunctionData(method, params);
            return this.buildSmartAccountTransaction(Object.assign({
                to: contract.address,
                data,
                operation: delegateCall ? 1 : 0,
                nonce
            }, overrides));
        };
        common_1.Logger.log('Utils initialized');
    }
}
exports.Utils = Utils;
//# sourceMappingURL=Utils.js.map