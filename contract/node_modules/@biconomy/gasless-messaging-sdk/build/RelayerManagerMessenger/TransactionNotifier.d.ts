import Centrifuge from 'centrifuge';
interface TransactionDroppedMessage {
    event: 'transactionDropped';
    transactionHash: string;
    transactionId: string;
    networkId: number;
}
interface TransactionMinedMessage {
    event: 'transactionMined';
    transactionHash: string;
    transactionId: string;
    networkId: number;
    receipt: any;
}
interface TransactionNotifierMessage {
    data: TransactionDroppedMessage | TransactionMinedMessage;
}
export interface ITransactionNotifierOptions {
    onMined?: (transactionNotifier: TransactionNotifier) => any;
    onDropped?: (transactionNotifier: TransactionNotifier) => any;
}
export default class TransactionNotifier {
    socketClient: Centrifuge;
    transactionId: string;
    transactionHash: string;
    networkId: number;
    relayerAddress: string;
    receipt: any;
    onMined?: (transactionNotifier: TransactionNotifier) => any;
    onDropped?: (transactionNotifier: TransactionNotifier) => any;
    active: boolean;
    transactionNotifierMessageHandler(messageCtx: TransactionNotifierMessage): void;
    constructor(transactionId: string, transactionHash: string, networkId: number, relayerAddress: string, socketClient: Centrifuge, options?: ITransactionNotifierOptions);
}
export {};
//# sourceMappingURL=TransactionNotifier.d.ts.map