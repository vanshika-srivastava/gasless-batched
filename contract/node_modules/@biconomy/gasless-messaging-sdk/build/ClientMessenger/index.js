"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const centrifuge_1 = __importDefault(require("centrifuge"));
const ws_1 = require("ws");
const TransactionNotifier_1 = __importDefault(require("./TransactionNotifier"));
class ClientMessenger {
    constructor(socketClientEndpoint, websocket) {
        this.socketClient = new centrifuge_1.default(socketClientEndpoint, {
            debug: process.env.BICONOMY_SDK_DEBUG === 'true' || process.env.REACT_APP_BICONOMY_SDK_DEBUG === 'true',
            websocket: websocket || ws_1.WebSocket,
        });
    }
    connect() {
        return __awaiter(this, void 0, void 0, function* () {
            yield new Promise((resolve) => {
                this.socketClient.on('connect', () => {
                    resolve();
                });
                this.socketClient.on('error', (error) => {
                    console.error('Error while connecting to socket server in client messenger', error);
                });
                this.socketClient.connect();
            });
        });
    }
    createTransactionNotifier(transactionId, options = {}) {
        return new TransactionNotifier_1.default(transactionId, this.socketClient, {
            onMinedHandler: options.onMined,
            onHashGeneratedHandler: options.onHashGenerated,
            onErrorHandler: options.onError,
            onHashChanged: options.onHashChanged,
        });
    }
    unsubscribe(transactionId) {
        const subscription = this.socketClient.getSub(`transaction:${transactionId}`);
        subscription.unsubscribe();
    }
}
exports.default = ClientMessenger;
//# sourceMappingURL=index.js.map