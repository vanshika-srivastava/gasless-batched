import Centrifuge from 'centrifuge';
interface TransactionHashGeneratedMessage {
    event: 'transactionHashGenerated';
    transactionHash: string;
    transactionId: string;
}
interface TransactionHashChangedMessage {
    event: 'transactionHashChanged';
    transactionHash: string;
    transactionId: string;
}
interface ErrorMessage {
    event: 'error';
    error: string;
    transactionId: string;
}
interface TransactionMinedMessage {
    event: 'transactionMined';
    transactionHash: string;
    transactionId: string;
    receipt: any;
}
interface TransactionNotifierMessage {
    data: TransactionHashGeneratedMessage | TransactionMinedMessage | ErrorMessage | TransactionHashChangedMessage;
}
export default class TransactionNotifier {
    socketClient: Centrifuge;
    transactionId: string;
    transactionHash: string | undefined;
    error: string | undefined;
    receipt: any | undefined;
    onMined?: (transactionNotifier: TransactionNotifier) => any;
    onError?: (transactionNotifier: TransactionNotifier) => any;
    onHashGenerated?: (transactionNotifier: TransactionNotifier) => any;
    onHashChanged?: (transactionNotifier: TransactionNotifier) => any;
    transactionNotifierMessageHandler(messageCtx: TransactionNotifierMessage): void;
    constructor(transactionId: string, socketClient: Centrifuge, options: {
        onMinedHandler?: (transactionNotifier: TransactionNotifier) => any;
        onHashGeneratedHandler?: (transactionNotifier: TransactionNotifier) => any;
        onErrorHandler?: (transactionNotifier: TransactionNotifier) => any;
        onHashChanged?: (transactionNotifier: TransactionNotifier) => any;
    });
}
export {};
//# sourceMappingURL=TransactionNotifier.d.ts.map