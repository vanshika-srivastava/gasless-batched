"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class TransactionNotifier {
    constructor(transactionId, socketClient, options) {
        this.socketClient = socketClient;
        this.transactionId = transactionId;
        this.onMined = options.onMinedHandler;
        this.onHashGenerated = options.onHashGeneratedHandler;
        this.onHashChanged = options.onHashChanged;
        this.onError = options.onErrorHandler;
        this.socketClient.subscribe(`transaction:${transactionId}`, this.transactionNotifierMessageHandler.bind(this));
    }
    transactionNotifierMessageHandler(messageCtx) {
        const { transactionId, event } = messageCtx.data;
        try {
            if (!transactionId || transactionId !== this.transactionId) {
                throw new Error(`Invalid message received, expected the transactionId to be ${this.transactionId}\n: ${JSON.stringify(messageCtx, undefined, 4)}`);
            }
            // if subscriped to this transaction ID
            if (event === 'transactionHashGenerated' && this.onHashGenerated) {
                this.transactionHash = messageCtx.data.transactionHash;
                this.onHashGenerated(this);
                // deleting the handler on dropped or mined
                // this prevents memory leaks and also provides deduplication
                delete this.onHashGenerated;
            }
            else if (event === 'transactionMined' && this.onMined) {
                this.transactionHash = messageCtx.data.transactionHash;
                this.receipt = messageCtx.data.receipt;
                this.onMined(this);
                delete this.onMined;
            }
            else if (event === 'error' && this.onError) {
                this.error = messageCtx.data.error;
                this.onError(this);
                delete this.onError;
            }
            else if (event === 'transactionHashChanged' && this.onHashChanged) {
                this.transactionHash = messageCtx.data.transactionHash;
                this.onHashChanged(this);
            }
        }
        catch (e) {
            // eslint-disable-next-line no-console
            console.error(e);
        }
    }
}
exports.default = TransactionNotifier;
//# sourceMappingURL=TransactionNotifier.js.map