"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class TransactionMessenger {
    constructor(transactionId, transactionHash, networkId, relayerAddress, socketClient, socketAdmin) {
        this.socketClient = socketClient;
        this.socketAdmin = socketAdmin;
        this.transactionId = transactionId;
        this.relayerAddress = relayerAddress;
        this.networkId = networkId;
        this.transactionHash = transactionHash;
    }
    sendTransactionMined(receipt) {
        return __awaiter(this, void 0, void 0, function* () {
            yield Promise.all([
                this.socketAdmin.publish({
                    channel: `relayer:${this.relayerAddress}`,
                    data: {
                        event: 'transactionMined',
                        transactionHash: this.transactionHash,
                        transactionId: this.transactionId,
                        networkId: this.networkId,
                        receipt,
                    },
                }),
                this.socketAdmin.publish({
                    channel: `transaction:${this.transactionId}`,
                    data: {
                        event: 'transactionMined',
                        transactionHash: this.transactionHash,
                        transactionId: this.transactionId,
                        networkId: this.networkId,
                        receipt,
                    },
                }),
            ]);
        });
    }
    sendTransactionDropped() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.socketAdmin.publish({
                channel: `relayer:${this.relayerAddress}`,
                data: {
                    event: 'transactionDropped',
                    transactionHash: this.transactionHash,
                    transactionId: this.transactionId,
                },
            });
        });
    }
}
exports.default = TransactionMessenger;
//# sourceMappingURL=TransactionMessenger.js.map