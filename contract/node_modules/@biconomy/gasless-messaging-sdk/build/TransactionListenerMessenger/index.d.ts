import { CentClient } from 'cent.js';
import Centrifuge from 'centrifuge';
import TransactionMessenger from './TransactionMessenger';
interface TransactionHashGeneratedMessage {
    event: 'transactionHashGenerated';
    transactionHash: string;
    transactionId: string;
    relayerAddress: string;
    networkId: number;
}
interface TransactionHashChangedMessage {
    event: 'transactionHashChanged';
    transactionHash: string;
    transactionId: string;
    networkId: number;
    relayerAddress: string;
}
declare type TransactionListenerMessage = {
    data: TransactionHashGeneratedMessage | TransactionHashChangedMessage;
};
declare type QueueConnectionData = {
    url: string;
    name: string;
};
export default class TransactionListnerMessenger {
    socketClient: Centrifuge;
    socketAdmin: CentClient;
    onTransactionHashGenerated: (transactionMessenger: TransactionMessenger) => any;
    onTransactionHashChanged: (transactionMessenger: TransactionMessenger) => any;
    queue: QueueConnectionData;
    constructor(transactionListenerId: string, socketClientEndpoint: string, socketAdminEndpoint: string, socketAdminSecret: string, socketApiKey: string, queue: QueueConnectionData, onTransactionHashChanged: (transactionMessenger: TransactionMessenger) => any, onTransactionHashGenerated: (transactionMessenger: TransactionMessenger) => any);
    transactionListenerMessageHandler(messageCtx: TransactionListenerMessage): void;
    connect(): Promise<void>;
}
export {};
//# sourceMappingURL=index.d.ts.map