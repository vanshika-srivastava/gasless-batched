"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deployCounterFactualEncodedData = exports.getWalletInfo = void 0;
const node_client_1 = __importDefault(require("@biconomy/node-client"));
const ethers_1 = require("ethers");
const _ = __importStar(require("lodash"));
async function getWalletInfo(initializerDto) {
    const { chainId, owner, txServiceUrl } = initializerDto;
    const smartAccountInfo = await new node_client_1.default({ txServiceUrl }).getSmartAccountsByOwner({
        owner: owner,
        chainId
    });
    if (!smartAccountInfo.data || smartAccountInfo.data.length == 0) {
        throw new Error('No Smart Account Found against supplied EOA');
    }
    const walletInfo = smartAccountInfo.data;
    if (walletInfo.length === 0)
        throw new Error('No Wallet Info Found against supplied data');
    // check wallet is deployed on not
    const wallet = _.filter(walletInfo, { isDeployed: true });
    if (wallet.length > 0) {
        // filtering wallet base on deployed status and latest deployed wallet on chain
        let walletLists = _.filter(wallet, { chainId: chainId });
        if (walletLists.length > 0) {
            return walletLists[0];
        }
        walletLists = wallet.sort((objA, objB) => objB.createdAt - objA.createdAt);
        return walletLists[0];
    }
    return walletInfo[0];
}
exports.getWalletInfo = getWalletInfo;
async function deployCounterFactualEncodedData(initializerDto) {
    let { index } = initializerDto;
    index = index ? index : 0;
    const walletInfo = await getWalletInfo(initializerDto);
    // these would be deployCounterFactualAccount
    const factory = new ethers_1.Contract(walletInfo.factoryAddress, [
        'function deployCounterFactualAccount(address _owner, uint256 _index) returns(address)'
    ]);
    const encodedData = factory.interface.encodeFunctionData('deployCounterFactualAccount', [
        walletInfo.owner,
        index
    ]);
    return encodedData;
}
exports.deployCounterFactualEncodedData = deployCounterFactualEncodedData;
//# sourceMappingURL=WalletFactoryApi.js.map