"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FallbackGasTankAPI = void 0;
const properties_1 = require("@ethersproject/properties");
const httpRequests_1 = require("./utils/httpRequests");
const common_1 = require("@biconomy/common");
/**
 * Verifying and Signing fallback gasless transactions
 */
class FallbackGasTankAPI {
    constructor(signingServiceUrl, dappAPIKey) {
        this.signingServiceUrl = signingServiceUrl;
        this.dappAPIKey = dappAPIKey;
        this.signingServiceUrl = signingServiceUrl;
        this.dappAPIKey = dappAPIKey;
    }
    async getDappIdentifierAndSign(fallbackUserOp) {
        try {
            if (!this.dappAPIKey || this.dappAPIKey === '') {
                throw new Error('Dapp API Key not found. Please pass dappAPIKey in constructor');
            }
            fallbackUserOp = await (0, properties_1.resolveProperties)(fallbackUserOp);
            fallbackUserOp.sender = fallbackUserOp.sender;
            fallbackUserOp.target = fallbackUserOp.target;
            fallbackUserOp.nonce = Number(fallbackUserOp.nonce);
            fallbackUserOp.callData = fallbackUserOp.callData;
            fallbackUserOp.callGasLimit = fallbackUserOp.callGasLimit;
            fallbackUserOp.dappIdentifier = '';
            fallbackUserOp.signature = '0x';
            // move dappAPIKey in headers
            /* eslint-disable  @typescript-eslint/no-explicit-any */
            const result = await (0, httpRequests_1.sendRequest)({
                url: `${this.signingServiceUrl}/fallback-user-op`,
                method: httpRequests_1.HttpMethod.Post,
                headers: { 'x-api-key': this.dappAPIKey },
                body: { fallbackUserOp: fallbackUserOp }
            });
            if (result && result.data && result.statusCode === 200) {
                return result.data;
            }
            else {
                console.error(result.error);
                throw new Error('Error in fallback signing api');
            }
        }
        catch (err) {
            common_1.Logger.error('Error in fallback signing api', err);
            throw new Error('Error in fallback signing api');
        }
    }
}
exports.FallbackGasTankAPI = FallbackGasTankAPI;
//# sourceMappingURL=FallbackGasTankAPI.js.map