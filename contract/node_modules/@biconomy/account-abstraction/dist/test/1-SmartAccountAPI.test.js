"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const contracts_1 = require("@account-abstraction/contracts");
const ethers_1 = require("ethers");
const utils_1 = require("ethers/lib/utils");
const chai_1 = require("chai");
const hardhat_1 = require("hardhat");
const src_1 = require("../src");
const types_1 = require("@biconomy/common/dist/src/types");
const ethers_lib_1 = require("@biconomy/ethers-lib");
const provider = hardhat_1.ethers.provider;
const signer = provider.getSigner();
const fallBackHandlerAddress = '0xF05217199F1C25604c67993F11a81461Bc97F3Ab'; // temp
describe('SmartAccountAPI', async () => {
    let owner;
    let api;
    let entryPoint;
    let beneficiary;
    let recipient;
    let walletAddress;
    let baseWalletContract;
    let walletFactoryContract;
    let walletDeployed = false;
    let userSCW;
    let expectedSCW;
    let chainId;
    before('init', async () => {
        chainId = (await provider.getNetwork()).chainId;
        console.log(chainId);
        entryPoint = await new ethers_lib_1.EntryPointFactoryContractV100(signer).deploy();
        console.log('entryPoint ', entryPoint.address);
        beneficiary = await signer.getAddress();
        recipient = await new types_1.SampleRecipient__factory(signer).deploy();
        owner = ethers_1.Wallet.createRandom();
        console.log('EOA address? ', owner.address);
        baseWalletContract = await new ethers_lib_1.SmartWalletFactoryV100(signer).deploy(entryPoint.address);
        console.log('base wallet deployed at ', baseWalletContract.address);
        walletFactoryContract = await new ethers_lib_1.SmartWalletContractFactoryV100(signer).deploy(baseWalletContract.address);
        console.log('wallet factory deployed at ', walletFactoryContract.address);
        expectedSCW = await walletFactoryContract.getAddressForCounterFactualAccount(owner.address, 0);
        console.log('expectedSCW address ', expectedSCW);
        userSCW = baseWalletContract.attach(expectedSCW);
        const clientConfig = {
            dappAPIKey: '',
            chainId: chainId,
            entryPointAddress: entryPoint.address,
            biconomySigningServiceUrl: 'https://paymaster-signing-service.staging.biconomy.io/api/v1/sign',
            socketServerUrl: 'wss://sdk-testing-ws.staging.biconomy.io/connection/websocket',
            bundlerUrl: 'https://sdk-relayer.staging.biconomy.io/api/v1/relay',
            txServiceUrl: 'https://sdk-backend.staging.biconomy.io/v1'
        };
        const entryPointClass = contracts_1.EntryPoint__factory.connect(entryPoint.address, signer);
        api = new src_1.SmartAccountAPI(provider, // can do json rpc provider
        entryPointClass, clientConfig, expectedSCW, owner.address, signer, fallBackHandlerAddress, walletFactoryContract.address, 0);
        console.log('smart account api', api.accountAddress);
    });
    it('getUserOpHash should match entryPoint.getUserOpHash', async function () {
        const userOp = {
            sender: '0x'.padEnd(42, '1'),
            nonce: 2,
            initCode: '0x3333',
            callData: '0x4444',
            callGasLimit: 5,
            verificationGasLimit: 6,
            preVerificationGas: 7,
            maxFeePerGas: 8,
            maxPriorityFeePerGas: 9,
            paymasterAndData: '0xaaaaaa',
            signature: '0xbbbb'
        };
        const hash = await api.getUserOpHash(userOp);
        const epHash = await entryPoint.getUserOpHash(userOp);
        (0, chai_1.expect)(hash).to.equal(epHash);
    });
    it('should deploy to counterfactual address', async () => {
        walletAddress = await api.accountAddress;
        console.log('wallet address from api ', walletAddress);
        (0, chai_1.expect)(await provider.getCode(walletAddress).then((code) => code.length)).to.equal(2);
        await signer.sendTransaction({
            to: walletAddress,
            value: (0, utils_1.parseEther)('0.1')
        });
        console.log('sent eth');
        let op;
        try {
            console.log('recipient.address ', recipient.address);
            const data = recipient.interface.encodeFunctionData('something', ['hello']);
            op = await api.createSignedUserOp({
                target: [recipient.address],
                data: [data],
                value: [0]
            });
            console.log('signed user op ', op);
        }
        catch (err) {
            console.log('error here');
            console.log(err);
        }
        // TODO: fix this chainId issue
    });
});
//# sourceMappingURL=1-SmartAccountAPI.test.js.map