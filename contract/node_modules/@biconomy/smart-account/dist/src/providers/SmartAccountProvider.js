"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SmartAccountProvider = void 0;
const providers_1 = require("@ethersproject/providers");
const SmartAccountSigner_1 = require("../signers/SmartAccountSigner");
// Note: WIP. Not used by SmartAccount at the moment
// deadcode
/*export class SmartAccountProvider extends Web3Provider { //implements JsonRpcHandler

    // defaultChainId is the default chainId to use with requests, but may be
    // overridden by passing chainId argument to a specific request
    readonly _defaultChainId?: number
    
    constructor(provider: ExternalProvider, defaultChainId?: ChainId) {

    provider = provider
    super(provider, 'any')

    this._defaultChainId = Number(defaultChainId)

    }

    // getsigner()
}*/
// Other ways..
// We could just extend BaseProvider
class SmartAccountProvider extends providers_1.BaseProvider {
    //
    // Might need relayer url in config
    constructor(tempProvider, chainId, originalSigner, // EOASigner
    originalProvider // could be Web3Provider // optional? // readonly httpRpcClient: HttpRpcClient, // Required for relaying to rpc-relayer // readonly smartAccountAPI: SmartAccountAPI ? // Could be useful/needful
    ) {
        super({
            name: 'Smart Account User Refund Provider',
            chainId: chainId
        });
        this.originalSigner = originalSigner;
        this.originalProvider = originalProvider;
        // Signer needs config, originalSigner, way to dispatch to rpc-relayer, smart-account-apis
        // Might pass relayer url as config
        this.signer = new SmartAccountSigner_1.SmartAccountSigner(tempProvider, chainId);
    }
    async init() {
        // Could init client / API class instances
        return this;
    }
    getSigner() {
        return this.signer;
    }
    async getTransaction(transactionHash) {
        // Getting wallet transaction
        return await super.getTransaction(transactionHash);
    }
    // Could be
    // getTransactionReceipt
    // Helper for fabricating a response in a format usable by ethers users...
    async constructSmartAccountTransactionResponse() {
        return null;
    }
}
exports.SmartAccountProvider = SmartAccountProvider;
//# sourceMappingURL=SmartAccountProvider.js.map