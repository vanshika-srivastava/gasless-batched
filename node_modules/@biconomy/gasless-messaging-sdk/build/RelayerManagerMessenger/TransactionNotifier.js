"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class TransactionNotifier {
    constructor(transactionId, transactionHash, networkId, relayerAddress, socketClient, options = {}) {
        this.active = true;
        this.socketClient = socketClient;
        this.transactionId = transactionId;
        this.transactionHash = transactionHash;
        this.networkId = networkId;
        this.relayerAddress = relayerAddress;
        this.onMined = options.onMined;
        this.onDropped = options.onDropped;
        this.socketClient.subscribe(`relayer:${relayerAddress}`, this.transactionNotifierMessageHandler.bind(this));
    }
    transactionNotifierMessageHandler(messageCtx) {
        const { transactionId, event, transactionHash } = messageCtx.data;
        try {
            // TODO
            // Do not trigger for different tx hash on same transaction id
            // This could happen because duplicate instances could not get deleted
            if (!transactionId || transactionId !== this.transactionId
                || transactionHash !== this.transactionHash) {
                // only respond to message about this transaction
                return;
            }
            if (this.active) {
                // if subscriped to this transaction ID
                if (event === 'transactionDropped' && this.onDropped) {
                    this.onDropped(this);
                    // deleting the handler on dropped or mined
                    // this prevents memory leaks and also provides deduplication
                    this.active = false;
                }
                else if (event === 'transactionMined' && this.onMined) {
                    this.receipt = messageCtx.data.receipt;
                    this.onMined(this);
                    delete this.onMined;
                    this.active = false;
                }
            }
        }
        catch (e) {
            // eslint-disable-next-line no-console
            console.error(e);
        }
    }
}
exports.default = TransactionNotifier;
//# sourceMappingURL=TransactionNotifier.js.map