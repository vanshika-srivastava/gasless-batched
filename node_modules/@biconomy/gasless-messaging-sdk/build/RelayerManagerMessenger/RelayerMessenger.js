"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const TransactionNotifier_1 = __importDefault(require("./TransactionNotifier"));
class RelayerMessenger {
    constructor(relayerAddress, socketClient, socketAdmin, channel, queueName) {
        this.subscribedTransactions = {};
        this.socketClient = socketClient;
        this.socketAdmin = socketAdmin;
        this.relayerAddress = relayerAddress;
        this.channel = channel;
        this.queueName = queueName;
    }
    sendTransactionHashGenerated(transactionId, transactionHash, networkId, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            yield Promise.all([
                this.socketAdmin.publish({
                    channel: `transaction:${transactionId}`,
                    data: {
                        event: 'transactionHashGenerated',
                        transactionHash,
                        transactionId,
                    },
                }),
                this.channel.sendToQueue(this.queueName, Buffer.from(JSON.stringify({
                    event: 'transactionHashGenerated',
                    transactionHash,
                    transactionId,
                    relayerAddress: this.relayerAddress,
                    networkId,
                })), {
                    persistent: true,
                }),
            ]);
            return new TransactionNotifier_1.default(transactionId, transactionHash, networkId, this.relayerAddress, this.socketClient, { onMined: options.onMined, onDropped: options.onDropped });
        });
    }
    sendTransactionHashChanged(transactionId, transactionHash, networkId, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            yield Promise.all([
                this.socketAdmin.publish({
                    channel: `transaction:${transactionId}`,
                    data: {
                        event: 'transactionHashChanged',
                        transactionHash,
                        transactionId,
                    },
                }),
                this.channel.sendToQueue(this.queueName, Buffer.from(JSON.stringify({
                    event: 'transactionHashChanged',
                    transactionHash,
                    transactionId,
                    relayerAddress: this.relayerAddress,
                    networkId,
                })), {
                    persistent: true,
                }),
            ]);
            return new TransactionNotifier_1.default(transactionId, transactionHash, networkId, this.relayerAddress, this.socketClient, { onMined: options.onMined, onDropped: options.onDropped });
        });
    }
    sendErrorMessage(transactionId, errorMessage) {
        return __awaiter(this, void 0, void 0, function* () {
            this.socketAdmin.publish({
                channel: `transaction:${transactionId}`,
                data: {
                    event: 'error',
                    error: errorMessage,
                    transactionId,
                },
            });
        });
    }
}
exports.default = RelayerMessenger;
//# sourceMappingURL=RelayerMessenger.js.map