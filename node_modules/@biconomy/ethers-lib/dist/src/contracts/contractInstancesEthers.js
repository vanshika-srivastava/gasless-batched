"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDefaultCallbackHandlerInstance = exports.getFallbackGasTankContractInstance = exports.getEntryPointFactoryContractInstance = exports.getSmartWalletFactoryContractInstance = exports.getMultiSendCallOnlyContractInstance = exports.getMultiSendContractInstance = exports.getSmartWalletContractInstance = void 0;
const SmartWalletContractV100__factory_1 = require("../../typechain/src/ethers-v5/v1.0.0/factories/SmartWalletContractV100__factory");
const MultiSendContractV100__factory_1 = require("../../typechain/src/ethers-v5/v1.0.0/factories/MultiSendContractV100__factory");
const MultiSendCallOnlyContractV100__factory_1 = require("../../typechain/src/ethers-v5/v1.0.0/factories/MultiSendCallOnlyContractV100__factory");
const SmartWalletFactoryContractV100__factory_1 = require("../../typechain/src/ethers-v5/v1.0.0/factories/SmartWalletFactoryContractV100__factory");
const SmartWalletContractEthers_1 = __importDefault(require("./SmartWallet/v1.0.0/SmartWalletContractEthers"));
const MultiSendEthersContract_1 = __importDefault(require("./MultiSend/v1.0.0/MultiSendEthersContract"));
const MultiSendCallOnlyEthersContract_1 = __importDefault(require("./MultiSendCallOnly/v1.0.0/MultiSendCallOnlyEthersContract"));
const SmartWalletProxyFactoryEthersContract_1 = __importDefault(require("./SmartWalletFactory/v1.0.0/SmartWalletProxyFactoryEthersContract"));
const EntryPointContractV100__factory_1 = require("../../typechain/src/ethers-v5/v1.0.0/factories/EntryPointContractV100__factory");
const EntryPointEthersContract_1 = __importDefault(require("./EntryPointContract/v1.0.0/EntryPointEthersContract"));
const FallbackGasTankContractV100__factory_1 = require("../../typechain/src/ethers-v5/v1.0.0/factories/FallbackGasTankContractV100__factory");
const FallbackGasTankEthersContract_1 = __importDefault(require("./FallbackGasTank/v1.0.0/FallbackGasTankEthersContract"));
const DefaultCallbackHandlerV100__factory_1 = require("../../typechain/src/ethers-v5/v1.0.0/factories/DefaultCallbackHandlerV100__factory");
const DefaultCallbackHandlerEthersContract_1 = __importDefault(require("./DefaultCallbackHandlerContract/v1.0.0/DefaultCallbackHandlerEthersContract"));
function getSmartWalletContractInstance(smartAccountVersion, contractAddress, 
// signer: Signer
provider) {
    let walletContract;
    switch (smartAccountVersion) {
        case '1.0.0':
            walletContract = SmartWalletContractV100__factory_1.SmartWalletContractV100__factory.connect(contractAddress, provider);
            return new SmartWalletContractEthers_1.default(walletContract);
        default:
            walletContract = SmartWalletContractV100__factory_1.SmartWalletContractV100__factory.connect(contractAddress, provider);
            return new SmartWalletContractEthers_1.default(walletContract);
    }
}
exports.getSmartWalletContractInstance = getSmartWalletContractInstance;
// Review
function getMultiSendContractInstance(smartAccountVersion, contractAddress, 
// signer: Signer
provider) {
    let multiSendContract;
    switch (smartAccountVersion) {
        case '1.0.0':
            multiSendContract = MultiSendContractV100__factory_1.MultiSendContractV100__factory.connect(contractAddress, provider);
            return new MultiSendEthersContract_1.default(multiSendContract);
        default:
            multiSendContract = MultiSendContractV100__factory_1.MultiSendContractV100__factory.connect(contractAddress, provider);
            return new MultiSendEthersContract_1.default(multiSendContract);
    }
}
exports.getMultiSendContractInstance = getMultiSendContractInstance;
function getMultiSendCallOnlyContractInstance(smartAccountVersion, contractAddress, 
// signer: Signer
provider) {
    let multiSendCallContract;
    switch (smartAccountVersion) {
        case '1.0.0':
            multiSendCallContract = MultiSendCallOnlyContractV100__factory_1.MultiSendCallOnlyContractV100__factory.connect(contractAddress, provider);
            return new MultiSendCallOnlyEthersContract_1.default(multiSendCallContract);
        default:
            multiSendCallContract = MultiSendCallOnlyContractV100__factory_1.MultiSendCallOnlyContractV100__factory.connect(contractAddress, provider);
            return new MultiSendCallOnlyEthersContract_1.default(multiSendCallContract);
    }
}
exports.getMultiSendCallOnlyContractInstance = getMultiSendCallOnlyContractInstance;
function getSmartWalletFactoryContractInstance(smartAccountVersion, contractAddress, provider) {
    let walletFactoryContract;
    switch (smartAccountVersion) {
        case '1.0.0':
            walletFactoryContract = SmartWalletFactoryContractV100__factory_1.SmartWalletFactoryContractV100__factory.connect(contractAddress, provider);
            return new SmartWalletProxyFactoryEthersContract_1.default(walletFactoryContract);
        default:
            walletFactoryContract = SmartWalletFactoryContractV100__factory_1.SmartWalletFactoryContractV100__factory.connect(contractAddress, provider);
            return new SmartWalletProxyFactoryEthersContract_1.default(walletFactoryContract);
    }
}
exports.getSmartWalletFactoryContractInstance = getSmartWalletFactoryContractInstance;
function getEntryPointFactoryContractInstance(smartAccountVersion, contractAddress, provider) {
    let walletFactoryContract;
    switch (smartAccountVersion) {
        case '1.0.0':
            walletFactoryContract = EntryPointContractV100__factory_1.EntryPointContractV100__factory.connect(contractAddress, provider);
            return new EntryPointEthersContract_1.default(walletFactoryContract);
        default:
            walletFactoryContract = EntryPointContractV100__factory_1.EntryPointContractV100__factory.connect(contractAddress, provider);
            return new EntryPointEthersContract_1.default(walletFactoryContract);
    }
}
exports.getEntryPointFactoryContractInstance = getEntryPointFactoryContractInstance;
function getFallbackGasTankContractInstance(smartAccountVersion, contractAddress, provider) {
    let fallbackGasTankContract;
    switch (smartAccountVersion) {
        case '1.0.0':
            fallbackGasTankContract = FallbackGasTankContractV100__factory_1.FallbackGasTankContractV100__factory.connect(contractAddress, provider);
            return new FallbackGasTankEthersContract_1.default(fallbackGasTankContract);
        case '1.0.1':
        default:
            fallbackGasTankContract = FallbackGasTankContractV100__factory_1.FallbackGasTankContractV100__factory.connect(contractAddress, provider);
            return new FallbackGasTankEthersContract_1.default(fallbackGasTankContract);
    }
}
exports.getFallbackGasTankContractInstance = getFallbackGasTankContractInstance;
function getDefaultCallbackHandlerInstance(smartAccountVersion, contractAddress, provider) {
    let defaultCallbackHandlerContract;
    switch (smartAccountVersion) {
        case '1.0.0':
            defaultCallbackHandlerContract = DefaultCallbackHandlerV100__factory_1.DefaultCallbackHandlerV100__factory.connect(contractAddress, provider);
            return new DefaultCallbackHandlerEthersContract_1.default(defaultCallbackHandlerContract);
        default:
            defaultCallbackHandlerContract = DefaultCallbackHandlerV100__factory_1.DefaultCallbackHandlerV100__factory.connect(contractAddress, provider);
            return new DefaultCallbackHandlerEthersContract_1.default(defaultCallbackHandlerContract);
    }
}
exports.getDefaultCallbackHandlerInstance = getDefaultCallbackHandlerInstance;
//# sourceMappingURL=contractInstancesEthers.js.map