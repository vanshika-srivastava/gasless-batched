import { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export interface SmartWalletFactoryContractV100Interface extends utils.Interface {
    contractName: "SmartWalletFactoryContractV100";
    functions: {
        "accountCreationCode()": FunctionFragment;
        "basicImplementation()": FunctionFragment;
        "deployAccount(address)": FunctionFragment;
        "deployCounterFactualAccount(address,uint256)": FunctionFragment;
        "getAddressForCounterFactualAccount(address,uint256)": FunctionFragment;
        "minimalHandler()": FunctionFragment;
    };
    encodeFunctionData(functionFragment: "accountCreationCode", values?: undefined): string;
    encodeFunctionData(functionFragment: "basicImplementation", values?: undefined): string;
    encodeFunctionData(functionFragment: "deployAccount", values: [string]): string;
    encodeFunctionData(functionFragment: "deployCounterFactualAccount", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getAddressForCounterFactualAccount", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "minimalHandler", values?: undefined): string;
    decodeFunctionResult(functionFragment: "accountCreationCode", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "basicImplementation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deployAccount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deployCounterFactualAccount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getAddressForCounterFactualAccount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "minimalHandler", data: BytesLike): Result;
    events: {
        "AccountCreation(address,address,uint256)": EventFragment;
        "AccountCreationWithoutIndex(address,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "AccountCreation"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "AccountCreationWithoutIndex"): EventFragment;
}
export type AccountCreationEvent = TypedEvent<[
    string,
    string,
    BigNumber
], {
    account: string;
    owner: string;
    index: BigNumber;
}>;
export type AccountCreationEventFilter = TypedEventFilter<AccountCreationEvent>;
export type AccountCreationWithoutIndexEvent = TypedEvent<[
    string,
    string
], {
    account: string;
    owner: string;
}>;
export type AccountCreationWithoutIndexEventFilter = TypedEventFilter<AccountCreationWithoutIndexEvent>;
export interface SmartWalletFactoryContractV100 extends BaseContract {
    contractName: "SmartWalletFactoryContractV100";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: SmartWalletFactoryContractV100Interface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        accountCreationCode(overrides?: CallOverrides): Promise<[string]>;
        basicImplementation(overrides?: CallOverrides): Promise<[string]>;
        deployAccount(_owner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        deployCounterFactualAccount(_owner: string, _index: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        getAddressForCounterFactualAccount(_owner: string, _index: BigNumberish, overrides?: CallOverrides): Promise<[string] & {
            _account: string;
        }>;
        minimalHandler(overrides?: CallOverrides): Promise<[string]>;
    };
    accountCreationCode(overrides?: CallOverrides): Promise<string>;
    basicImplementation(overrides?: CallOverrides): Promise<string>;
    deployAccount(_owner: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    deployCounterFactualAccount(_owner: string, _index: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    getAddressForCounterFactualAccount(_owner: string, _index: BigNumberish, overrides?: CallOverrides): Promise<string>;
    minimalHandler(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        accountCreationCode(overrides?: CallOverrides): Promise<string>;
        basicImplementation(overrides?: CallOverrides): Promise<string>;
        deployAccount(_owner: string, overrides?: CallOverrides): Promise<string>;
        deployCounterFactualAccount(_owner: string, _index: BigNumberish, overrides?: CallOverrides): Promise<string>;
        getAddressForCounterFactualAccount(_owner: string, _index: BigNumberish, overrides?: CallOverrides): Promise<string>;
        minimalHandler(overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "AccountCreation(address,address,uint256)"(account?: string | null, owner?: string | null, index?: BigNumberish | null): AccountCreationEventFilter;
        AccountCreation(account?: string | null, owner?: string | null, index?: BigNumberish | null): AccountCreationEventFilter;
        "AccountCreationWithoutIndex(address,address)"(account?: string | null, owner?: string | null): AccountCreationWithoutIndexEventFilter;
        AccountCreationWithoutIndex(account?: string | null, owner?: string | null): AccountCreationWithoutIndexEventFilter;
    };
    estimateGas: {
        accountCreationCode(overrides?: CallOverrides): Promise<BigNumber>;
        basicImplementation(overrides?: CallOverrides): Promise<BigNumber>;
        deployAccount(_owner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        deployCounterFactualAccount(_owner: string, _index: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        getAddressForCounterFactualAccount(_owner: string, _index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        minimalHandler(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        accountCreationCode(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        basicImplementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        deployAccount(_owner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        deployCounterFactualAccount(_owner: string, _index: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        getAddressForCounterFactualAccount(_owner: string, _index: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        minimalHandler(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
