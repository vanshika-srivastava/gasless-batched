import { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export type FallbackUserOperationStruct = {
    sender: string;
    target: string;
    dappIdentifier: string;
    nonce: BigNumberish;
    callGasLimit: BigNumberish;
    callData: BytesLike;
    signature: BytesLike;
};
export type FallbackUserOperationStructOutput = [
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    string
] & {
    sender: string;
    target: string;
    dappIdentifier: string;
    nonce: BigNumber;
    callGasLimit: BigNumber;
    callData: string;
    signature: string;
};
export interface FallbackGasTankContractV100Interface extends utils.Interface {
    contractName: "FallbackGasTankContractV100";
    functions: {
        "baseGas()": FunctionFragment;
        "dappIdentifierBalances(address)": FunctionFragment;
        "depositFor(address)": FunctionFragment;
        "getBalance(address)": FunctionFragment;
        "getHash((address,address,address,uint256,uint256,bytes,bytes))": FunctionFragment;
        "getNonce(address)": FunctionFragment;
        "handleFallbackUserOp((address,address,address,uint256,uint256,bytes,bytes))": FunctionFragment;
        "owner()": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "setBaseGas(uint128)": FunctionFragment;
        "setSigner(address)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "verifyingSigner()": FunctionFragment;
        "withdrawGasForDapp(address,address,uint256)": FunctionFragment;
    };
    encodeFunctionData(functionFragment: "baseGas", values?: undefined): string;
    encodeFunctionData(functionFragment: "dappIdentifierBalances", values: [string]): string;
    encodeFunctionData(functionFragment: "depositFor", values: [string]): string;
    encodeFunctionData(functionFragment: "getBalance", values: [string]): string;
    encodeFunctionData(functionFragment: "getHash", values: [FallbackUserOperationStruct]): string;
    encodeFunctionData(functionFragment: "getNonce", values: [string]): string;
    encodeFunctionData(functionFragment: "handleFallbackUserOp", values: [FallbackUserOperationStruct]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setBaseGas", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setSigner", values: [string]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [string]): string;
    encodeFunctionData(functionFragment: "verifyingSigner", values?: undefined): string;
    encodeFunctionData(functionFragment: "withdrawGasForDapp", values: [string, string, BigNumberish]): string;
    decodeFunctionResult(functionFragment: "baseGas", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dappIdentifierBalances", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "depositFor", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getHash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "handleFallbackUserOp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setBaseGas", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSigner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verifyingSigner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawGasForDapp", data: BytesLike): Result;
    events: {
        "BaseGasChanged(uint128,address)": EventFragment;
        "Deposit(address,uint256,address)": EventFragment;
        "GasTankEmpty()": EventFragment;
        "GasWithdrawn(address,address,address,uint256)": EventFragment;
        "GaslessTxExecuted(address,address,bytes,address,uint256)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "BaseGasChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "GasTankEmpty"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "GasWithdrawn"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "GaslessTxExecuted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}
export type BaseGasChangedEvent = TypedEvent<[
    BigNumber,
    string
], {
    newBaseGas: BigNumber;
    actor: string;
}>;
export type BaseGasChangedEventFilter = TypedEventFilter<BaseGasChangedEvent>;
export type DepositEvent = TypedEvent<[
    string,
    BigNumber,
    string
], {
    sender: string;
    amount: BigNumber;
    dappIdentifier: string;
}>;
export type DepositEventFilter = TypedEventFilter<DepositEvent>;
export type GasTankEmptyEvent = TypedEvent<[], {}>;
export type GasTankEmptyEventFilter = TypedEventFilter<GasTankEmptyEvent>;
export type GasWithdrawnEvent = TypedEvent<[
    string,
    string,
    string,
    BigNumber
], {
    _dappIdentifier: string;
    _to: string;
    _actor: string;
    _value: BigNumber;
}>;
export type GasWithdrawnEventFilter = TypedEventFilter<GasWithdrawnEvent>;
export type GaslessTxExecutedEvent = TypedEvent<[
    string,
    string,
    string,
    string,
    BigNumber
], {
    relayer: string;
    sender: string;
    data: string;
    dappIdentifier: string;
    payment: BigNumber;
}>;
export type GaslessTxExecutedEventFilter = TypedEventFilter<GaslessTxExecutedEvent>;
export type OwnershipTransferredEvent = TypedEvent<[
    string,
    string
], {
    previousOwner: string;
    newOwner: string;
}>;
export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;
export interface FallbackGasTankContractV100 extends BaseContract {
    contractName: "FallbackGasTankContractV100";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: FallbackGasTankContractV100Interface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        baseGas(overrides?: CallOverrides): Promise<[BigNumber]>;
        dappIdentifierBalances(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;
        depositFor(dappIdentifier: string, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        getBalance(_dappIdentifier: string, overrides?: CallOverrides): Promise<[BigNumber] & {
            balance: BigNumber;
        }>;
        getHash(fallbackUserOp: FallbackUserOperationStruct, overrides?: CallOverrides): Promise<[string]>;
        getNonce(_sender: string, overrides?: CallOverrides): Promise<[BigNumber] & {
            nonce: BigNumber;
        }>;
        handleFallbackUserOp(fallbackUserOp: FallbackUserOperationStruct, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        renounceOwnership(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        setBaseGas(gas: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        setSigner(_newVerifyingSigner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        verifyingSigner(overrides?: CallOverrides): Promise<[string]>;
        withdrawGasForDapp(dappIdentifier: string, withdrawAddress: string, amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
    };
    baseGas(overrides?: CallOverrides): Promise<BigNumber>;
    dappIdentifierBalances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
    depositFor(dappIdentifier: string, overrides?: PayableOverrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    getBalance(_dappIdentifier: string, overrides?: CallOverrides): Promise<BigNumber>;
    getHash(fallbackUserOp: FallbackUserOperationStruct, overrides?: CallOverrides): Promise<string>;
    getNonce(_sender: string, overrides?: CallOverrides): Promise<BigNumber>;
    handleFallbackUserOp(fallbackUserOp: FallbackUserOperationStruct, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    owner(overrides?: CallOverrides): Promise<string>;
    renounceOwnership(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    setBaseGas(gas: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    setSigner(_newVerifyingSigner: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    verifyingSigner(overrides?: CallOverrides): Promise<string>;
    withdrawGasForDapp(dappIdentifier: string, withdrawAddress: string, amount: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        baseGas(overrides?: CallOverrides): Promise<BigNumber>;
        dappIdentifierBalances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
        depositFor(dappIdentifier: string, overrides?: CallOverrides): Promise<void>;
        getBalance(_dappIdentifier: string, overrides?: CallOverrides): Promise<BigNumber>;
        getHash(fallbackUserOp: FallbackUserOperationStruct, overrides?: CallOverrides): Promise<string>;
        getNonce(_sender: string, overrides?: CallOverrides): Promise<BigNumber>;
        handleFallbackUserOp(fallbackUserOp: FallbackUserOperationStruct, overrides?: CallOverrides): Promise<[boolean, string] & {
            success: boolean;
            ret: string;
        }>;
        owner(overrides?: CallOverrides): Promise<string>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        setBaseGas(gas: BigNumberish, overrides?: CallOverrides): Promise<void>;
        setSigner(_newVerifyingSigner: string, overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;
        verifyingSigner(overrides?: CallOverrides): Promise<string>;
        withdrawGasForDapp(dappIdentifier: string, withdrawAddress: string, amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "BaseGasChanged(uint128,address)"(newBaseGas?: BigNumberish | null, actor?: string | null): BaseGasChangedEventFilter;
        BaseGasChanged(newBaseGas?: BigNumberish | null, actor?: string | null): BaseGasChangedEventFilter;
        "Deposit(address,uint256,address)"(sender?: string | null, amount?: BigNumberish | null, dappIdentifier?: string | null): DepositEventFilter;
        Deposit(sender?: string | null, amount?: BigNumberish | null, dappIdentifier?: string | null): DepositEventFilter;
        "GasTankEmpty()"(): GasTankEmptyEventFilter;
        GasTankEmpty(): GasTankEmptyEventFilter;
        "GasWithdrawn(address,address,address,uint256)"(_dappIdentifier?: string | null, _to?: string | null, _actor?: null, _value?: BigNumberish | null): GasWithdrawnEventFilter;
        GasWithdrawn(_dappIdentifier?: string | null, _to?: string | null, _actor?: null, _value?: BigNumberish | null): GasWithdrawnEventFilter;
        "GaslessTxExecuted(address,address,bytes,address,uint256)"(relayer?: string | null, sender?: string | null, data?: null, dappIdentifier?: null, payment?: BigNumberish | null): GaslessTxExecutedEventFilter;
        GaslessTxExecuted(relayer?: string | null, sender?: string | null, data?: null, dappIdentifier?: null, payment?: BigNumberish | null): GaslessTxExecutedEventFilter;
        "OwnershipTransferred(address,address)"(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;
        OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;
    };
    estimateGas: {
        baseGas(overrides?: CallOverrides): Promise<BigNumber>;
        dappIdentifierBalances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
        depositFor(dappIdentifier: string, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        getBalance(_dappIdentifier: string, overrides?: CallOverrides): Promise<BigNumber>;
        getHash(fallbackUserOp: FallbackUserOperationStruct, overrides?: CallOverrides): Promise<BigNumber>;
        getNonce(_sender: string, overrides?: CallOverrides): Promise<BigNumber>;
        handleFallbackUserOp(fallbackUserOp: FallbackUserOperationStruct, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        setBaseGas(gas: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        setSigner(_newVerifyingSigner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        verifyingSigner(overrides?: CallOverrides): Promise<BigNumber>;
        withdrawGasForDapp(dappIdentifier: string, withdrawAddress: string, amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        baseGas(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        dappIdentifierBalances(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        depositFor(dappIdentifier: string, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        getBalance(_dappIdentifier: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getHash(fallbackUserOp: FallbackUserOperationStruct, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getNonce(_sender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        handleFallbackUserOp(fallbackUserOp: FallbackUserOperationStruct, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        setBaseGas(gas: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        setSigner(_newVerifyingSigner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        verifyingSigner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        withdrawGasForDapp(dappIdentifier: string, withdrawAddress: string, amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
    };
}
