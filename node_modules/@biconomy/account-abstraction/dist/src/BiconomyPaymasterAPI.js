"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BiconomyPaymasterAPI = void 0;
const properties_1 = require("@ethersproject/properties");
const httpRequests_1 = require("./utils/httpRequests");
const common_1 = require("@biconomy/common");
/**
 * Verifying Paymaster API supported via Biconomy dahsboard to enable Gasless transactions
 */
// TODO: possibly rename to BiconomyVerifyingPaymasterAPI
class BiconomyPaymasterAPI {
    constructor(paymasterConfig) {
        this.paymasterConfig = paymasterConfig;
    }
    async getPaymasterAndData(userOp) {
        try {
            userOp = await (0, properties_1.resolveProperties)(userOp);
            userOp.nonce = Number(userOp.nonce);
            userOp.callGasLimit = Number(userOp.callGasLimit);
            userOp.verificationGasLimit = Number(userOp.verificationGasLimit);
            userOp.maxFeePerGas = Number(userOp.maxFeePerGas);
            userOp.maxPriorityFeePerGas = Number(userOp.maxPriorityFeePerGas);
            userOp.preVerificationGas = Number(userOp.preVerificationGas);
            userOp.signature = '0x';
            userOp.paymasterAndData = '0x';
            // move dappAPIKey in headers
            /* eslint-disable  @typescript-eslint/no-explicit-any */
            const result = await (0, httpRequests_1.sendRequest)({
                url: `${this.paymasterConfig.signingServiceUrl}/user-op`,
                method: httpRequests_1.HttpMethod.Post,
                headers: { 'x-api-key': this.paymasterConfig.dappAPIKey },
                body: { userOp: userOp }
            });
            common_1.Logger.log('verifying and signing service response', result);
            if (result && result.data && result.statusCode === 200) {
                return result.data.paymasterAndData;
            }
            else {
                if (!this.paymasterConfig.strictSponsorshipMode) {
                    return '0x';
                }
                // Logger.log(result)
                // Review: If we will get a different code and result.message
                if (result.error) {
                    common_1.Logger.log(result.error.toString());
                    throw new Error('Error in verifying gas sponsorship. Reason: '.concat(result.error.toString()));
                }
                throw new Error('Error in verifying gas sponsorship. Reason unknown');
            }
        }
        catch (err) {
            if (!this.paymasterConfig.strictSponsorshipMode) {
                common_1.Logger.log('sending paymasterAndData 0x');
                common_1.Logger.log('Reason ', err.toString());
                return '0x';
            }
            common_1.Logger.error('Error in verifying gas sponsorship.', err.toString());
            throw new Error('Error in verifying gas sponsorship. Reason: '.concat(err.toString()));
        }
    }
}
exports.BiconomyPaymasterAPI = BiconomyPaymasterAPI;
//# sourceMappingURL=BiconomyPaymasterAPI.js.map