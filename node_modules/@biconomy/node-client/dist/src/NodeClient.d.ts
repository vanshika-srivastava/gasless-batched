import INodeClient from './INodeClient';
import { EstimateExternalGasDto, EstimateRequiredTxGasDto, EstimateHandlePaymentTxGasDto, EstimateUndeployedContractGasDto, SmartAccountByOwnerDto, TokenByChainIdAndAddressDto, TokenPriceResponse, SupportedChainsResponse, IndividualChainResponse, SupportedTokensResponse, IndividualTokenResponse, SmartAccountsResponse, BalancesDto, BalancesResponse, UsdBalanceResponse, EstimateGasResponse, SCWTransactionResponse, WhiteListSignatureResponse, IsFallbackEnabledResponse } from './types/NodeClientTypes';
export interface NodeClientConfig {
    /** txServiceUrl - Safe Transaction Service URL */
    txServiceUrl: string;
}
declare class NodeClient implements INodeClient {
    #private;
    constructor({ txServiceUrl }: NodeClientConfig);
    /**
     *
     * @returns The list of Network info
     */
    getAllSupportedChains(): Promise<SupportedChainsResponse>;
    /**
     *
     * @param chainId
     * @description thie function will return the chain detail base on supplied { chainId }
     * @returns
     */
    getChainById(chainId: number): Promise<IndividualChainResponse>;
    /**
     *
     * @param chainId
     * @description this function will return token price base on supplied {chainId}
     * @returns
     */
    getTokenPricesByChainId(chainId: number): Promise<TokenPriceResponse>;
    getAllTokens(): Promise<SupportedTokensResponse>;
    getTokensByChainId(chainId: number): Promise<SupportedTokensResponse>;
    getTokenByChainIdAndAddress(tokenByChainIdAndAddressDto: TokenByChainIdAndAddressDto): Promise<IndividualTokenResponse>;
    getSmartAccountsByOwner(smartAccountByOwnerDto: SmartAccountByOwnerDto): Promise<SmartAccountsResponse>;
    getAlltokenBalances(balancesDto: BalancesDto): Promise<BalancesResponse>;
    getTotalBalanceInUsd(balancesDto: BalancesDto): Promise<UsdBalanceResponse>;
    /**
     *
     * @param origin
     * @description this function will return the signature for your domain
     * @returns
     */
    whitelistUrl(origin: string): Promise<WhiteListSignatureResponse>;
    isFallbackEnabled(): Promise<IsFallbackEnabledResponse>;
    estimateExternalGas(estimateExternalGasDto: EstimateExternalGasDto): Promise<EstimateGasResponse>;
    estimateRequiredTxGas(estimateRequiredTxGasDto: EstimateRequiredTxGasDto): Promise<EstimateGasResponse>;
    estimateHandlePaymentGas(estimateHandlePaymentTxGasDto: EstimateHandlePaymentTxGasDto): Promise<EstimateGasResponse>;
    estimateRequiredTxGasOverride(estimateRequiredTxGasDto: EstimateRequiredTxGasDto): Promise<EstimateGasResponse>;
    estimateHandlePaymentGasOverride(estimateHandlePaymentTxGasDto: EstimateHandlePaymentTxGasDto): Promise<EstimateGasResponse>;
    estimateUndeployedContractGas(estimateUndeployedContractGasDto: EstimateUndeployedContractGasDto): Promise<EstimateGasResponse>;
    getTransactionByAddress(chainId: number, address: string): Promise<SCWTransactionResponse[]>;
    getTransactionByHash(txHash: string): Promise<SCWTransactionResponse>;
}
export default NodeClient;
