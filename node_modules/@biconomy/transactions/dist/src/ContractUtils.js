"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const FetchContractsInfo_1 = require("./utils/FetchContractsInfo");
const ethers_1 = require("ethers");
const ethers_lib_1 = __importDefault(require("@biconomy/ethers-lib"));
const common_1 = require("@biconomy/common");
class ContractUtils {
    constructor(chainConfig) {
        this.chainConfig = chainConfig;
        this.ethAdapter = {};
        this.smartWalletContract = {};
        this.multiSendContract = {};
        this.multiSendCallOnlyContract = {};
        this.smartWalletFactoryContract = {};
        this.fallbackGasTankContract = {};
        //this.defaultCallbackHandlerContract = {}
    }
    initializeContracts(signer, readProvider, walletInfo, chaininfo) {
        this.ethAdapter[walletInfo.chainId] = new ethers_lib_1.default({
            ethers: ethers_1.ethers,
            signer,
            provider: readProvider
        });
        this.smartWalletFactoryContract[walletInfo.chainId] = {};
        this.smartWalletContract[walletInfo.chainId] = {};
        this.multiSendContract[walletInfo.chainId] = {};
        this.multiSendCallOnlyContract[walletInfo.chainId] = {};
        this.fallbackGasTankContract[walletInfo.chainId] = {};
        //this.defaultCallbackHandlerContract[walletInfo.chainId] = {}
        const version = walletInfo.version;
        common_1.Logger.log('version ', version);
        this.smartWalletFactoryContract[walletInfo.chainId][version] = (0, FetchContractsInfo_1.getSmartWalletFactoryContract)(version, this.ethAdapter[walletInfo.chainId], walletInfo.factoryAddress);
        common_1.Logger.log('Factory Address ', walletInfo.factoryAddress);
        this.smartWalletContract[walletInfo.chainId][version] = (0, FetchContractsInfo_1.getSmartWalletContract)(version, this.ethAdapter[walletInfo.chainId], walletInfo.smartAccountAddress);
        common_1.Logger.log('SmartAccount Address ', walletInfo.smartAccountAddress);
        this.multiSendContract[walletInfo.chainId][version] = (0, FetchContractsInfo_1.getMultiSendContract)(version, this.ethAdapter[walletInfo.chainId], chaininfo.multiSend[chaininfo.multiSend.length - 1].address);
        this.multiSendCallOnlyContract[walletInfo.chainId][version] = (0, FetchContractsInfo_1.getMultiSendCallOnlyContract)(version, this.ethAdapter[walletInfo.chainId], chaininfo.multiSendCall[chaininfo.multiSendCall.length - 1].address);
        this.fallbackGasTankContract[walletInfo.chainId][version] = (0, FetchContractsInfo_1.getFallbackGasTankContract)(version, this.ethAdapter[walletInfo.chainId], chaininfo.fallBackGasTankAddress);
        /*this.defaultCallbackHandlerContract[walletInfo.chainId][version] = getDefaultCallbackHandlerContract(
          version,
          this.ethAdapter[walletInfo.chainId],
          walletInfo.fallBackHandlerAddress
        )*/
    }
    async isDeployed(chainId, address) {
        return await this.ethAdapter[chainId].isContractDeployed(address);
    }
    //
    /**
     * Serves smart contract instances associated with Smart Account for requested ChainId
     * Context is useful when relayer is deploying a wallet
     * @param chainId requested chain : default is active chain
     * @returns object containing relevant contract instances
     */
    getSmartAccountContext(chainId, version) {
        const context = {
            baseWallet: this.smartWalletContract[chainId][version],
            walletFactory: this.smartWalletFactoryContract[chainId][version],
            multiSend: this.multiSendContract[chainId][version],
            multiSendCall: this.multiSendCallOnlyContract[chainId][version]
            // Could be added dex router for chain in the future
        };
        return context;
    }
    setSmartAccountState(smartAccountState) {
        this.smartAccountState = smartAccountState;
    }
    getSmartAccountState() {
        return this.smartAccountState;
    }
    attachWalletContract(chainId, version, address) {
        const walletContract = this.smartWalletContract[chainId][version].getContract();
        return walletContract.attach(address);
    }
}
exports.default = ContractUtils;
//# sourceMappingURL=ContractUtils.js.map