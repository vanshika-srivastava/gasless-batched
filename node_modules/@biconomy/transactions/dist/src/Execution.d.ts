import { Contract, Wallet, BigNumberish, Signer, PopulatedTransaction } from 'ethers';
import { ChainId, IWalletTransaction, SmartAccountSignature } from '@biconomy/core-types';
export declare const EIP_DOMAIN: {
    EIP712Domain: {
        type: string;
        name: string;
    }[];
};
export declare const EIP712_ACCOUNT_TX_TYPE: {
    AccountTx: {
        type: string;
        name: string;
    }[];
};
export declare const EIP712_SMART_ACCOUNT_MESSAGE_TYPE: {
    SmartAccountMessage: {
        type: string;
        name: string;
    }[];
};
export declare const calculateSmartAccountDomainSeparator: (wallet: Contract, chainId: BigNumberish) => string;
export declare const preimageWalletTransactionHash: (wallet: Contract, SmartAccountTx: IWalletTransaction, chainId: BigNumberish) => string;
export declare const calculateSmartAccountTransactionHash: (wallet: Contract, SmartAccountTx: IWalletTransaction, chainId: BigNumberish) => string;
export declare const calculateSmartAccountMessageHash: (wallet: Contract, message: string, chainId: BigNumberish) => string;
export declare const smartAccountSignTypedData: (signer: Signer, wallet: Contract, SmartAccountTx: IWalletTransaction, chainId?: BigNumberish) => Promise<SmartAccountSignature>;
export declare const signHash: (signer: Signer, hash: string) => Promise<SmartAccountSignature>;
export declare const smartAccountSignMessage: (signer: Signer, wallet: Contract, SmartAccountTx: IWalletTransaction, chainId: ChainId) => Promise<SmartAccountSignature>;
export declare const buildSignatureBytes: (signatures: SmartAccountSignature[]) => string;
export declare const executeTx: (wallet: Contract, SmartAccountTx: IWalletTransaction, signatures: SmartAccountSignature[], overrides?: any) => Promise<any>;
export declare const populateExecuteTx: (wallet: Contract, SmartAccountTx: IWalletTransaction, signatures: SmartAccountSignature[], overrides?: any) => Promise<PopulatedTransaction>;
export declare const buildContractCall: (contract: Contract, method: string, params: any[], nonce: number, delegateCall?: boolean, overrides?: Partial<IWalletTransaction>) => IWalletTransaction;
export declare const executeTxWithSigners: (wallet: Contract, tx: IWalletTransaction, signers: Wallet[], overrides?: any) => Promise<any>;
export declare const executeContractCallWithSigners: (wallet: Contract, contract: Contract, method: string, params: any[], signers: Wallet[], delegateCall?: boolean, overrides?: Partial<IWalletTransaction>) => Promise<any>;
export declare const buildSmartAccountTransaction: (template: {
    to: string;
    value?: BigNumberish;
    data?: string;
    operation?: number;
    targetTxGas?: number | string;
    baseGas?: number | string;
    gasPrice?: number | string;
    tokenGasPriceFactor?: number | string;
    gasToken?: string;
    refundReceiver?: string;
    nonce: number;
}) => IWalletTransaction;
