import { TypedDataDomain, TypedDataField, Signer as AbstractSigner } from '@ethersproject/abstract-signer';
import { ChainId, SignUserPaidTransactionDto } from '@biconomy/core-types';
import { JsonRpcProvider, TransactionResponse } from '@ethersproject/providers';
import { IRelayer } from '@biconomy/relayer';
import { BytesLike } from '@ethersproject/bytes';
import { Deferrable } from 'ethers/lib/utils';
import { TransactionRequest } from '@ethersproject/providers';
import SmartAccount from '../SmartAccount';
export declare abstract class Signer extends AbstractSigner {
    abstract getProvider(chainId?: number): Promise<JsonRpcProvider | undefined>;
    abstract getRelayer(chainId?: number): Promise<IRelayer | undefined>;
    abstract signMessage(message: BytesLike, chainId?: ChainId): Promise<string>;
    abstract signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, message: Record<string, any>, chainId?: ChainId, allSigners?: boolean): Promise<string>;
    abstract sendTransaction(transaction: Deferrable<TransactionRequest>, engine?: SmartAccount): Promise<TransactionResponse>;
    abstract signTransaction(signUserPaidTransactionDto: SignUserPaidTransactionDto): Promise<string>;
}
