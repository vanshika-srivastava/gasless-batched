{
  "version": 3,
  "sources": ["../../base-x/src/index.js", "../../bs58/index.js", "../../@web3auth/solana-provider/node_modules/eth-rpc-errors/src/classes.ts", "../../@web3auth/solana-provider/node_modules/eth-rpc-errors/src/error-constants.ts", "../../@web3auth/solana-provider/node_modules/eth-rpc-errors/src/utils.ts", "../../@web3auth/solana-provider/node_modules/eth-rpc-errors/src/errors.ts", "../../@web3auth/solana-provider/node_modules/eth-rpc-errors/src/index.ts", "../../@noble/hashes/src/_assert.ts", "../../@noble/hashes/src/cryptoBrowser.ts", "../../@noble/hashes/src/utils.ts", "../../@noble/hashes/src/_sha2.ts", "../../@noble/hashes/src/_u64.ts", "../../@noble/hashes/src/sha512.ts", "../../@noble/ed25519/lib/esm/index.js", "../../@noble/hashes/src/sha256.ts", "../../text-encoding-utf-8/src/encoding.js", "../../borsh/lib/index.js", "../../@solana/buffer-layout/src/Layout.ts", "../../bigint-buffer/dist/browser.js", "../../superstruct/src/error.ts", "../../superstruct/src/utils.ts", "../../superstruct/src/struct.ts", "../../superstruct/src/structs/utilities.ts", "../../superstruct/src/structs/types.ts", "../../superstruct/src/structs/coercions.ts", "../../superstruct/src/structs/refinements.ts", "../../uuid/dist/esm-browser/rng.js", "../../uuid/dist/esm-browser/regex.js", "../../uuid/dist/esm-browser/validate.js", "../../uuid/dist/esm-browser/stringify.js", "../../uuid/dist/esm-browser/v1.js", "../../uuid/dist/esm-browser/parse.js", "../../uuid/dist/esm-browser/v35.js", "../../uuid/dist/esm-browser/md5.js", "../../uuid/dist/esm-browser/v3.js", "../../uuid/dist/esm-browser/v4.js", "../../uuid/dist/esm-browser/sha1.js", "../../uuid/dist/esm-browser/v5.js", "../../uuid/dist/esm-browser/nil.js", "../../uuid/dist/esm-browser/version.js", "../../uuid/dist/esm-browser/index.js", "../../jayson/lib/generateRequest.js", "../../jayson/lib/client/browser/index.js", "../../@babel/runtime/helpers/interopRequireDefault.js", "../../@babel/runtime/helpers/asyncToGenerator.js", "../../@babel/runtime/helpers/classCallCheck.js", "../../@babel/runtime/helpers/toPrimitive.js", "../../@babel/runtime/helpers/toPropertyKey.js", "../../@babel/runtime/helpers/createClass.js", "../../@babel/runtime/helpers/setPrototypeOf.js", "../../@babel/runtime/helpers/inherits.js", "../../@babel/runtime/helpers/assertThisInitialized.js", "../../@babel/runtime/helpers/possibleConstructorReturn.js", "../../@babel/runtime/helpers/getPrototypeOf.js", "../../rpc-websockets/node_modules/eventemitter3/index.js", "../../rpc-websockets/dist/lib/client.js", "../../rpc-websockets/dist/lib/client/websocket.browser.js", "../../@noble/hashes/src/sha3.ts", "../../@noble/hashes/src/hmac.ts", "../../@noble/secp256k1/lib/esm/index.js", "../../@solana/web3.js/src/utils/ed25519.ts", "../../@solana/web3.js/src/utils/to-buffer.ts", "../../@solana/web3.js/src/utils/borsh-schema.ts", "../../@solana/web3.js/src/publickey.ts", "../../@solana/web3.js/src/account.ts", "../../@solana/web3.js/src/bpf-loader-deprecated.ts", "../../@solana/web3.js/src/transaction/constants.ts", "../../@solana/web3.js/src/transaction/expiry-custom-errors.ts", "../../@solana/web3.js/src/message/account-keys.ts", "../../@solana/web3.js/src/layout.ts", "../../@solana/web3.js/src/utils/shortvec-encoding.ts", "../../@solana/web3.js/src/utils/assert.ts", "../../@solana/web3.js/src/message/compiled-keys.ts", "../../@solana/web3.js/src/message/legacy.ts", "../../@solana/web3.js/src/message/v0.ts", "../../@solana/web3.js/src/message/versioned.ts", "../../@solana/web3.js/src/transaction/legacy.ts", "../../@solana/web3.js/src/transaction/message.ts", "../../@solana/web3.js/src/transaction/versioned.ts", "../../@solana/web3.js/src/sysvar.ts", "../../@solana/web3.js/src/utils/send-and-confirm-transaction.ts", "../../@solana/web3.js/src/utils/sleep.ts", "../../@solana/web3.js/src/instruction.ts", "../../@solana/web3.js/src/fee-calculator.ts", "../../@solana/web3.js/src/nonce-account.ts", "../../@solana/web3.js/src/utils/bigint.ts", "../../@solana/web3.js/src/programs/system.ts", "../../@solana/web3.js/src/loader.ts", "../../@solana/web3.js/src/bpf-loader.ts", "../../node_modules/.pnpm/fast-stable-stringify@1.0.0/node_modules/fast-stable-stringify/index.js", "../../@solana/web3.js/src/epoch-schedule.ts", "../../@solana/web3.js/src/errors.ts", "../../@solana/web3.js/src/__forks__/browser/fetch-impl.ts", "../../@solana/web3.js/src/rpc-websocket.ts", "../../@solana/web3.js/src/timing.ts", "../../@solana/web3.js/src/account-data.ts", "../../@solana/web3.js/src/programs/address-lookup-table/state.ts", "../../@solana/web3.js/src/utils/makeWebsocketUrl.ts", "../../@solana/web3.js/src/connection.ts", "../../@solana/web3.js/src/keypair.ts", "../../@solana/web3.js/src/programs/address-lookup-table/index.ts", "../../@solana/web3.js/src/programs/compute-budget.ts", "../../@solana/web3.js/src/programs/ed25519.ts", "../../@solana/web3.js/src/utils/secp256k1.ts", "../../@solana/web3.js/src/programs/secp256k1.ts", "../../@solana/web3.js/src/programs/stake.ts", "../../@solana/web3.js/src/programs/vote.ts", "../../@solana/web3.js/src/validator-info.ts", "../../@solana/web3.js/src/vote-account.ts", "../../@solana/web3.js/src/utils/cluster.ts", "../../@solana/web3.js/src/utils/send-and-confirm-raw-transaction.ts", "../../@solana/web3.js/src/index.ts", "../../@web3auth/solana-provider/src/rpc/JrpcClient.ts", "../../@web3auth/solana-provider/src/rpc/solanaRpcMiddlewares.ts", "../../@web3auth/solana-provider/src/providers/injectedProviders/base/baseInjectedProvider.ts", "../../@web3auth/solana-provider/src/providers/injectedProviders/base/providerHandlers.ts", "../../@web3auth/solana-provider/src/providers/injectedProviders/injectedProviderProxy.ts", "../../@web3auth/solana-provider/src/providers/injectedProviders/phantom/phantomInjectedProvider.ts", "../../@web3auth/solana-provider/src/providers/injectedProviders/slope/providerHandlers.ts", "../../@web3auth/solana-provider/src/providers/injectedProviders/slope/slopeInjectedProvider.ts", "../../@web3auth/solana-provider/src/providers/injectedProviders/solflare/providerHandlers.ts", "../../@web3auth/solana-provider/src/providers/injectedProviders/solflare/solflareInjectedProvider.ts", "../../@web3auth/solana-provider/src/providers/injectedProviders/sollet/providerHandlers.ts", "../../@web3auth/solana-provider/src/providers/injectedProviders/sollet/solletInjectedProvider.ts", "../../@web3auth/solana-provider/src/providers/injectedProviders/torus/providerHandlers.ts", "../../@web3auth/solana-provider/src/providers/injectedProviders/torus/torusInjectedProvider.ts", "../../@web3auth/solana-provider/src/providers/privateKeyProvider/solanaPrivateKeyUtils.ts", "../../@web3auth/solana-provider/src/providers/privateKeyProvider/solanaPrivateKeyProvider.ts", "../../@web3auth/solana-provider/src/solanaWallet.ts"],
  "sourcesContent": ["'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n", "var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n", null, null, null, null, null, "export function number(n: number) {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`Wrong positive integer: ${n}`);\n}\n\nexport function bool(b: boolean) {\n  if (typeof b !== 'boolean') throw new Error(`Expected boolean, not ${b}`);\n}\n\nexport function bytes(b: Uint8Array | undefined, ...lengths: number[]) {\n  if (!(b instanceof Uint8Array)) throw new TypeError('Expected Uint8Array');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\n\ntype Hash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\nexport function hash(hash: Hash) {\n  if (typeof hash !== 'function' || typeof hash.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  number(hash.outputLen);\n  number(hash.blockLen);\n}\n\nexport function exists(instance: any, checkFinished = true) {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nexport function output(out: any, instance: any) {\n  bytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n  }\n}\n\nconst assert = {\n  number,\n  bool,\n  bytes,\n  hash,\n  exists,\n  output,\n};\n\nexport default assert;\n", "// Global symbol available in browsers only\ndeclare const self: Record<string, any> | undefined;\nexport const crypto: { node?: any; web?: any } = {\n  node: undefined,\n  web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\n", "/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// The import here is via the package name. This is to ensure\n// that exports mapping/resolution does fall into place.\nimport { crypto } from '@noble/hashes/crypto';\n\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\n// Cast array to different type\nexport const u8 = (arr: TypedArray) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr: TypedArray) =>\n  new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n\n// Cast array to view\nexport const createView = (arr: TypedArray) =>\n  new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word: number, shift: number) => (word << (32 - shift)) | (word >>> shift);\n\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// There is almost no big endian hardware, but js typed arrays uses platform specific endianness.\n// So, just to be sure not to corrupt anything.\nif (!isLE) throw new Error('Non little-endian hardware is not supported');\n\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef]))\n */\nexport function bytesToHex(uint8a: Uint8Array): string {\n  // pre-caching improves the speed 6x\n  if (!(uint8a instanceof Uint8Array)) throw new Error('Uint8Array expected');\n  let hex = '';\n  for (let i = 0; i < uint8a.length; i++) {\n    hex += hexes[uint8a[i]];\n  }\n  return hex;\n}\n\n/**\n * @example hexToBytes('deadbeef')\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') {\n    throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n  }\n  if (hex.length % 2) throw new Error('hexToBytes: received invalid unpadded hex');\n  const array = new Uint8Array(hex.length / 2);\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    const hexByte = hex.slice(j, j + 2);\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\n    array[i] = byte;\n  }\n  return array;\n}\n\n// There is no setImmediate in browser and setTimeout is slow. However, call to async function will return Promise\n// which will be fullfiled only on next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => {};\n\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters: number, tick: number, cb: (i: number) => void) {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\ndeclare const TextDecoder: any;\n\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') {\n    throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);\n  }\n  return new TextEncoder().encode(str);\n}\n\nexport type Input = Uint8Array | string;\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  if (!(data instanceof Uint8Array))\n    throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);\n  return data;\n}\n\n/**\n * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`\n * @example concatBytes(buf1, buf2)\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  if (!arrays.every((a) => a instanceof Uint8Array)) throw new Error('Uint8Array list expected');\n  if (arrays.length === 1) return arrays[0];\n  const length = arrays.reduce((a, arr) => a + arr.length, 0);\n  const result = new Uint8Array(length);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const arr = arrays[i];\n    result.set(arr, pad);\n    pad += arr.length;\n  }\n  return result;\n}\n\n// For runtime check if class implements interface\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  // Cleanup internal state. Not '.clean' because instance is not usable after that.\n  // Clean usually resets instance to initial state, but it is not possible for keyed hashes if key is consumed into state.\n  // NOTE: if digest is not consumed by user, user need manually call '.destroy' if zeroing is required\n  abstract destroy(): void;\n  // Unsafe because doesn't check if \"to\" is correct. Can be used as clone() if no opts passed.\n  // Why cloneInto instead of clone? Mostly performance (same as _digestInto), but also has nice property: it reuses instance\n  // which means all internal buffers is overwritten, which also causes overwrite buffer which used for digest (in some cases).\n  // We don't provide any guarantees about cleanup (it is impossible to!), so should be enough for now.\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\n// Check if object doens't have custom constructor (like Uint8Array/Array)\nconst isPlainObject = (obj: any) =>\n  Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\n\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\n    throw new TypeError('Options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\nexport type CHash = ReturnType<typeof wrapConstructor>;\n\nexport function wrapConstructor<T extends Hash<T>>(hashConstructor: () => Hash<T>) {\n  const hashC = (message: Input): Uint8Array => hashConstructor().update(toBytes(message)).digest();\n  const tmp = hashConstructor();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashConstructor();\n  return hashC;\n}\n\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\n/**\n * Secure PRNG\n */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto.web) {\n    return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n  } else if (crypto.node) {\n    return new Uint8Array(crypto.node.randomBytes(bytesLength).buffer);\n  } else {\n    throw new Error(\"The environment doesn't have randomBytes function\");\n  }\n}\n", "import assert from './_assert.js';\nimport { Hash, createView, Input, toBytes } from './utils.js';\n\n// Polyfill for Safari 14\nfunction setBigUint64(view: DataView, byteOffset: number, value: bigint, isLE: boolean): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n// Base SHA2 class (RFC 6234)\nexport abstract class SHA2<T extends SHA2<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    readonly padOffset: number,\n    readonly isLE: boolean\n  ) {\n    super();\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    assert.exists(this);\n    const { view, buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    assert.exists(this);\n    assert.output(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest() {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n", "const U32_MASK64 = BigInt(2 ** 32 - 1);\nconst _32n = BigInt(32);\n\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nexport function fromBig(n: bigint, le = false) {\n  if (le) return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n  return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\n\nexport function split(lst: bigint[], le = false) {\n  let Ah = new Uint32Array(lst.length);\n  let Al = new Uint32Array(lst.length);\n  for (let i = 0; i < lst.length; i++) {\n    const { h, l } = fromBig(lst[i], le);\n    [Ah[i], Al[i]] = [h, l];\n  }\n  return [Ah, Al];\n}\n\nexport const toBig = (h: number, l: number) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h: number, l: number, s: number) => h >>> s;\nconst shrSL = (h: number, l: number, s: number) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h: number, l: number, s: number) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h: number, l: number, s: number) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h: number, l: number, s: number) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h: number, l: number, s: number) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (h: number, l: number) => l;\nconst rotr32L = (h: number, l: number) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h: number, l: number, s: number) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h: number, l: number, s: number) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h: number, l: number, s: number) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h: number, l: number, s: number) => (h << (s - 32)) | (l >>> (64 - s));\n\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\nexport function add(Ah: number, Al: number, Bh: number, Bl: number) {\n  const l = (Al >>> 0) + (Bl >>> 0);\n  return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al: number, Bl: number, Cl: number) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low: number, Ah: number, Bh: number, Ch: number) =>\n  (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al: number, Bl: number, Cl: number, Dl: number) =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number) =>\n  (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al: number, Bl: number, Cl: number, Dl: number, El: number) =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number, Eh: number) =>\n  (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n\n// prettier-ignore\nconst u64 = {\n  fromBig, split, toBig,\n  shrSH, shrSL,\n  rotrSH, rotrSL, rotrBH, rotrBL,\n  rotr32H, rotr32L,\n  rotlSH, rotlSL, rotlBH, rotlBL,\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n", "import { SHA2 } from './_sha2.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js';\n\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = u64.split([\n  '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n  '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n  '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n  '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n  '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n  '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n  '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n  '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n  '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n  '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n  '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n  '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n  '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n  '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n  '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n  '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n  '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n  '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n  '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n  '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n)));\n\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = new Uint32Array(80);\nconst SHA512_W_L = new Uint32Array(80);\n\nexport class SHA512 extends SHA2<SHA512> {\n  // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n  // Also looks cleaner and easier to verify with spec.\n  // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0x6a09e667 | 0;\n  Al = 0xf3bcc908 | 0;\n  Bh = 0xbb67ae85 | 0;\n  Bl = 0x84caa73b | 0;\n  Ch = 0x3c6ef372 | 0;\n  Cl = 0xfe94f82b | 0;\n  Dh = 0xa54ff53a | 0;\n  Dl = 0x5f1d36f1 | 0;\n  Eh = 0x510e527f | 0;\n  El = 0xade682d1 | 0;\n  Fh = 0x9b05688c | 0;\n  Fl = 0x2b3e6c1f | 0;\n  Gh = 0x1f83d9ab | 0;\n  Gl = 0xfb41bd6b | 0;\n  Hh = 0x5be0cd19 | 0;\n  Hl = 0x137e2179 | 0;\n\n  constructor() {\n    super(128, 64, 16, false);\n  }\n  // prettier-ignore\n  protected get(): [\n    number, number, number, number, number, number, number, number,\n    number, number, number, number, number, number, number, number\n  ] {\n    const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n  }\n  // prettier-ignore\n  protected set(\n    Ah: number, Al: number, Bh: number, Bl: number, Ch: number, Cl: number, Dh: number, Dl: number,\n    Eh: number, El: number, Fh: number, Fl: number, Gh: number, Gl: number, Hh: number, Hl: number\n  ) {\n    this.Ah = Ah | 0;\n    this.Al = Al | 0;\n    this.Bh = Bh | 0;\n    this.Bl = Bl | 0;\n    this.Ch = Ch | 0;\n    this.Cl = Cl | 0;\n    this.Dh = Dh | 0;\n    this.Dl = Dl | 0;\n    this.Eh = Eh | 0;\n    this.El = El | 0;\n    this.Fh = Fh | 0;\n    this.Fl = Fl | 0;\n    this.Gh = Gh | 0;\n    this.Gl = Gl | 0;\n    this.Hh = Hh | 0;\n    this.Hl = Hl | 0;\n  }\n  protected process(view: DataView, offset: number) {\n    // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) {\n      SHA512_W_H[i] = view.getUint32(offset);\n      SHA512_W_L[i] = view.getUint32((offset += 4));\n    }\n    for (let i = 16; i < 80; i++) {\n      // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n      const W15h = SHA512_W_H[i - 15] | 0;\n      const W15l = SHA512_W_L[i - 15] | 0;\n      const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n      const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n      // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n      const W2h = SHA512_W_H[i - 2] | 0;\n      const W2l = SHA512_W_L[i - 2] | 0;\n      const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n      const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n      // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n      const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n      const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n      SHA512_W_H[i] = SUMh | 0;\n      SHA512_W_L[i] = SUMl | 0;\n    }\n    let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    // Compression function main loop, 80 rounds\n    for (let i = 0; i < 80; i++) {\n      // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n      const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n      const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n      //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n      const CHIl = (El & Fl) ^ (~El & Gl);\n      // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n      // prettier-ignore\n      const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n      const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n      const T1l = T1ll | 0;\n      // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n      const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n      const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n      const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n      const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n      Hh = Gh | 0;\n      Hl = Gl | 0;\n      Gh = Fh | 0;\n      Gl = Fl | 0;\n      Fh = Eh | 0;\n      Fl = El | 0;\n      ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n      Dh = Ch | 0;\n      Dl = Cl | 0;\n      Ch = Bh | 0;\n      Cl = Bl | 0;\n      Bh = Ah | 0;\n      Bl = Al | 0;\n      const All = u64.add3L(T1l, sigma0l, MAJl);\n      Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n      Al = All | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n    ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n    ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n    ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n    ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n    ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n    ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n    ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n    this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n  }\n  protected roundClean() {\n    SHA512_W_H.fill(0);\n    SHA512_W_L.fill(0);\n  }\n  destroy() {\n    this.buffer.fill(0);\n    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n  }\n}\n\nclass SHA512_224 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0x8c3d37c8 | 0;\n  Al = 0x19544da2 | 0;\n  Bh = 0x73e19966 | 0;\n  Bl = 0x89dcd4d6 | 0;\n  Ch = 0x1dfab7ae | 0;\n  Cl = 0x32ff9c82 | 0;\n  Dh = 0x679dd514 | 0;\n  Dl = 0x582f9fcf | 0;\n  Eh = 0x0f6d2b69 | 0;\n  El = 0x7bd44da8 | 0;\n  Fh = 0x77e36f73 | 0;\n  Fl = 0x04c48942 | 0;\n  Gh = 0x3f9d85a8 | 0;\n  Gl = 0x6a1d36c8 | 0;\n  Hh = 0x1112e6ad | 0;\n  Hl = 0x91d692a1 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\nclass SHA512_256 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0x22312194 | 0;\n  Al = 0xfc2bf72c | 0;\n  Bh = 0x9f555fa3 | 0;\n  Bl = 0xc84c64c2 | 0;\n  Ch = 0x2393b86b | 0;\n  Cl = 0x6f53b151 | 0;\n  Dh = 0x96387719 | 0;\n  Dl = 0x5940eabd | 0;\n  Eh = 0x96283ee2 | 0;\n  El = 0xa88effe3 | 0;\n  Fh = 0xbe5e1e25 | 0;\n  Fl = 0x53863992 | 0;\n  Gh = 0x2b0199fc | 0;\n  Gl = 0x2c85b8aa | 0;\n  Hh = 0x0eb72ddc | 0;\n  Hl = 0x81c52ca2 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 32;\n  }\n}\n\nclass SHA384 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0xcbbb9d5d | 0;\n  Al = 0xc1059ed8 | 0;\n  Bh = 0x629a292a | 0;\n  Bl = 0x367cd507 | 0;\n  Ch = 0x9159015a | 0;\n  Cl = 0x3070dd17 | 0;\n  Dh = 0x152fecd8 | 0;\n  Dl = 0xf70e5939 | 0;\n  Eh = 0x67332667 | 0;\n  El = 0xffc00b31 | 0;\n  Fh = 0x8eb44a87 | 0;\n  Fl = 0x68581511 | 0;\n  Gh = 0xdb0c2e0d | 0;\n  Gl = 0x64f98fa7 | 0;\n  Hh = 0x47b5481d | 0;\n  Hl = 0xbefa4fa4 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 48;\n  }\n}\n\nexport const sha512 = wrapConstructor(() => new SHA512());\nexport const sha512_224 = wrapConstructor(() => new SHA512_224());\nexport const sha512_256 = wrapConstructor(() => new SHA512_256());\nexport const sha384 = wrapConstructor(() => new SHA384());\n", "/*! noble-ed25519 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _8n = BigInt(8);\nconst CU_O = BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989');\nconst CURVE = Object.freeze({\n    a: BigInt(-1),\n    d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n    P: BigInt('57896044618658097711785492504343953926634992332820282019728792003956564819949'),\n    l: CU_O,\n    n: CU_O,\n    h: BigInt(8),\n    Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n    Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n});\nexport { CURVE };\nconst POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\nconst SQRT_M1 = BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752');\nconst SQRT_D = BigInt('6853475219497561581579357271197624642482790079785650197046958215289687604742');\nconst SQRT_AD_MINUS_ONE = BigInt('25063068953384623474111414158702152701244531502492656460079210482610430750235');\nconst INVSQRT_A_MINUS_D = BigInt('54469307008909316920995813868745141605393597292927456921205312896311721017578');\nconst ONE_MINUS_D_SQ = BigInt('1159843021668779879193775521855586647937357759715417654439879720876111806838');\nconst D_MINUS_ONE_SQ = BigInt('40440834346308536858101042469323190826248399146238708352240133220865137265952');\nclass ExtendedPoint {\n    constructor(x, y, z, t) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.t = t;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('ExtendedPoint#fromAffine: expected Point');\n        }\n        if (p.equals(Point.ZERO))\n            return ExtendedPoint.ZERO;\n        return new ExtendedPoint(p.x, p.y, _1n, mod(p.x * p.y));\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return this.toAffineBatch(points).map(this.fromAffine);\n    }\n    equals(other) {\n        assertExtPoint(other);\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const X1Z2 = mod(X1 * Z2);\n        const X2Z1 = mod(X2 * Z1);\n        const Y1Z2 = mod(Y1 * Z2);\n        const Y2Z1 = mod(Y2 * Z1);\n        return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n    negate() {\n        return new ExtendedPoint(mod(-this.x), this.y, this.z, mod(-this.t));\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { a } = CURVE;\n        const A = mod(X1 * X1);\n        const B = mod(Y1 * Y1);\n        const C = mod(_2n * mod(Z1 * Z1));\n        const D = mod(a * A);\n        const x1y1 = X1 + Y1;\n        const E = mod(mod(x1y1 * x1y1) - A - B);\n        const G = D + B;\n        const F = G - C;\n        const H = D - B;\n        const X3 = mod(E * F);\n        const Y3 = mod(G * H);\n        const T3 = mod(E * H);\n        const Z3 = mod(F * G);\n        return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n    add(other) {\n        assertExtPoint(other);\n        const { x: X1, y: Y1, z: Z1, t: T1 } = this;\n        const { x: X2, y: Y2, z: Z2, t: T2 } = other;\n        const A = mod((Y1 - X1) * (Y2 + X2));\n        const B = mod((Y1 + X1) * (Y2 - X2));\n        const F = mod(B - A);\n        if (F === _0n)\n            return this.double();\n        const C = mod(Z1 * _2n * T2);\n        const D = mod(T1 * _2n * Z2);\n        const E = D + C;\n        const G = B + A;\n        const H = D - C;\n        const X3 = mod(E * F);\n        const Y3 = mod(G * H);\n        const T3 = mod(E * H);\n        const Z3 = mod(F * G);\n        return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    precomputeWindow(W) {\n        const windows = 1 + 256 / W;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(ExtendedPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = ExtendedPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = ExtendedPoint.ZERO;\n        let f = ExtendedPoint.BASE;\n        const windows = 1 + 256 / W;\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            const offset1 = offset;\n            const offset2 = offset + Math.abs(wbits) - 1;\n            const cond1 = window % 2 !== 0;\n            const cond2 = wbits < 0;\n            if (wbits === 0) {\n                f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n            }\n            else {\n                p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n            }\n        }\n        return ExtendedPoint.normalizeZ([p, f])[0];\n    }\n    multiply(scalar, affinePoint) {\n        return this.wNAF(normalizeScalar(scalar, CURVE.l), affinePoint);\n    }\n    multiplyUnsafe(scalar) {\n        let n = normalizeScalar(scalar, CURVE.l, false);\n        const G = ExtendedPoint.BASE;\n        const P0 = ExtendedPoint.ZERO;\n        if (n === _0n)\n            return P0;\n        if (this.equals(P0) || n === _1n)\n            return this;\n        if (this.equals(G))\n            return this.wNAF(n);\n        let p = P0;\n        let d = this;\n        while (n > _0n) {\n            if (n & _1n)\n                p = p.add(d);\n            d = d.double();\n            n >>= _1n;\n        }\n        return p;\n    }\n    isSmallOrder() {\n        return this.multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n    }\n    isTorsionFree() {\n        let p = this.multiplyUnsafe(CURVE.l / _2n).double();\n        if (CURVE.l % _2n)\n            p = p.add(this);\n        return p.equals(ExtendedPoint.ZERO);\n    }\n    toAffine(invZ) {\n        const { x, y, z } = this;\n        const is0 = this.equals(ExtendedPoint.ZERO);\n        if (invZ == null)\n            invZ = is0 ? _8n : invert(z);\n        const ax = mod(x * invZ);\n        const ay = mod(y * invZ);\n        const zz = mod(z * invZ);\n        if (is0)\n            return Point.ZERO;\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n    fromRistrettoBytes() {\n        legacyRist();\n    }\n    toRistrettoBytes() {\n        legacyRist();\n    }\n    fromRistrettoHash() {\n        legacyRist();\n    }\n}\nExtendedPoint.BASE = new ExtendedPoint(CURVE.Gx, CURVE.Gy, _1n, mod(CURVE.Gx * CURVE.Gy));\nExtendedPoint.ZERO = new ExtendedPoint(_0n, _1n, _1n, _0n);\nfunction constTimeNegate(condition, item) {\n    const neg = item.negate();\n    return condition ? neg : item;\n}\nfunction assertExtPoint(other) {\n    if (!(other instanceof ExtendedPoint))\n        throw new TypeError('ExtendedPoint expected');\n}\nfunction assertRstPoint(other) {\n    if (!(other instanceof RistrettoPoint))\n        throw new TypeError('RistrettoPoint expected');\n}\nfunction legacyRist() {\n    throw new Error('Legacy method: switch to RistrettoPoint');\n}\nclass RistrettoPoint {\n    constructor(ep) {\n        this.ep = ep;\n    }\n    static calcElligatorRistrettoMap(r0) {\n        const { d } = CURVE;\n        const r = mod(SQRT_M1 * r0 * r0);\n        const Ns = mod((r + _1n) * ONE_MINUS_D_SQ);\n        let c = BigInt(-1);\n        const D = mod((c - d * r) * mod(r + d));\n        let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D);\n        let s_ = mod(s * r0);\n        if (!edIsNegative(s_))\n            s_ = mod(-s_);\n        if (!Ns_D_is_sq)\n            s = s_;\n        if (!Ns_D_is_sq)\n            c = r;\n        const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D);\n        const s2 = s * s;\n        const W0 = mod((s + s) * D);\n        const W1 = mod(Nt * SQRT_AD_MINUS_ONE);\n        const W2 = mod(_1n - s2);\n        const W3 = mod(_1n + s2);\n        return new ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n    }\n    static hashToCurve(hex) {\n        hex = ensureBytes(hex, 64);\n        const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n        const R1 = this.calcElligatorRistrettoMap(r1);\n        const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n        const R2 = this.calcElligatorRistrettoMap(r2);\n        return new RistrettoPoint(R1.add(R2));\n    }\n    static fromHex(hex) {\n        hex = ensureBytes(hex, 32);\n        const { a, d } = CURVE;\n        const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n        const s = bytes255ToNumberLE(hex);\n        if (!equalBytes(numberTo32BytesLE(s), hex) || edIsNegative(s))\n            throw new Error(emsg);\n        const s2 = mod(s * s);\n        const u1 = mod(_1n + a * s2);\n        const u2 = mod(_1n - a * s2);\n        const u1_2 = mod(u1 * u1);\n        const u2_2 = mod(u2 * u2);\n        const v = mod(a * d * u1_2 - u2_2);\n        const { isValid, value: I } = invertSqrt(mod(v * u2_2));\n        const Dx = mod(I * u2);\n        const Dy = mod(I * Dx * v);\n        let x = mod((s + s) * Dx);\n        if (edIsNegative(x))\n            x = mod(-x);\n        const y = mod(u1 * Dy);\n        const t = mod(x * y);\n        if (!isValid || edIsNegative(t) || y === _0n)\n            throw new Error(emsg);\n        return new RistrettoPoint(new ExtendedPoint(x, y, _1n, t));\n    }\n    toRawBytes() {\n        let { x, y, z, t } = this.ep;\n        const u1 = mod(mod(z + y) * mod(z - y));\n        const u2 = mod(x * y);\n        const u2sq = mod(u2 * u2);\n        const { value: invsqrt } = invertSqrt(mod(u1 * u2sq));\n        const D1 = mod(invsqrt * u1);\n        const D2 = mod(invsqrt * u2);\n        const zInv = mod(D1 * D2 * t);\n        let D;\n        if (edIsNegative(t * zInv)) {\n            let _x = mod(y * SQRT_M1);\n            let _y = mod(x * SQRT_M1);\n            x = _x;\n            y = _y;\n            D = mod(D1 * INVSQRT_A_MINUS_D);\n        }\n        else {\n            D = D2;\n        }\n        if (edIsNegative(x * zInv))\n            y = mod(-y);\n        let s = mod((z - y) * D);\n        if (edIsNegative(s))\n            s = mod(-s);\n        return numberTo32BytesLE(s);\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toString() {\n        return this.toHex();\n    }\n    equals(other) {\n        assertRstPoint(other);\n        const a = this.ep;\n        const b = other.ep;\n        const one = mod(a.x * b.y) === mod(a.y * b.x);\n        const two = mod(a.y * b.y) === mod(a.x * b.x);\n        return one || two;\n    }\n    add(other) {\n        assertRstPoint(other);\n        return new RistrettoPoint(this.ep.add(other.ep));\n    }\n    subtract(other) {\n        assertRstPoint(other);\n        return new RistrettoPoint(this.ep.subtract(other.ep));\n    }\n    multiply(scalar) {\n        return new RistrettoPoint(this.ep.multiply(scalar));\n    }\n    multiplyUnsafe(scalar) {\n        return new RistrettoPoint(this.ep.multiplyUnsafe(scalar));\n    }\n}\nRistrettoPoint.BASE = new RistrettoPoint(ExtendedPoint.BASE);\nRistrettoPoint.ZERO = new RistrettoPoint(ExtendedPoint.ZERO);\nconst pointPrecomputes = new WeakMap();\nclass Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    static fromHex(hex, strict = true) {\n        const { d, P } = CURVE;\n        hex = ensureBytes(hex, 32);\n        const normed = hex.slice();\n        normed[31] = hex[31] & ~0x80;\n        const y = bytesToNumberLE(normed);\n        if (strict && y >= P)\n            throw new Error('Expected 0 < hex < P');\n        if (!strict && y >= POW_2_256)\n            throw new Error('Expected 0 < hex < 2**256');\n        const y2 = mod(y * y);\n        const u = mod(y2 - _1n);\n        const v = mod(d * y2 + _1n);\n        let { isValid, value: x } = uvRatio(u, v);\n        if (!isValid)\n            throw new Error('Point.fromHex: invalid y coordinate');\n        const isXOdd = (x & _1n) === _1n;\n        const isLastByteOdd = (hex[31] & 0x80) !== 0;\n        if (isLastByteOdd !== isXOdd) {\n            x = mod(-x);\n        }\n        return new Point(x, y);\n    }\n    static async fromPrivateKey(privateKey) {\n        return (await getExtendedPublicKey(privateKey)).point;\n    }\n    toRawBytes() {\n        const bytes = numberTo32BytesLE(this.y);\n        bytes[31] |= this.x & _1n ? 0x80 : 0;\n        return bytes;\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toX25519() {\n        const { y } = this;\n        const u = mod((_1n + y) * invert(_1n - y));\n        return numberTo32BytesLE(u);\n    }\n    isTorsionFree() {\n        return ExtendedPoint.fromAffine(this).isTorsionFree();\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(mod(-this.x), this.y);\n    }\n    add(other) {\n        return ExtendedPoint.fromAffine(this).add(ExtendedPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return ExtendedPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _1n);\nclass Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex, 64);\n        const r = Point.fromHex(bytes.slice(0, 32), false);\n        const s = bytesToNumberLE(bytes.slice(32, 64));\n        return new Signature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!(r instanceof Point))\n            throw new Error('Expected Point instance');\n        normalizeScalar(s, CURVE.l, false);\n        return this;\n    }\n    toRawBytes() {\n        const u8 = new Uint8Array(64);\n        u8.set(this.r.toRawBytes());\n        u8.set(numberTo32BytesLE(this.s), 32);\n        return u8;\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n}\nexport { ExtendedPoint, RistrettoPoint, Point, Signature };\nfunction concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array list');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction numberTo32BytesBE(num) {\n    const length = 32;\n    const hex = num.toString(16).padStart(length * 2, '0');\n    return hexToBytes(hex);\n}\nfunction numberTo32BytesLE(num) {\n    return numberTo32BytesBE(num).reverse();\n}\nfunction edIsNegative(num) {\n    return (mod(num) & _1n) === _1n;\n}\nfunction bytesToNumberLE(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    return BigInt('0x' + bytesToHex(Uint8Array.from(uint8a).reverse()));\n}\nconst MAX_255B = BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nfunction bytes255ToNumberLE(bytes) {\n    return mod(bytesToNumberLE(bytes) & MAX_255B);\n}\nfunction mod(a, b = CURVE.P) {\n    const res = a % b;\n    return res >= _0n ? res : b + res;\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const tmp = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        tmp[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        tmp[i] = mod(acc * tmp[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return tmp;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction pow_2_252_3(x) {\n    const { P } = CURVE;\n    const _5n = BigInt(5);\n    const _10n = BigInt(10);\n    const _20n = BigInt(20);\n    const _40n = BigInt(40);\n    const _80n = BigInt(80);\n    const x2 = (x * x) % P;\n    const b2 = (x2 * x) % P;\n    const b4 = (pow2(b2, _2n) * b2) % P;\n    const b5 = (pow2(b4, _1n) * x) % P;\n    const b10 = (pow2(b5, _5n) * b5) % P;\n    const b20 = (pow2(b10, _10n) * b10) % P;\n    const b40 = (pow2(b20, _20n) * b20) % P;\n    const b80 = (pow2(b40, _40n) * b40) % P;\n    const b160 = (pow2(b80, _80n) * b80) % P;\n    const b240 = (pow2(b160, _80n) * b80) % P;\n    const b250 = (pow2(b240, _10n) * b10) % P;\n    const pow_p_5_8 = (pow2(b250, _2n) * x) % P;\n    return { pow_p_5_8, b2 };\n}\nfunction uvRatio(u, v) {\n    const v3 = mod(v * v * v);\n    const v7 = mod(v3 * v3 * v);\n    const pow = pow_2_252_3(u * v7).pow_p_5_8;\n    let x = mod(u * v3 * pow);\n    const vx2 = mod(v * x * x);\n    const root1 = x;\n    const root2 = mod(x * SQRT_M1);\n    const useRoot1 = vx2 === u;\n    const useRoot2 = vx2 === mod(-u);\n    const noRoot = vx2 === mod(-u * SQRT_M1);\n    if (useRoot1)\n        x = root1;\n    if (useRoot2 || noRoot)\n        x = root2;\n    if (edIsNegative(x))\n        x = mod(-x);\n    return { isValid: useRoot1 || useRoot2, value: x };\n}\nfunction invertSqrt(number) {\n    return uvRatio(_1n, number);\n}\nfunction modlLE(hash) {\n    return mod(bytesToNumberLE(hash), CURVE.l);\n}\nfunction equalBytes(b1, b2) {\n    if (b1.length !== b2.length) {\n        return false;\n    }\n    for (let i = 0; i < b1.length; i++) {\n        if (b1[i] !== b2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction ensureBytes(hex, expectedLength) {\n    const bytes = hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n    if (typeof expectedLength === 'number' && bytes.length !== expectedLength)\n        throw new Error(`Expected ${expectedLength} bytes`);\n    return bytes;\n}\nfunction normalizeScalar(num, max, strict = true) {\n    if (!max)\n        throw new TypeError('Specify max value');\n    if (typeof num === 'number' && Number.isSafeInteger(num))\n        num = BigInt(num);\n    if (typeof num === 'bigint' && num < max) {\n        if (strict) {\n            if (_0n < num)\n                return num;\n        }\n        else {\n            if (_0n <= num)\n                return num;\n        }\n    }\n    throw new TypeError('Expected valid scalar: 0 < scalar < max');\n}\nfunction adjustBytes25519(bytes) {\n    bytes[0] &= 248;\n    bytes[31] &= 127;\n    bytes[31] |= 64;\n    return bytes;\n}\nfunction decodeScalar25519(n) {\n    return bytesToNumberLE(adjustBytes25519(ensureBytes(n, 32)));\n}\nfunction checkPrivateKey(key) {\n    key =\n        typeof key === 'bigint' || typeof key === 'number'\n            ? numberTo32BytesBE(normalizeScalar(key, POW_2_256))\n            : ensureBytes(key);\n    if (key.length !== 32)\n        throw new Error(`Expected 32 bytes`);\n    return key;\n}\nfunction getKeyFromHash(hashed) {\n    const head = adjustBytes25519(hashed.slice(0, 32));\n    const prefix = hashed.slice(32, 64);\n    const scalar = modlLE(head);\n    const point = Point.BASE.multiply(scalar);\n    const pointBytes = point.toRawBytes();\n    return { head, prefix, scalar, point, pointBytes };\n}\nlet _sha512Sync;\nfunction sha512s(...m) {\n    if (typeof _sha512Sync !== 'function')\n        throw new Error('utils.sha512Sync must be set to use sync methods');\n    return _sha512Sync(...m);\n}\nasync function getExtendedPublicKey(key) {\n    return getKeyFromHash(await utils.sha512(checkPrivateKey(key)));\n}\nfunction getExtendedPublicKeySync(key) {\n    return getKeyFromHash(sha512s(checkPrivateKey(key)));\n}\nexport async function getPublicKey(privateKey) {\n    return (await getExtendedPublicKey(privateKey)).pointBytes;\n}\nfunction getPublicKeySync(privateKey) {\n    return getExtendedPublicKeySync(privateKey).pointBytes;\n}\nexport async function sign(message, privateKey) {\n    message = ensureBytes(message);\n    const { prefix, scalar, pointBytes } = await getExtendedPublicKey(privateKey);\n    const r = modlLE(await utils.sha512(prefix, message));\n    const R = Point.BASE.multiply(r);\n    const k = modlLE(await utils.sha512(R.toRawBytes(), pointBytes, message));\n    const s = mod(r + k * scalar, CURVE.l);\n    return new Signature(R, s).toRawBytes();\n}\nfunction signSync(message, privateKey) {\n    message = ensureBytes(message);\n    const { prefix, scalar, pointBytes } = getExtendedPublicKeySync(privateKey);\n    const r = modlLE(sha512s(prefix, message));\n    const R = Point.BASE.multiply(r);\n    const k = modlLE(sha512s(R.toRawBytes(), pointBytes, message));\n    const s = mod(r + k * scalar, CURVE.l);\n    return new Signature(R, s).toRawBytes();\n}\nfunction prepareVerification(sig, message, publicKey) {\n    message = ensureBytes(message);\n    if (!(publicKey instanceof Point))\n        publicKey = Point.fromHex(publicKey, false);\n    const { r, s } = sig instanceof Signature ? sig.assertValidity() : Signature.fromHex(sig);\n    const SB = ExtendedPoint.BASE.multiplyUnsafe(s);\n    return { r, s, SB, pub: publicKey, msg: message };\n}\nfunction finishVerification(publicKey, r, SB, hashed) {\n    const k = modlLE(hashed);\n    const kA = ExtendedPoint.fromAffine(publicKey).multiplyUnsafe(k);\n    const RkA = ExtendedPoint.fromAffine(r).add(kA);\n    return RkA.subtract(SB).multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n}\nexport async function verify(sig, message, publicKey) {\n    const { r, SB, msg, pub } = prepareVerification(sig, message, publicKey);\n    const hashed = await utils.sha512(r.toRawBytes(), pub.toRawBytes(), msg);\n    return finishVerification(pub, r, SB, hashed);\n}\nfunction verifySync(sig, message, publicKey) {\n    const { r, SB, msg, pub } = prepareVerification(sig, message, publicKey);\n    const hashed = sha512s(r.toRawBytes(), pub.toRawBytes(), msg);\n    return finishVerification(pub, r, SB, hashed);\n}\nexport const sync = {\n    getExtendedPublicKey: getExtendedPublicKeySync,\n    getPublicKey: getPublicKeySync,\n    sign: signSync,\n    verify: verifySync,\n};\nexport async function getSharedSecret(privateKey, publicKey) {\n    const { head } = await getExtendedPublicKey(privateKey);\n    const u = Point.fromHex(publicKey).toX25519();\n    return curve25519.scalarMult(head, u);\n}\nPoint.BASE._setWindowSize(8);\nfunction cswap(swap, x_2, x_3) {\n    const dummy = mod(swap * (x_2 - x_3));\n    x_2 = mod(x_2 - dummy);\n    x_3 = mod(x_3 + dummy);\n    return [x_2, x_3];\n}\nfunction montgomeryLadder(pointU, scalar) {\n    const { P } = CURVE;\n    const u = normalizeScalar(pointU, P);\n    const k = normalizeScalar(scalar, P);\n    const a24 = BigInt(121665);\n    const x_1 = u;\n    let x_2 = _1n;\n    let z_2 = _0n;\n    let x_3 = u;\n    let z_3 = _1n;\n    let swap = _0n;\n    let sw;\n    for (let t = BigInt(255 - 1); t >= _0n; t--) {\n        const k_t = (k >> t) & _1n;\n        swap ^= k_t;\n        sw = cswap(swap, x_2, x_3);\n        x_2 = sw[0];\n        x_3 = sw[1];\n        sw = cswap(swap, z_2, z_3);\n        z_2 = sw[0];\n        z_3 = sw[1];\n        swap = k_t;\n        const A = x_2 + z_2;\n        const AA = mod(A * A);\n        const B = x_2 - z_2;\n        const BB = mod(B * B);\n        const E = AA - BB;\n        const C = x_3 + z_3;\n        const D = x_3 - z_3;\n        const DA = mod(D * A);\n        const CB = mod(C * B);\n        const dacb = DA + CB;\n        const da_cb = DA - CB;\n        x_3 = mod(dacb * dacb);\n        z_3 = mod(x_1 * mod(da_cb * da_cb));\n        x_2 = mod(AA * BB);\n        z_2 = mod(E * (AA + mod(a24 * E)));\n    }\n    sw = cswap(swap, x_2, x_3);\n    x_2 = sw[0];\n    x_3 = sw[1];\n    sw = cswap(swap, z_2, z_3);\n    z_2 = sw[0];\n    z_3 = sw[1];\n    const { pow_p_5_8, b2 } = pow_2_252_3(z_2);\n    const xp2 = mod(pow2(pow_p_5_8, BigInt(3)) * b2);\n    return mod(x_2 * xp2);\n}\nfunction encodeUCoordinate(u) {\n    return numberTo32BytesLE(mod(u, CURVE.P));\n}\nfunction decodeUCoordinate(uEnc) {\n    const u = ensureBytes(uEnc, 32);\n    u[31] &= 127;\n    return bytesToNumberLE(u);\n}\nexport const curve25519 = {\n    BASE_POINT_U: '0900000000000000000000000000000000000000000000000000000000000000',\n    scalarMult(privateKey, publicKey) {\n        const u = decodeUCoordinate(publicKey);\n        const p = decodeScalar25519(privateKey);\n        const pu = montgomeryLadder(u, p);\n        if (pu === _0n)\n            throw new Error('Invalid private or public key received');\n        return encodeUCoordinate(pu);\n    },\n    scalarMultBase(privateKey) {\n        return curve25519.scalarMult(privateKey, curve25519.BASE_POINT_U);\n    },\n};\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nexport const utils = {\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    getExtendedPublicKey,\n    mod,\n    invert,\n    TORSION_SUBGROUP: [\n        '0100000000000000000000000000000000000000000000000000000000000000',\n        'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n        '0000000000000000000000000000000000000000000000000000000000000080',\n        '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n        'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n        '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n        '0000000000000000000000000000000000000000000000000000000000000000',\n        'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n    ],\n    hashToPrivateScalar: (hash) => {\n        hash = ensureBytes(hash);\n        if (hash.length < 40 || hash.length > 1024)\n            throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');\n        return mod(bytesToNumberLE(hash), CURVE.l - _1n) + _1n;\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return new Uint8Array(randomBytes(bytesLength).buffer);\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => {\n        return utils.randomBytes(32);\n    },\n    sha512: async (...messages) => {\n        const message = concatBytes(...messages);\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-512', message.buffer);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            return Uint8Array.from(crypto.node.createHash('sha512').update(message).digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha512 function\");\n        }\n    },\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point.equals(Point.BASE) ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_2n);\n        return cached;\n    },\n    sha512Sync: undefined,\n};\nObject.defineProperties(utils, {\n    sha512Sync: {\n        configurable: false,\n        get() {\n            return _sha512Sync;\n        },\n        set(val) {\n            if (!_sha512Sync)\n                _sha512Sync = val;\n        },\n    },\n});\n", "import { SHA2 } from './_sha2.js';\nimport { rotr, wrapConstructor } from './utils.js';\n\n// Choice: a ? b : c\nconst Chi = (a: number, b: number, c: number) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a: number, b: number, c: number) => (a & b) ^ (a & c) ^ (b & c);\n\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends SHA2<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  A = IV[0] | 0;\n  B = IV[1] | 0;\n  C = IV[2] | 0;\n  D = IV[3] | 0;\n  E = IV[4] | 0;\n  F = IV[5] | 0;\n  G = IV[6] | 0;\n  H = IV[7] | 0;\n\n  constructor() {\n    super(64, 32, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ) {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean() {\n    SHA256_W.fill(0);\n  }\n  destroy() {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n  A = 0xc1059ed8 | 0;\n  B = 0x367cd507 | 0;\n  C = 0x3070dd17 | 0;\n  D = 0xf70e5939 | 0;\n  E = 0xffc00b31 | 0;\n  F = 0x68581511 | 0;\n  G = 0x64f98fa7 | 0;\n  H = 0xbefa4fa4 | 0;\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = wrapConstructor(() => new SHA256());\nexport const sha224 = wrapConstructor(() => new SHA224());\n", "'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n", "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserializeUnchecked = exports.deserialize = exports.serialize = exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.baseDecode = exports.baseEncode = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bs58_1 = __importDefault(require(\"bs58\"));\n// TODO: Make sure this polyfill not included when not required\nconst encoding = __importStar(require(\"text-encoding-utf-8\"));\nconst ResolvedTextDecoder = typeof TextDecoder !== \"function\" ? encoding.TextDecoder : TextDecoder;\nconst textDecoder = new ResolvedTextDecoder(\"utf-8\", { fatal: true });\nfunction baseEncode(value) {\n    if (typeof value === \"string\") {\n        value = Buffer.from(value, \"utf8\");\n    }\n    return bs58_1.default.encode(Buffer.from(value));\n}\nexports.baseEncode = baseEncode;\nfunction baseDecode(value) {\n    return Buffer.from(bs58_1.default.decode(value));\n}\nexports.baseDecode = baseDecode;\nconst INITIAL_LENGTH = 1024;\nclass BorshError extends Error {\n    constructor(message) {\n        super(message);\n        this.fieldPath = [];\n        this.originalMessage = message;\n    }\n    addToFieldPath(fieldName) {\n        this.fieldPath.splice(0, 0, fieldName);\n        // NOTE: Modifying message directly as jest doesn't use .toString()\n        this.message = this.originalMessage + \": \" + this.fieldPath.join(\".\");\n    }\n}\nexports.BorshError = BorshError;\n/// Binary encoder.\nclass BinaryWriter {\n    constructor() {\n        this.buf = Buffer.alloc(INITIAL_LENGTH);\n        this.length = 0;\n    }\n    maybeResize() {\n        if (this.buf.length < 16 + this.length) {\n            this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);\n        }\n    }\n    writeU8(value) {\n        this.maybeResize();\n        this.buf.writeUInt8(value, this.length);\n        this.length += 1;\n    }\n    writeU16(value) {\n        this.maybeResize();\n        this.buf.writeUInt16LE(value, this.length);\n        this.length += 2;\n    }\n    writeU32(value) {\n        this.maybeResize();\n        this.buf.writeUInt32LE(value, this.length);\n        this.length += 4;\n    }\n    writeU64(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 8)));\n    }\n    writeU128(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 16)));\n    }\n    writeU256(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 32)));\n    }\n    writeU512(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 64)));\n    }\n    writeBuffer(buffer) {\n        // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser\n        this.buf = Buffer.concat([\n            Buffer.from(this.buf.subarray(0, this.length)),\n            buffer,\n            Buffer.alloc(INITIAL_LENGTH),\n        ]);\n        this.length += buffer.length;\n    }\n    writeString(str) {\n        this.maybeResize();\n        const b = Buffer.from(str, \"utf8\");\n        this.writeU32(b.length);\n        this.writeBuffer(b);\n    }\n    writeFixedArray(array) {\n        this.writeBuffer(Buffer.from(array));\n    }\n    writeArray(array, fn) {\n        this.maybeResize();\n        this.writeU32(array.length);\n        for (const elem of array) {\n            this.maybeResize();\n            fn(elem);\n        }\n    }\n    toArray() {\n        return this.buf.subarray(0, this.length);\n    }\n}\nexports.BinaryWriter = BinaryWriter;\nfunction handlingRangeError(target, propertyKey, propertyDescriptor) {\n    const originalMethod = propertyDescriptor.value;\n    propertyDescriptor.value = function (...args) {\n        try {\n            return originalMethod.apply(this, args);\n        }\n        catch (e) {\n            if (e instanceof RangeError) {\n                const code = e.code;\n                if ([\"ERR_BUFFER_OUT_OF_BOUNDS\", \"ERR_OUT_OF_RANGE\"].indexOf(code) >= 0) {\n                    throw new BorshError(\"Reached the end of buffer when deserializing\");\n                }\n            }\n            throw e;\n        }\n    };\n}\nclass BinaryReader {\n    constructor(buf) {\n        this.buf = buf;\n        this.offset = 0;\n    }\n    readU8() {\n        const value = this.buf.readUInt8(this.offset);\n        this.offset += 1;\n        return value;\n    }\n    readU16() {\n        const value = this.buf.readUInt16LE(this.offset);\n        this.offset += 2;\n        return value;\n    }\n    readU32() {\n        const value = this.buf.readUInt32LE(this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readU64() {\n        const buf = this.readBuffer(8);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU128() {\n        const buf = this.readBuffer(16);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU256() {\n        const buf = this.readBuffer(32);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU512() {\n        const buf = this.readBuffer(64);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readBuffer(len) {\n        if (this.offset + len > this.buf.length) {\n            throw new BorshError(`Expected buffer length ${len} isn't within bounds`);\n        }\n        const result = this.buf.slice(this.offset, this.offset + len);\n        this.offset += len;\n        return result;\n    }\n    readString() {\n        const len = this.readU32();\n        const buf = this.readBuffer(len);\n        try {\n            // NOTE: Using TextDecoder to fail on invalid UTF-8\n            return textDecoder.decode(buf);\n        }\n        catch (e) {\n            throw new BorshError(`Error decoding UTF-8 string: ${e}`);\n        }\n    }\n    readFixedArray(len) {\n        return new Uint8Array(this.readBuffer(len));\n    }\n    readArray(fn) {\n        const len = this.readU32();\n        const result = Array();\n        for (let i = 0; i < len; ++i) {\n            result.push(fn());\n        }\n        return result;\n    }\n}\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU8\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU16\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU32\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU64\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU128\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU256\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU512\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readString\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readFixedArray\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readArray\", null);\nexports.BinaryReader = BinaryReader;\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction serializeField(schema, fieldName, value, fieldType, writer) {\n    try {\n        // TODO: Handle missing values properly (make sure they never result in just skipped write)\n        if (typeof fieldType === \"string\") {\n            writer[`write${capitalizeFirstLetter(fieldType)}`](value);\n        }\n        else if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                if (value.length !== fieldType[0]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);\n                }\n                writer.writeFixedArray(value);\n            }\n            else if (fieldType.length === 2 && typeof fieldType[1] === \"number\") {\n                if (value.length !== fieldType[1]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[1]}, but got ${value.length} bytes`);\n                }\n                for (let i = 0; i < fieldType[1]; i++) {\n                    serializeField(schema, null, value[i], fieldType[0], writer);\n                }\n            }\n            else {\n                writer.writeArray(value, (item) => {\n                    serializeField(schema, fieldName, item, fieldType[0], writer);\n                });\n            }\n        }\n        else if (fieldType.kind !== undefined) {\n            switch (fieldType.kind) {\n                case \"option\": {\n                    if (value === null || value === undefined) {\n                        writer.writeU8(0);\n                    }\n                    else {\n                        writer.writeU8(1);\n                        serializeField(schema, fieldName, value, fieldType.type, writer);\n                    }\n                    break;\n                }\n                case \"map\": {\n                    writer.writeU32(value.size);\n                    value.forEach((val, key) => {\n                        serializeField(schema, fieldName, key, fieldType.key, writer);\n                        serializeField(schema, fieldName, val, fieldType.value, writer);\n                    });\n                    break;\n                }\n                default:\n                    throw new BorshError(`FieldType ${fieldType} unrecognized`);\n            }\n        }\n        else {\n            serializeStruct(schema, value, writer);\n        }\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction serializeStruct(schema, obj, writer) {\n    if (typeof obj.borshSerialize === \"function\") {\n        obj.borshSerialize(writer);\n        return;\n    }\n    const structSchema = schema.get(obj.constructor);\n    if (!structSchema) {\n        throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        structSchema.fields.map(([fieldName, fieldType]) => {\n            serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n        });\n    }\n    else if (structSchema.kind === \"enum\") {\n        const name = obj[structSchema.field];\n        for (let idx = 0; idx < structSchema.values.length; ++idx) {\n            const [fieldName, fieldType] = structSchema.values[idx];\n            if (fieldName === name) {\n                writer.writeU8(idx);\n                serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n                break;\n            }\n        }\n    }\n    else {\n        throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);\n    }\n}\n/// Serialize given object using schema of the form:\n/// { class_name -> [ [field_name, field_type], .. ], .. }\nfunction serialize(schema, obj, Writer = BinaryWriter) {\n    const writer = new Writer();\n    serializeStruct(schema, obj, writer);\n    return writer.toArray();\n}\nexports.serialize = serialize;\nfunction deserializeField(schema, fieldName, fieldType, reader) {\n    try {\n        if (typeof fieldType === \"string\") {\n            return reader[`read${capitalizeFirstLetter(fieldType)}`]();\n        }\n        if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                return reader.readFixedArray(fieldType[0]);\n            }\n            else if (typeof fieldType[1] === \"number\") {\n                const arr = [];\n                for (let i = 0; i < fieldType[1]; i++) {\n                    arr.push(deserializeField(schema, null, fieldType[0], reader));\n                }\n                return arr;\n            }\n            else {\n                return reader.readArray(() => deserializeField(schema, fieldName, fieldType[0], reader));\n            }\n        }\n        if (fieldType.kind === \"option\") {\n            const option = reader.readU8();\n            if (option) {\n                return deserializeField(schema, fieldName, fieldType.type, reader);\n            }\n            return undefined;\n        }\n        if (fieldType.kind === \"map\") {\n            let map = new Map();\n            const length = reader.readU32();\n            for (let i = 0; i < length; i++) {\n                const key = deserializeField(schema, fieldName, fieldType.key, reader);\n                const val = deserializeField(schema, fieldName, fieldType.value, reader);\n                map.set(key, val);\n            }\n            return map;\n        }\n        return deserializeStruct(schema, fieldType, reader);\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction deserializeStruct(schema, classType, reader) {\n    if (typeof classType.borshDeserialize === \"function\") {\n        return classType.borshDeserialize(reader);\n    }\n    const structSchema = schema.get(classType);\n    if (!structSchema) {\n        throw new BorshError(`Class ${classType.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        const result = {};\n        for (const [fieldName, fieldType] of schema.get(classType).fields) {\n            result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);\n        }\n        return new classType(result);\n    }\n    if (structSchema.kind === \"enum\") {\n        const idx = reader.readU8();\n        if (idx >= structSchema.values.length) {\n            throw new BorshError(`Enum index: ${idx} is out of range`);\n        }\n        const [fieldName, fieldType] = structSchema.values[idx];\n        const fieldValue = deserializeField(schema, fieldName, fieldType, reader);\n        return new classType({ [fieldName]: fieldValue });\n    }\n    throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);\n}\n/// Deserializes object from bytes using schema.\nfunction deserialize(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    const result = deserializeStruct(schema, classType, reader);\n    if (reader.offset < buffer.length) {\n        throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);\n    }\n    return result;\n}\nexports.deserialize = deserialize;\n/// Deserializes object from bytes using schema, without checking the length read\nfunction deserializeUnchecked(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    return deserializeStruct(schema, classType, reader);\n}\nexports.deserializeUnchecked = deserializeUnchecked;\n", null, "'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet converter;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    {\n        const hex = buf.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n", "/**\n * A `StructFailure` represents a single specific failure in validation.\n */\n\nexport type Failure = {\n  value: any\n  key: any\n  type: string\n  refinement: string | undefined\n  message: string\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */\n\nexport class StructError extends TypeError {\n  value: any\n  key!: any\n  type!: string\n  refinement!: string | undefined\n  path!: Array<any>\n  branch!: Array<any>\n  failures: () => Array<Failure>;\n  [x: string]: any\n\n  constructor(failure: Failure, failures: () => Generator<Failure>) {\n    let cached: Array<Failure> | undefined\n    const { message, ...rest } = failure\n    const { path } = failure\n    const msg =\n      path.length === 0 ? message : `At path: ${path.join('.')} -- ${message}`\n    super(msg)\n    Object.assign(this, rest)\n    this.name = this.constructor.name\n    this.failures = () => {\n      return (cached ??= [failure, ...failures()])\n    }\n  }\n}\n", "import { Struct, Infer, Result, Context, Describe } from './struct'\nimport { Failure } from './error'\n\n/**\n * Check if a value is an iterator.\n */\n\nfunction isIterable<T>(x: unknown): x is Iterable<T> {\n  return isObject(x) && typeof x[Symbol.iterator] === 'function'\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isObject(x: unknown): x is object {\n  return typeof x === 'object' && x != null\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isPlainObject(x: unknown): x is { [key: string]: any } {\n  if (Object.prototype.toString.call(x) !== '[object Object]') {\n    return false\n  }\n\n  const prototype = Object.getPrototypeOf(x)\n  return prototype === null || prototype === Object.prototype\n}\n\n/**\n * Return a value as a printable string.\n */\n\nexport function print(value: any): string {\n  return typeof value === 'string' ? JSON.stringify(value) : `${value}`\n}\n\n/**\n * Shifts (removes and returns) the first value from the `input` iterator.\n * Like `Array.prototype.shift()` but for an `Iterator`.\n */\n\nexport function shiftIterator<T>(input: Iterator<T>): T | undefined {\n  const { done, value } = input.next()\n  return done ? undefined : value\n}\n\n/**\n * Convert a single validation result to a failure.\n */\n\nexport function toFailure<T, S>(\n  result: string | boolean | Partial<Failure>,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): Failure | undefined {\n  if (result === true) {\n    return\n  } else if (result === false) {\n    result = {}\n  } else if (typeof result === 'string') {\n    result = { message: result }\n  }\n\n  const { path, branch } = context\n  const { type } = struct\n  const {\n    refinement,\n    message = `Expected a value of type \\`${type}\\`${\n      refinement ? ` with refinement \\`${refinement}\\`` : ''\n    }, but received: \\`${print(value)}\\``,\n  } = result\n\n  return {\n    value,\n    type,\n    refinement,\n    key: path[path.length - 1],\n    path,\n    branch,\n    ...result,\n    message,\n  }\n}\n\n/**\n * Convert a validation result to an iterable of failures.\n */\n\nexport function* toFailures<T, S>(\n  result: Result,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): IterableIterator<Failure> {\n  if (!isIterable(result)) {\n    result = [result]\n  }\n\n  for (const r of result) {\n    const failure = toFailure(r, context, struct, value)\n\n    if (failure) {\n      yield failure\n    }\n  }\n}\n\n/**\n * Check a value against a struct, traversing deeply into nested values, and\n * returning an iterator of failures or success.\n */\n\nexport function* run<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    path?: any[]\n    branch?: any[]\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): IterableIterator<[Failure, undefined] | [undefined, T]> {\n  const { path = [], branch = [value], coerce = false, mask = false } = options\n  const ctx: Context = { path, branch }\n\n  if (coerce) {\n    value = struct.coercer(value, ctx)\n\n    if (\n      mask &&\n      struct.type !== 'type' &&\n      isObject(struct.schema) &&\n      isObject(value) &&\n      !Array.isArray(value)\n    ) {\n      for (const key in value) {\n        if (struct.schema[key] === undefined) {\n          delete value[key]\n        }\n      }\n    }\n  }\n\n  let valid = true\n\n  for (const failure of struct.validator(value, ctx)) {\n    valid = false\n    yield [failure, undefined]\n  }\n\n  for (let [k, v, s] of struct.entries(value, ctx)) {\n    const ts = run(v, s as Struct, {\n      path: k === undefined ? path : [...path, k],\n      branch: k === undefined ? branch : [...branch, v],\n      coerce,\n      mask,\n    })\n\n    for (const t of ts) {\n      if (t[0]) {\n        valid = false\n        yield [t[0], undefined]\n      } else if (coerce) {\n        v = t[1]\n\n        if (k === undefined) {\n          value = v\n        } else if (value instanceof Map) {\n          value.set(k, v)\n        } else if (value instanceof Set) {\n          value.add(v)\n        } else if (isObject(value)) {\n          value[k] = v\n        }\n      }\n    }\n  }\n\n  if (valid) {\n    for (const failure of struct.refiner(value as T, ctx)) {\n      valid = false\n      yield [failure, undefined]\n    }\n  }\n\n  if (valid) {\n    yield [undefined, value as T]\n  }\n}\n\n/**\n * Assign properties from one type to another, overwriting existing.\n */\n\nexport type Assign<T, U> = Simplify<U & Omit<T, keyof U>>\n\n/**\n * A schema for enum structs.\n */\n\nexport type EnumSchema<T extends string | number> = { [K in T]: K }\n\n/**\n * Check if a type is an exact match.\n */\n\nexport type IsMatch<T, G> = T extends G ? (G extends T ? T : never) : never\n\n/**\n * Check if a type is a record type.\n */\n\nexport type IsRecord<T> = T extends object\n  ? string extends keyof T\n    ? T\n    : never\n  : never\n/**\n * Check if a type is a tuple.\n */\n\nexport type IsTuple<T> = T extends [any]\n  ? T\n  : T extends [any, any]\n  ? T\n  : T extends [any, any, any]\n  ? T\n  : T extends [any, any, any, any]\n  ? T\n  : T extends [any, any, any, any, any]\n  ? T\n  : never\n\n/**\n * Check if a type is a union.\n */\n\nexport type IsUnion<T, U extends T = T> = (\n  T extends any ? (U extends T ? false : true) : false\n) extends false\n  ? never\n  : T\n\n/**\n * A schema for object structs.\n */\n\nexport type ObjectSchema = Record<string, Struct<any, any>>\n\n/**\n * Infer a type from an object struct schema.\n */\n\nexport type ObjectType<S extends ObjectSchema> = Simplify<\n  Optionalize<{ [K in keyof S]: Infer<S[K]> }>\n>\n\n/**\n * Omit properties from a type that extend from a specific type.\n */\n\nexport type OmitBy<T, V> = Omit<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Normalize properties of a type that allow `undefined` to make them optional.\n */\n\nexport type Optionalize<S extends object> = OmitBy<S, undefined> &\n  Partial<PickBy<S, undefined>>\n\n/**\n * Transform an object schema type to represent a partial.\n */\n\nexport type PartialObjectSchema<S extends ObjectSchema> = {\n  [K in keyof S]: Struct<Infer<S[K]> | undefined>\n}\n\n/**\n * Pick properties from a type that extend from a specific type.\n */\n\nexport type PickBy<T, V> = Pick<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Simplifies a type definition to its most basic representation.\n */\n\nexport type Simplify<T> = T extends any[] | Date\n  ? T\n  : { [K in keyof T]: T[K] } & {}\n\nexport type If<B extends Boolean, Then, Else> = B extends true ? Then : Else\n\n/**\n * A schema for any type of struct.\n */\n\nexport type StructSchema<T> = [T] extends [string]\n  ? [T] extends [IsMatch<T, string>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [number]\n  ? [T] extends [IsMatch<T, number>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [boolean]\n  ? [T] extends [IsMatch<T, boolean>]\n    ? null\n    : T\n  : T extends\n      | bigint\n      | symbol\n      | undefined\n      | null\n      | Function\n      | Date\n      | Error\n      | RegExp\n      | Map<any, any>\n      | WeakMap<any, any>\n      | Set<any>\n      | WeakSet<any>\n      | Promise<any>\n  ? null\n  : T extends Array<infer E>\n  ? T extends IsTuple<T>\n    ? null\n    : Struct<E>\n  : T extends object\n  ? T extends IsRecord<T>\n    ? null\n    : { [K in keyof T]: Describe<T[K]> }\n  : null\n\n/**\n * A schema for tuple structs.\n */\n\nexport type TupleSchema<T> = { [K in keyof T]: Struct<T[K]> }\n", "import { toFailures, shiftIterator, StructSchema, run } from './utils'\nimport { StructError, Failure } from './error'\n\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */\n\nexport class Struct<T = unknown, S = unknown> {\n  readonly TYPE!: T\n  type: string\n  schema: S\n  coercer: (value: unknown, context: Context) => unknown\n  validator: (value: unknown, context: Context) => Iterable<Failure>\n  refiner: (value: T, context: Context) => Iterable<Failure>\n  entries: (\n    value: unknown,\n    context: Context\n  ) => Iterable<[string | number, unknown, Struct<any> | Struct<never>]>\n\n  constructor(props: {\n    type: string\n    schema: S\n    coercer?: Coercer\n    validator?: Validator\n    refiner?: Refiner<T>\n    entries?: Struct<T, S>['entries']\n  }) {\n    const {\n      type,\n      schema,\n      validator,\n      refiner,\n      coercer = (value: unknown) => value,\n      entries = function* () {},\n    } = props\n\n    this.type = type\n    this.schema = schema\n    this.entries = entries\n    this.coercer = coercer\n\n    if (validator) {\n      this.validator = (value, context) => {\n        const result = validator(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.validator = () => []\n    }\n\n    if (refiner) {\n      this.refiner = (value, context) => {\n        const result = refiner(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.refiner = () => []\n    }\n  }\n\n  /**\n   * Assert that a value passes the struct's validation, throwing if it doesn't.\n   */\n\n  assert(value: unknown): asserts value is T {\n    return assert(value, this)\n  }\n\n  /**\n   * Create a value with the struct's coercion logic, then validate it.\n   */\n\n  create(value: unknown): T {\n    return create(value, this)\n  }\n\n  /**\n   * Check if a value passes the struct's validation.\n   */\n\n  is(value: unknown): value is T {\n    return is(value, this)\n  }\n\n  /**\n   * Mask a value, coercing and validating it, but returning only the subset of\n   * properties defined by the struct's schema.\n   */\n\n  mask(value: unknown): T {\n    return mask(value, this)\n  }\n\n  /**\n   * Validate a value with the struct's validation logic, returning a tuple\n   * representing the result.\n   *\n   * You may optionally pass `true` for the `withCoercion` argument to coerce\n   * the value before attempting to validate it. If you do, the result will\n   * contain the coerced result when successful.\n   */\n\n  validate(\n    value: unknown,\n    options: {\n      coerce?: boolean\n    } = {}\n  ): [StructError, undefined] | [undefined, T] {\n    return validate(value, this, options)\n  }\n}\n\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */\n\nexport function assert<T, S>(\n  value: unknown,\n  struct: Struct<T, S>\n): asserts value is T {\n  const result = validate(value, struct)\n\n  if (result[0]) {\n    throw result[0]\n  }\n}\n\n/**\n * Create a value with the coercion logic of struct and validate it.\n */\n\nexport function create<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */\n\nexport function mask<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true, mask: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Check if a value passes a struct.\n */\n\nexport function is<T, S>(value: unknown, struct: Struct<T, S>): value is T {\n  const result = validate(value, struct)\n  return !result[0]\n}\n\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */\n\nexport function validate<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): [StructError, undefined] | [undefined, T] {\n  const tuples = run(value, struct, options)\n  const tuple = shiftIterator(tuples)!\n\n  if (tuple[0]) {\n    const error = new StructError(tuple[0], function* () {\n      for (const t of tuples) {\n        if (t[0]) {\n          yield t[0]\n        }\n      }\n    })\n\n    return [error, undefined]\n  } else {\n    const v = tuple[1]\n    return [undefined, v]\n  }\n}\n\n/**\n * A `Context` contains information about the current location of the\n * validation inside the initial input value.\n */\n\nexport type Context = {\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * A type utility to extract the type from a `Struct` class.\n */\n\nexport type Infer<T extends Struct<any, any>> = T['TYPE']\n\n/**\n * A type utility to describe that a struct represents a TypeScript type.\n */\n\nexport type Describe<T> = Struct<T, StructSchema<T>>\n\n/**\n * A `Result` is returned from validation functions.\n */\n\nexport type Result =\n  | boolean\n  | string\n  | Partial<Failure>\n  | Iterable<boolean | string | Partial<Failure>>\n\n/**\n * A `Coercer` takes an unknown value and optionally coerces it.\n */\n\nexport type Coercer<T = unknown> = (value: T, context: Context) => unknown\n\n/**\n * A `Validator` takes an unknown value and validates it.\n */\n\nexport type Validator = (value: unknown, context: Context) => Result\n\n/**\n * A `Refiner` takes a value of a known type and validates it against a further\n * constraint.\n */\n\nexport type Refiner<T> = (value: T, context: Context) => Result\n", "import { Struct, Context, Validator } from '../struct'\nimport { object, optional } from './types'\nimport { ObjectSchema, Assign, ObjectType, PartialObjectSchema } from '../utils'\n\n/**\n * Create a new struct that combines the properties properties from multiple\n * object structs.\n *\n * Like JavaScript's `Object.assign` utility.\n */\n\nexport function assign<A extends ObjectSchema, B extends ObjectSchema>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>\n): Struct<ObjectType<Assign<A, B>>, Assign<A, B>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>\n): Struct<ObjectType<Assign<Assign<A, B>, C>>, Assign<Assign<A, B>, C>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>\n): Struct<\n  ObjectType<Assign<Assign<Assign<A, B>, C>, D>>,\n  Assign<Assign<Assign<A, B>, C>, D>\n>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema,\n  E extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>,\n  E: Struct<ObjectType<E>, E>\n): Struct<\n  ObjectType<Assign<Assign<Assign<Assign<A, B>, C>, D>, E>>,\n  Assign<Assign<Assign<Assign<A, B>, C>, D>, E>\n>\nexport function assign(...Structs: Struct<any>[]): any {\n  const schemas = Structs.map((s) => s.schema)\n  const schema = Object.assign({}, ...schemas)\n  return object(schema)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n */\n\nexport function define<T>(name: string, validator: Validator): Struct<T, null> {\n  return new Struct({ type: name, schema: null, validator })\n}\n\n/**\n * Create a new struct based on an existing struct, but the value is allowed to\n * be `undefined`. `log` will be called if the value is not `undefined`.\n */\n\nexport function deprecated<T>(\n  struct: Struct<T>,\n  log: (value: unknown, ctx: Context) => void\n): Struct<T> {\n  return new Struct({\n    ...struct,\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n    validator(value, ctx) {\n      if (value === undefined) {\n        return true\n      } else {\n        log(value, ctx)\n        return struct.validator(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Create a struct with dynamic validation logic.\n *\n * The callback will receive the value currently being validated, and must\n * return a struct object to validate it with. This can be useful to model\n * validation logic that changes based on its input.\n */\n\nexport function dynamic<T>(\n  fn: (value: unknown, ctx: Context) => Struct<T, any>\n): Struct<T, null> {\n  return new Struct({\n    type: 'dynamic',\n    schema: null,\n    *entries(value, ctx) {\n      const struct = fn(value, ctx)\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a struct with lazily evaluated validation logic.\n *\n * The first time validation is run with the struct, the callback will be called\n * and must return a struct object to use. This is useful for cases where you\n * want to have self-referential structs for nested data structures to avoid a\n * circular definition problem.\n */\n\nexport function lazy<T>(fn: () => Struct<T, any>): Struct<T, null> {\n  let struct: Struct<T, any> | undefined\n  return new Struct({\n    type: 'lazy',\n    schema: null,\n    *entries(value, ctx) {\n      struct ??= fn()\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      struct ??= fn()\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      struct ??= fn()\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a new struct based on an existing object struct, but excluding\n * specific properties.\n *\n * Like TypeScript's `Omit` utility.\n */\n\nexport function omit<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Omit<S, K>>, Omit<S, K>> {\n  const { schema } = struct\n  const subschema: any = { ...schema }\n\n  for (const key of keys) {\n    delete subschema[key]\n  }\n\n  return object(subschema as Omit<S, K>)\n}\n\n/**\n * Create a new struct based on an existing object struct, but with all of its\n * properties allowed to be `undefined`.\n *\n * Like TypeScript's `Partial` utility.\n */\n\nexport function partial<S extends ObjectSchema>(\n  struct: Struct<ObjectType<S>, S> | S\n): Struct<ObjectType<PartialObjectSchema<S>>, PartialObjectSchema<S>> {\n  const schema: any =\n    struct instanceof Struct ? { ...struct.schema } : { ...struct }\n\n  for (const key in schema) {\n    schema[key] = optional(schema[key])\n  }\n\n  return object(schema) as any\n}\n\n/**\n * Create a new struct based on an existing object struct, but only including\n * specific properties.\n *\n * Like TypeScript's `Pick` utility.\n */\n\nexport function pick<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Pick<S, K>>, Pick<S, K>> {\n  const { schema } = struct\n  const subschema: any = {}\n\n  for (const key of keys) {\n    subschema[key] = schema[key]\n  }\n\n  return object(subschema as Pick<S, K>)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n *\n * @deprecated This function has been renamed to `define`.\n */\n\nexport function struct<T>(name: string, validator: Validator): Struct<T, null> {\n  console.warn(\n    'superstruct@0.11 - The `struct` helper has been renamed to `define`.'\n  )\n\n  return define(name, validator)\n}\n", "import { Infer, Struct } from '../struct'\nimport { define } from './utilities'\nimport {\n  TupleSchema,\n  ObjectSchema,\n  ObjectType,\n  print,\n  run,\n  isObject,\n} from '../utils'\n\n/**\n * Ensure that any value passes validation.\n */\n\nexport function any(): Struct<any, null> {\n  return define('any', () => true)\n}\n\n/**\n * Ensure that a value is an array and that its elements are of a specific type.\n *\n * Note: If you omit the element struct, the arrays elements will not be\n * iterated at all. This can be helpful for cases where performance is critical,\n * and it is preferred to using `array(any())`.\n */\n\nexport function array<T extends Struct<any>>(Element: T): Struct<Infer<T>[], T>\nexport function array(): Struct<unknown[], undefined>\nexport function array<T extends Struct<any>>(Element?: T): any {\n  return new Struct({\n    type: 'array',\n    schema: Element,\n    *entries(value) {\n      if (Element && Array.isArray(value)) {\n        for (const [i, v] of value.entries()) {\n          yield [i, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return Array.isArray(value) ? value.slice() : value\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array value, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a boolean.\n */\n\nexport function boolean(): Struct<boolean, null> {\n  return define('boolean', (value) => {\n    return typeof value === 'boolean'\n  })\n}\n\n/**\n * Ensure that a value is a valid `Date`.\n *\n * Note: this also ensures that the value is *not* an invalid `Date` object,\n * which can occur when parsing a date fails but still returns a `Date`.\n */\n\nexport function date(): Struct<Date, null> {\n  return define('date', (value) => {\n    return (\n      (value instanceof Date && !isNaN(value.getTime())) ||\n      `Expected a valid \\`Date\\` object, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is one of a set of potential values.\n *\n * Note: after creating the struct, you can access the definition of the\n * potential values as `struct.schema`.\n */\n\nexport function enums<T extends number>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends string>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends number | string>(values: readonly T[]): any {\n  const schema: any = {}\n  const description = values.map((v) => print(v)).join()\n\n  for (const key of values) {\n    schema[key] = key\n  }\n\n  return new Struct({\n    type: 'enums',\n    schema,\n    validator(value) {\n      return (\n        values.includes(value as any) ||\n        `Expected one of \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a function.\n */\n\nexport function func(): Struct<Function, null> {\n  return define('func', (value) => {\n    return (\n      typeof value === 'function' ||\n      `Expected a function, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an instance of a specific class.\n */\n\nexport function instance<T extends { new (...args: any): any }>(\n  Class: T\n): Struct<InstanceType<T>, null> {\n  return define('instance', (value) => {\n    return (\n      value instanceof Class ||\n      `Expected a \\`${Class.name}\\` instance, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an integer.\n */\n\nexport function integer(): Struct<number, null> {\n  return define('integer', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value) && Number.isInteger(value)) ||\n      `Expected an integer, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value matches all of a set of types.\n */\n\nexport function intersection<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function intersection<A, B>(\n  Structs: TupleSchema<[A, B]>\n): Struct<A & B, null>\nexport function intersection<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A & B & C, null>\nexport function intersection<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A & B & C & D, null>\nexport function intersection<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A & B & C & D & E, null>\nexport function intersection<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A & B & C & D & E & F, null>\nexport function intersection<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A & B & C & D & E & F & G, null>\nexport function intersection<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A & B & C & D & E & F & G & H, null>\nexport function intersection<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A & B & C & D & E & F & G & H & I, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A & B & C & D & E & F & G & H & I & J, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P & Q,\n  null\n>\nexport function intersection(Structs: Array<Struct<any, any>>): any {\n  return new Struct({\n    type: 'intersection',\n    schema: null,\n    *entries(value, ctx) {\n      for (const S of Structs) {\n        yield* S.entries(value, ctx)\n      }\n    },\n    *validator(value, ctx) {\n      for (const S of Structs) {\n        yield* S.validator(value, ctx)\n      }\n    },\n    *refiner(value, ctx) {\n      for (const S of Structs) {\n        yield* S.refiner(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Ensure that a value is an exact value, using `===` for comparison.\n */\n\nexport function literal<T extends boolean>(constant: T): Struct<T, T>\nexport function literal<T extends number>(constant: T): Struct<T, T>\nexport function literal<T extends string>(constant: T): Struct<T, T>\nexport function literal<T>(constant: T): Struct<T, null>\nexport function literal<T>(constant: T): any {\n  const description = print(constant)\n  const t = typeof constant\n  return new Struct({\n    type: 'literal',\n    schema:\n      t === 'string' || t === 'number' || t === 'boolean' ? constant : null,\n    validator(value) {\n      return (\n        value === constant ||\n        `Expected the literal \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `Map` object, and that its keys and values are of\n * specific types.\n */\n\nexport function map(): Struct<Map<unknown, unknown>, null>\nexport function map<K, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Map<K, V>, null>\nexport function map<K, V>(Key?: Struct<K>, Value?: Struct<V>): any {\n  return new Struct({\n    type: 'map',\n    schema: null,\n    *entries(value) {\n      if (Key && Value && value instanceof Map) {\n        for (const [k, v] of value.entries()) {\n          yield [k as string, k, Key]\n          yield [k as string, v, Value]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Map ? new Map(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Map ||\n        `Expected a \\`Map\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that no value ever passes validation.\n */\n\nexport function never(): Struct<never, null> {\n  return define('never', () => false)\n}\n\n/**\n * Augment an existing struct to allow `null` values.\n */\n\nexport function nullable<T, S>(struct: Struct<T, S>): Struct<T | null, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) => value === null || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === null || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is a number.\n */\n\nexport function number(): Struct<number, null> {\n  return define('number', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value)) ||\n      `Expected a number, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an object, that is has a known set of properties,\n * and that its properties are of specific types.\n *\n * Note: Unrecognized properties will fail validation.\n */\n\nexport function object(): Struct<Record<string, unknown>, null>\nexport function object<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S>\nexport function object<S extends ObjectSchema>(schema?: S): any {\n  const knowns = schema ? Object.keys(schema) : []\n  const Never = never()\n  return new Struct({\n    type: 'object',\n    schema: schema ? schema : null,\n    *entries(value) {\n      if (schema && isObject(value)) {\n        const unknowns = new Set(Object.keys(value))\n\n        for (const key of knowns) {\n          unknowns.delete(key)\n          yield [key, value[key], schema[key]]\n        }\n\n        for (const key of unknowns) {\n          yield [key, value[key], Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n    coercer(value) {\n      return isObject(value) ? { ...value } : value\n    },\n  })\n}\n\n/**\n * Augment a struct to allow `undefined` values.\n */\n\nexport function optional<T, S>(struct: Struct<T, S>): Struct<T | undefined, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) =>\n      value === undefined || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is an object with keys and values of specific types, but\n * without ensuring any specific shape of properties.\n *\n * Like TypeScript's `Record` utility.\n */\n\nexport function record<K extends string, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Record<K, V>, null> {\n  return new Struct({\n    type: 'record',\n    schema: null,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k in value) {\n          const v = value[k]\n          yield [k, k, Key]\n          yield [k, v, Value]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `RegExp`.\n *\n * Note: this does not test the value against the regular expression! For that\n * you need to use the `pattern()` refinement.\n */\n\nexport function regexp(): Struct<RegExp, null> {\n  return define('regexp', (value) => {\n    return value instanceof RegExp\n  })\n}\n\n/**\n * Ensure that a value is a `Set` object, and that its elements are of a\n * specific type.\n */\n\nexport function set(): Struct<Set<unknown>, null>\nexport function set<T>(Element: Struct<T>): Struct<Set<T>, null>\nexport function set<T>(Element?: Struct<T>): any {\n  return new Struct({\n    type: 'set',\n    schema: null,\n    *entries(value) {\n      if (Element && value instanceof Set) {\n        for (const v of value) {\n          yield [v as string, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Set ? new Set(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Set ||\n        `Expected a \\`Set\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a string.\n */\n\nexport function string(): Struct<string, null> {\n  return define('string', (value) => {\n    return (\n      typeof value === 'string' ||\n      `Expected a string, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is a tuple of a specific length, and that each of its\n * elements is of a specific type.\n */\n\nexport function tuple<A>(Structs: TupleSchema<[A]>): Struct<[A], null>\nexport function tuple<A, B>(Structs: TupleSchema<[A, B]>): Struct<[A, B], null>\nexport function tuple<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<[A, B, C], null>\nexport function tuple<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<[A, B, C, D], null>\nexport function tuple<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<[A, B, C, D, E], null>\nexport function tuple<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<[A, B, C, D, E, F], null>\nexport function tuple<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<[A, B, C, D, E, F, G], null>\nexport function tuple<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<[A, B, C, D, E, F, G, H], null>\nexport function tuple<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<[A, B, C, D, E, F, G, H, I], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<[A, B, C, D, E, F, G, H, I, J], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q], null>\nexport function tuple(Elements: Struct<any>[]): any {\n  const Never = never()\n\n  return new Struct({\n    type: 'tuple',\n    schema: null,\n    *entries(value) {\n      if (Array.isArray(value)) {\n        const length = Math.max(Elements.length, value.length)\n\n        for (let i = 0; i < length; i++) {\n          yield [i, value[i], Elements[i] || Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */\n\nexport function type<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S> {\n  const keys = Object.keys(schema)\n  return new Struct({\n    type: 'type',\n    schema,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k of keys) {\n          yield [k, value[k], schema[k]]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value matches one of a set of types.\n */\n\nexport function union<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function union<A, B>(Structs: TupleSchema<[A, B]>): Struct<A | B, null>\nexport function union<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A | B | C, null>\nexport function union<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A | B | C | D, null>\nexport function union<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A | B | C | D | E, null>\nexport function union<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A | B | C | D | E | F, null>\nexport function union<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A | B | C | D | E | F | G, null>\nexport function union<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A | B | C | D | E | F | G | H, null>\nexport function union<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A | B | C | D | E | F | G | H | I, null>\nexport function union<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A | B | C | D | E | F | G | H | I | J, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q,\n  null\n>\nexport function union(Structs: Struct<any>[]): any {\n  const description = Structs.map((s) => s.type).join(' | ')\n  return new Struct({\n    type: 'union',\n    schema: null,\n    validator(value, ctx) {\n      const failures = []\n\n      for (const S of Structs) {\n        const [...tuples] = run(value, S, ctx)\n        const [first] = tuples\n\n        if (!first[0]) {\n          return []\n        } else {\n          for (const [failure] of tuples) {\n            if (failure) {\n              failures.push(failure)\n            }\n          }\n        }\n      }\n\n      return [\n        `Expected the value to satisfy a union of \\`${description}\\`, but received: ${print(\n          value\n        )}`,\n        ...failures,\n      ]\n    },\n  })\n}\n\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */\n\nexport function unknown(): Struct<unknown, null> {\n  return define('unknown', () => true)\n}\n", "import { Struct, is, Coercer } from '../struct'\nimport { isPlainObject } from '../utils'\nimport { string, unknown } from './types'\n\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function coerce<T, S, C>(\n  struct: Struct<T, S>,\n  condition: Struct<C, any>,\n  coercer: Coercer<C>\n): Struct<T, S> {\n  return new Struct({\n    ...struct,\n    coercer: (value, ctx) => {\n      return is(value, condition)\n        ? struct.coercer(coercer(value, ctx), ctx)\n        : struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Augment a struct to replace `undefined` values with a default.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function defaulted<T, S>(\n  struct: Struct<T, S>,\n  fallback: any,\n  options: {\n    strict?: boolean\n  } = {}\n): Struct<T, S> {\n  return coerce(struct, unknown(), (x) => {\n    const f = typeof fallback === 'function' ? fallback() : fallback\n\n    if (x === undefined) {\n      return f\n    }\n\n    if (!options.strict && isPlainObject(x) && isPlainObject(f)) {\n      const ret = { ...x }\n      let changed = false\n\n      for (const key in f) {\n        if (ret[key] === undefined) {\n          ret[key] = f[key]\n          changed = true\n        }\n      }\n\n      if (changed) {\n        return ret\n      }\n    }\n\n    return x\n  })\n}\n\n/**\n * Augment a struct to trim string inputs.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function trimmed<T, S>(struct: Struct<T, S>): Struct<T, S> {\n  return coerce(struct, string(), (x) => x.trim())\n}\n", "import { Struct, Refiner } from '../struct'\nimport { toFailures } from '../utils'\n\n/**\n * Ensure that a string, array, map, or set is empty.\n */\n\nexport function empty<\n  T extends string | any[] | Map<any, any> | Set<any>,\n  S extends any\n>(struct: Struct<T, S>): Struct<T, S> {\n  const expected = `Expected an empty ${struct.type}`\n\n  return refine(struct, 'empty', (value) => {\n    if (value instanceof Map || value instanceof Set) {\n      const { size } = value\n      return (\n        size === 0 || `${expected} but received one with a size of \\`${size}\\``\n      )\n    } else {\n      const { length } = value as string | any[]\n      return (\n        length === 0 ||\n        `${expected} but received one with a length of \\`${length}\\``\n      )\n    }\n  })\n}\n\n/**\n * Ensure that a number or date is below a threshold.\n */\n\nexport function max<T extends number | Date, S extends any>(\n  struct: Struct<T, S>,\n  threshold: T,\n  options: {\n    exclusive?: boolean\n  } = {}\n): Struct<T, S> {\n  const { exclusive } = options\n  return refine(struct, 'max', (value) => {\n    return exclusive\n      ? value < threshold\n      : value <= threshold ||\n          `Expected a ${struct.type} greater than ${\n            exclusive ? '' : 'or equal to '\n          }${threshold} but received \\`${value}\\``\n  })\n}\n\n/**\n * Ensure that a number or date is above a threshold.\n */\n\nexport function min<T extends number | Date, S extends any>(\n  struct: Struct<T, S>,\n  threshold: T,\n  options: {\n    exclusive?: boolean\n  } = {}\n): Struct<T, S> {\n  const { exclusive } = options\n  return refine(struct, 'min', (value) => {\n    return exclusive\n      ? value > threshold\n      : value >= threshold ||\n          `Expected a ${struct.type} greater than ${\n            exclusive ? '' : 'or equal to '\n          }${threshold} but received \\`${value}\\``\n  })\n}\n/**\n * Ensure that a string matches a regular expression.\n */\n\nexport function pattern<T extends string, S extends any>(\n  struct: Struct<T, S>,\n  regexp: RegExp\n): Struct<T, S> {\n  return refine(struct, 'pattern', (value) => {\n    return (\n      regexp.test(value) ||\n      `Expected a ${struct.type} matching \\`/${regexp.source}/\\` but received \"${value}\"`\n    )\n  })\n}\n\n/**\n * Ensure that a string, array, number, date, map, or set has a size (or length, or time) between `min` and `max`.\n */\n\nexport function size<\n  T extends string | number | Date | any[] | Map<any, any> | Set<any>,\n  S extends any\n>(struct: Struct<T, S>, min: number, max: number = min): Struct<T, S> {\n  const expected = `Expected a ${struct.type}`\n  const of = min === max ? `of \\`${min}\\`` : `between \\`${min}\\` and \\`${max}\\``\n\n  return refine(struct, 'size', (value) => {\n    if (typeof value === 'number' || value instanceof Date) {\n      return (\n        (min <= value && value <= max) ||\n        `${expected} ${of} but received \\`${value}\\``\n      )\n    } else if (value instanceof Map || value instanceof Set) {\n      const { size } = value\n      return (\n        (min <= size && size <= max) ||\n        `${expected} with a size ${of} but received one with a size of \\`${size}\\``\n      )\n    } else {\n      const { length } = value as string | any[]\n      return (\n        (min <= length && length <= max) ||\n        `${expected} with a length ${of} but received one with a length of \\`${length}\\``\n      )\n    }\n  })\n}\n\n/**\n * Augment a `Struct` to add an additional refinement to the validation.\n *\n * The refiner function is guaranteed to receive a value of the struct's type,\n * because the struct's existing validation will already have passed. This\n * allows you to layer additional validation on top of existing structs.\n */\n\nexport function refine<T, S>(\n  struct: Struct<T, S>,\n  name: string,\n  refiner: Refiner<T>\n): Struct<T, S> {\n  return new Struct({\n    ...struct,\n    *refiner(value, ctx) {\n      yield* struct.refiner(value, ctx)\n      const result = refiner(value, ctx)\n      const failures = toFailures(result, ctx, struct, value)\n\n      for (const failure of failures) {\n        yield { ...failure, refinement: name }\n      }\n    },\n  })\n}\n", "// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}", "export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;", "import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;", "import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;", "import rng from './rng.js';\nimport stringify from './stringify.js'; // **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nvar _nodeId;\n\nvar _clockseq; // Previous uuid creation time\n\n\nvar _lastMSecs = 0;\nvar _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || new Array(16);\n  options = options || {};\n  var node = options.node || _nodeId;\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    var seedBytes = options.random || (options.rng || rng)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  var msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || stringify(b);\n}\n\nexport default v1;", "import validate from './validate.js';\n\nfunction parse(uuid) {\n  if (!validate(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  var v;\n  var arr = new Uint8Array(16); // Parse ########-....-....-....-............\n\n  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n  arr[1] = v >>> 16 & 0xff;\n  arr[2] = v >>> 8 & 0xff;\n  arr[3] = v & 0xff; // Parse ........-####-....-....-............\n\n  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n  arr[5] = v & 0xff; // Parse ........-....-####-....-............\n\n  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n  arr[7] = v & 0xff; // Parse ........-....-....-####-............\n\n  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n  arr[9] = v & 0xff; // Parse ........-....-....-....-############\n  // (Use \"/\" to avoid 32-bit truncation when bit-shifting high-order bytes)\n\n  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;\n  arr[11] = v / 0x100000000 & 0xff;\n  arr[12] = v >>> 24 & 0xff;\n  arr[13] = v >>> 16 & 0xff;\n  arr[14] = v >>> 8 & 0xff;\n  arr[15] = v & 0xff;\n  return arr;\n}\n\nexport default parse;", "import stringify from './stringify.js';\nimport parse from './parse.js';\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  var bytes = [];\n\n  for (var i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nexport var DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexport var URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexport default function (name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    if (typeof value === 'string') {\n      value = stringToBytes(value);\n    }\n\n    if (typeof namespace === 'string') {\n      namespace = parse(namespace);\n    }\n\n    if (namespace.length !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    } // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =\n    // hashfunc([...namespace, ... value])`\n\n\n    var bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = hashfunc(bytes);\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      offset = offset || 0;\n\n      for (var i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n\n      return buf;\n    }\n\n    return stringify(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}", "/*\n * Browser-compatible JavaScript MD5\n *\n * Modification of JavaScript MD5\n * https://github.com/blueimp/JavaScript-MD5\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n *\n * Based on\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\nfunction md5(bytes) {\n  if (typeof bytes === 'string') {\n    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = new Uint8Array(msg.length);\n\n    for (var i = 0; i < msg.length; ++i) {\n      bytes[i] = msg.charCodeAt(i);\n    }\n  }\n\n  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));\n}\n/*\n * Convert an array of little-endian words to an array of bytes\n */\n\n\nfunction md5ToHexEncodedArray(input) {\n  var output = [];\n  var length32 = input.length * 32;\n  var hexTab = '0123456789abcdef';\n\n  for (var i = 0; i < length32; i += 8) {\n    var x = input[i >> 5] >>> i % 32 & 0xff;\n    var hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);\n    output.push(hex);\n  }\n\n  return output;\n}\n/**\n * Calculate output length with padding and bit length\n */\n\n\nfunction getOutputLength(inputLength8) {\n  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;\n}\n/*\n * Calculate the MD5 of an array of little-endian words, and a bit length.\n */\n\n\nfunction wordsToMd5(x, len) {\n  /* append padding */\n  x[len >> 5] |= 0x80 << len % 32;\n  x[getOutputLength(len) - 1] = len;\n  var a = 1732584193;\n  var b = -271733879;\n  var c = -1732584194;\n  var d = 271733878;\n\n  for (var i = 0; i < x.length; i += 16) {\n    var olda = a;\n    var oldb = b;\n    var oldc = c;\n    var oldd = d;\n    a = md5ff(a, b, c, d, x[i], 7, -680876936);\n    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);\n    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);\n    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);\n    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);\n    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);\n    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);\n    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);\n    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);\n    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);\n    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);\n    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);\n    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);\n    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);\n    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);\n    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);\n    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);\n    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);\n    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);\n    b = md5gg(b, c, d, a, x[i], 20, -373897302);\n    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);\n    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);\n    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);\n    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);\n    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);\n    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);\n    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);\n    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);\n    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);\n    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);\n    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);\n    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);\n    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);\n    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);\n    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);\n    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);\n    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);\n    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);\n    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);\n    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);\n    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);\n    d = md5hh(d, a, b, c, x[i], 11, -358537222);\n    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);\n    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);\n    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);\n    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);\n    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);\n    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);\n    a = md5ii(a, b, c, d, x[i], 6, -198630844);\n    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);\n    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);\n    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);\n    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);\n    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);\n    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);\n    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);\n    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);\n    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);\n    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);\n    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);\n    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);\n    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);\n    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);\n    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);\n    a = safeAdd(a, olda);\n    b = safeAdd(b, oldb);\n    c = safeAdd(c, oldc);\n    d = safeAdd(d, oldd);\n  }\n\n  return [a, b, c, d];\n}\n/*\n * Convert an array bytes to an array of little-endian words\n * Characters >255 have their high-byte silently ignored.\n */\n\n\nfunction bytesToWords(input) {\n  if (input.length === 0) {\n    return [];\n  }\n\n  var length8 = input.length * 8;\n  var output = new Uint32Array(getOutputLength(length8));\n\n  for (var i = 0; i < length8; i += 8) {\n    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;\n  }\n\n  return output;\n}\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\n\n\nfunction safeAdd(x, y) {\n  var lsw = (x & 0xffff) + (y & 0xffff);\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xffff;\n}\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\n\n\nfunction bitRotateLeft(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n}\n/*\n * These functions implement the four basic operations the algorithm uses.\n */\n\n\nfunction md5cmn(q, a, b, x, s, t) {\n  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);\n}\n\nfunction md5ff(a, b, c, d, x, s, t) {\n  return md5cmn(b & c | ~b & d, a, b, x, s, t);\n}\n\nfunction md5gg(a, b, c, d, x, s, t) {\n  return md5cmn(b & d | c & ~d, a, b, x, s, t);\n}\n\nfunction md5hh(a, b, c, d, x, s, t) {\n  return md5cmn(b ^ c ^ d, a, b, x, s, t);\n}\n\nfunction md5ii(a, b, c, d, x, s, t) {\n  return md5cmn(c ^ (b | ~d), a, b, x, s, t);\n}\n\nexport default md5;", "import v35 from './v35.js';\nimport md5 from './md5.js';\nvar v3 = v35('v3', 0x30, md5);\nexport default v3;", "import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;", "// Adapted from Chris Veness' SHA1 code at\n// http://www.movable-type.co.uk/scripts/sha1.html\nfunction f(s, x, y, z) {\n  switch (s) {\n    case 0:\n      return x & y ^ ~x & z;\n\n    case 1:\n      return x ^ y ^ z;\n\n    case 2:\n      return x & y ^ x & z ^ y & z;\n\n    case 3:\n      return x ^ y ^ z;\n  }\n}\n\nfunction ROTL(x, n) {\n  return x << n | x >>> 32 - n;\n}\n\nfunction sha1(bytes) {\n  var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n  var H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n\n  if (typeof bytes === 'string') {\n    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = [];\n\n    for (var i = 0; i < msg.length; ++i) {\n      bytes.push(msg.charCodeAt(i));\n    }\n  } else if (!Array.isArray(bytes)) {\n    // Convert Array-like to Array\n    bytes = Array.prototype.slice.call(bytes);\n  }\n\n  bytes.push(0x80);\n  var l = bytes.length / 4 + 2;\n  var N = Math.ceil(l / 16);\n  var M = new Array(N);\n\n  for (var _i = 0; _i < N; ++_i) {\n    var arr = new Uint32Array(16);\n\n    for (var j = 0; j < 16; ++j) {\n      arr[j] = bytes[_i * 64 + j * 4] << 24 | bytes[_i * 64 + j * 4 + 1] << 16 | bytes[_i * 64 + j * 4 + 2] << 8 | bytes[_i * 64 + j * 4 + 3];\n    }\n\n    M[_i] = arr;\n  }\n\n  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);\n  M[N - 1][14] = Math.floor(M[N - 1][14]);\n  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;\n\n  for (var _i2 = 0; _i2 < N; ++_i2) {\n    var W = new Uint32Array(80);\n\n    for (var t = 0; t < 16; ++t) {\n      W[t] = M[_i2][t];\n    }\n\n    for (var _t = 16; _t < 80; ++_t) {\n      W[_t] = ROTL(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);\n    }\n\n    var a = H[0];\n    var b = H[1];\n    var c = H[2];\n    var d = H[3];\n    var e = H[4];\n\n    for (var _t2 = 0; _t2 < 80; ++_t2) {\n      var s = Math.floor(_t2 / 20);\n      var T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[_t2] >>> 0;\n      e = d;\n      d = c;\n      c = ROTL(b, 30) >>> 0;\n      b = a;\n      a = T;\n    }\n\n    H[0] = H[0] + a >>> 0;\n    H[1] = H[1] + b >>> 0;\n    H[2] = H[2] + c >>> 0;\n    H[3] = H[3] + d >>> 0;\n    H[4] = H[4] + e >>> 0;\n  }\n\n  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];\n}\n\nexport default sha1;", "import v35 from './v35.js';\nimport sha1 from './sha1.js';\nvar v5 = v35('v5', 0x50, sha1);\nexport default v5;", "export default '00000000-0000-0000-0000-000000000000';", "import validate from './validate.js';\n\nfunction version(uuid) {\n  if (!validate(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  return parseInt(uuid.substr(14, 1), 16);\n}\n\nexport default version;", "export { default as v1 } from './v1.js';\nexport { default as v3 } from './v3.js';\nexport { default as v4 } from './v4.js';\nexport { default as v5 } from './v5.js';\nexport { default as NIL } from './nil.js';\nexport { default as version } from './version.js';\nexport { default as validate } from './validate.js';\nexport { default as stringify } from './stringify.js';\nexport { default as parse } from './parse.js';", "'use strict';\n\nconst uuid = require('uuid').v4;\n\n/**\n *  Generates a JSON-RPC 1.0 or 2.0 request\n *  @param {String} method Name of method to call\n *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value\n *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation\n *  @param {Object} [options]\n *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID\n *  @throws {TypeError} If any of the parameters are invalid\n *  @return {Object} A JSON-RPC 1.0 or 2.0 request\n *  @memberOf Utils\n */\nconst generateRequest = function(method, params, id, options) {\n  if(typeof method !== 'string') {\n    throw new TypeError(method + ' must be a string');\n  }\n\n  options = options || {};\n\n  // check valid version provided\n  const version = typeof options.version === 'number' ? options.version : 2;\n  if (version !== 1 && version !== 2) {\n    throw new TypeError(version + ' must be 1 or 2');\n  }\n\n  const request = {\n    method: method\n  };\n\n  if(version === 2) {\n    request.jsonrpc = '2.0';\n  }\n\n  if(params) {\n    // params given, but invalid?\n    if(typeof params !== 'object' && !Array.isArray(params)) {\n      throw new TypeError(params + ' must be an object, array or omitted');\n    }\n    request.params = params;\n  }\n\n  // if id was left out, generate one (null means explicit notification)\n  if(typeof(id) === 'undefined') {\n    const generator = typeof options.generator === 'function' ? options.generator : function() { return uuid(); };\n    request.id = generator(request, options);\n  } else if (version === 2 && id === null) {\n    // we have a version 2 notification\n    if (options.notificationIdNull) {\n      request.id = null; // id will not be set at all unless option provided\n    }\n  } else {\n    request.id = id;\n  }\n\n  return request;\n};\n\nmodule.exports = generateRequest;\n", "'use strict';\n\nconst uuid = require('uuid').v4;\nconst generateRequest = require('../../generateRequest');\n\n/**\n * Constructor for a Jayson Browser Client that does not depend any node.js core libraries\n * @class ClientBrowser\n * @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback\n * @param {Object} [options]\n * @param {Function} [options.reviver] Reviver function for JSON\n * @param {Function} [options.replacer] Replacer function for JSON\n * @param {Number} [options.version=2] JSON-RPC version to use (1|2)\n * @param {Function} [options.generator] Function to use for generating request IDs\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n * @return {ClientBrowser}\n */\nconst ClientBrowser = function(callServer, options) {\n  if(!(this instanceof ClientBrowser)) {\n    return new ClientBrowser(callServer, options);\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  this.options = {\n    reviver: typeof options.reviver !== 'undefined' ? options.reviver : null,\n    replacer: typeof options.replacer !== 'undefined' ? options.replacer : null,\n    generator: typeof options.generator !== 'undefined' ? options.generator : function() { return uuid(); },\n    version: typeof options.version !== 'undefined' ? options.version : 2,\n    notificationIdNull: typeof options.notificationIdNull === 'boolean' ? options.notificationIdNull : false,\n  };\n\n  this.callServer = callServer;\n};\n\nmodule.exports = ClientBrowser;\n\n/**\n *  Creates a request and dispatches it if given a callback.\n *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String\n *  @param {Array|Object} [params] Parameters for the method\n *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request\n *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.\n *  @throws {TypeError} Invalid parameters\n *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request\n */\nClientBrowser.prototype.request = function(method, params, id, callback) {\n  const self = this;\n  let request = null;\n\n  // is this a batch request?\n  const isBatch = Array.isArray(method) && typeof params === 'function';\n\n  if (this.options.version === 1 && isBatch) {\n    throw new TypeError('JSON-RPC 1.0 does not support batching');\n  }\n\n  // is this a raw request?\n  const isRaw = !isBatch && method && typeof method === 'object' && typeof params === 'function';\n\n  if(isBatch || isRaw) {\n    callback = params;\n    request = method;\n  } else {\n    if(typeof id === 'function') {\n      callback = id;\n      // specifically undefined because \"null\" is a notification request\n      id = undefined;\n    }\n\n    const hasCallback = typeof callback === 'function';\n\n    try {\n      request = generateRequest(method, params, id, {\n        generator: this.options.generator,\n        version: this.options.version,\n        notificationIdNull: this.options.notificationIdNull,\n      });\n    } catch(err) {\n      if(hasCallback) {\n        return callback(err);\n      }\n      throw err;\n    }\n\n    // no callback means we should just return a raw request\n    if(!hasCallback) {\n      return request;\n    }\n\n  }\n\n  let message;\n  try {\n    message = JSON.stringify(request, this.options.replacer);\n  } catch(err) {\n    return callback(err);\n  }\n\n  this.callServer(message, function(err, response) {\n    self._parseResponse(err, response, callback);\n  });\n\n  // always return the raw request\n  return request;\n};\n\n/**\n * Parses a response from a server\n * @param {Object} err Error to pass on that is unrelated to the actual response\n * @param {String} responseText JSON-RPC 1.0 or 2.0 response\n * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters\n * @private\n */\nClientBrowser.prototype._parseResponse = function(err, responseText, callback) {\n  if(err) {\n    callback(err);\n    return;\n  }\n\n  if(!responseText) {\n    // empty response text, assume that is correct because it could be a\n    // notification which jayson does not give any body for\n    return callback();\n  }\n\n  let response;\n  try {\n    response = JSON.parse(responseText, this.options.reviver);\n  } catch(err) {\n    return callback(err);\n  }\n\n  if(callback.length === 3) {\n    // if callback length is 3, we split callback arguments on error and response\n\n    // is batch response?\n    if(Array.isArray(response)) {\n\n      // neccesary to split strictly on validity according to spec here\n      const isError = function(res) {\n        return typeof res.error !== 'undefined';\n      };\n\n      const isNotError = function (res) {\n        return !isError(res);\n      };\n\n      return callback(null, response.filter(isError), response.filter(isNotError));\n    \n    } else {\n\n      // split regardless of validity\n      return callback(null, response.error, response.result);\n    \n    }\n  \n  }\n\n  callback(null, response);\n};\n", "function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nmodule.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}\nmodule.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nmodule.exports = _classCallCheck, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nmodule.exports = _toPrimitive, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "var _typeof = require(\"./typeof.js\")[\"default\"];\nvar toPrimitive = require(\"./toPrimitive.js\");\nfunction _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nmodule.exports = _toPropertyKey, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "var toPropertyKey = require(\"./toPropertyKey.js\");\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nmodule.exports = _createClass, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _setPrototypeOf(o, p);\n}\nmodule.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "var setPrototypeOf = require(\"./setPrototypeOf.js\");\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\nmodule.exports = _inherits, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nmodule.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "var _typeof = require(\"./typeof.js\")[\"default\"];\nvar assertThisInitialized = require(\"./assertThisInitialized.js\");\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return assertThisInitialized(self);\n}\nmodule.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _getPrototypeOf(o);\n}\nmodule.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n", "/**\n * \"Client\" wraps \"ws\" or a browser-implemented \"WebSocket\" library\n * according to the environment providing JSON RPC 2.0 support on top.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar __rest = void 0 && (void 0).__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}; // @ts-ignore\n\n\nvar CommonClient = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(CommonClient, _EventEmitter);\n\n  var _super = _createSuper(CommonClient);\n\n  /**\n   * Instantiate a Client class.\n   * @constructor\n   * @param {webSocketFactory} webSocketFactory - factory method for WebSocket\n   * @param {String} address - url to a websocket server\n   * @param {Object} options - ws options object with reconnect parameters\n   * @param {Function} generate_request_id - custom generation request Id\n   * @return {CommonClient}\n   */\n  function CommonClient(webSocketFactory) {\n    var _this;\n\n    var address = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"ws://localhost:8080\";\n\n    var _a = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var generate_request_id = arguments.length > 3 ? arguments[3] : undefined;\n    (0, _classCallCheck2[\"default\"])(this, CommonClient);\n\n    var _a$autoconnect = _a.autoconnect,\n        autoconnect = _a$autoconnect === void 0 ? true : _a$autoconnect,\n        _a$reconnect = _a.reconnect,\n        reconnect = _a$reconnect === void 0 ? true : _a$reconnect,\n        _a$reconnect_interval = _a.reconnect_interval,\n        reconnect_interval = _a$reconnect_interval === void 0 ? 1000 : _a$reconnect_interval,\n        _a$max_reconnects = _a.max_reconnects,\n        max_reconnects = _a$max_reconnects === void 0 ? 5 : _a$max_reconnects,\n        rest_options = __rest(_a, [\"autoconnect\", \"reconnect\", \"reconnect_interval\", \"max_reconnects\"]);\n\n    _this = _super.call(this);\n    _this.webSocketFactory = webSocketFactory;\n    _this.queue = {};\n    _this.rpc_id = 0;\n    _this.address = address;\n    _this.autoconnect = autoconnect;\n    _this.ready = false;\n    _this.reconnect = reconnect;\n    _this.reconnect_timer_id = undefined;\n    _this.reconnect_interval = reconnect_interval;\n    _this.max_reconnects = max_reconnects;\n    _this.rest_options = rest_options;\n    _this.current_reconnects = 0;\n\n    _this.generate_request_id = generate_request_id || function () {\n      return ++_this.rpc_id;\n    };\n\n    if (_this.autoconnect) _this._connect(_this.address, Object.assign({\n      autoconnect: _this.autoconnect,\n      reconnect: _this.reconnect,\n      reconnect_interval: _this.reconnect_interval,\n      max_reconnects: _this.max_reconnects\n    }, _this.rest_options));\n    return _this;\n  }\n  /**\n   * Connects to a defined server if not connected already.\n   * @method\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(CommonClient, [{\n    key: \"connect\",\n    value: function connect() {\n      if (this.socket) return;\n\n      this._connect(this.address, Object.assign({\n        autoconnect: this.autoconnect,\n        reconnect: this.reconnect,\n        reconnect_interval: this.reconnect_interval,\n        max_reconnects: this.max_reconnects\n      }, this.rest_options));\n    }\n    /**\n     * Calls a registered RPC method on server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object|Array} params - optional method parameters\n     * @param {Number} timeout - RPC reply timeout value\n     * @param {Object} ws_opts - options passed to ws\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"call\",\n    value: function call(method, params, timeout, ws_opts) {\n      var _this2 = this;\n\n      if (!ws_opts && \"object\" === (0, _typeof2[\"default\"])(timeout)) {\n        ws_opts = timeout;\n        timeout = null;\n      }\n\n      return new Promise(function (resolve, reject) {\n        if (!_this2.ready) return reject(new Error(\"socket not ready\"));\n\n        var rpc_id = _this2.generate_request_id(method, params);\n\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null,\n          id: rpc_id\n        };\n\n        _this2.socket.send(JSON.stringify(message), ws_opts, function (error) {\n          if (error) return reject(error);\n          _this2.queue[rpc_id] = {\n            promise: [resolve, reject]\n          };\n\n          if (timeout) {\n            _this2.queue[rpc_id].timeout = setTimeout(function () {\n              delete _this2.queue[rpc_id];\n              reject(new Error(\"reply timeout\"));\n            }, timeout);\n          }\n        });\n      });\n    }\n    /**\n     * Logins with the other side of the connection.\n     * @method\n     * @param {Object} params - Login credentials object\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"login\",\n    value: function () {\n      var _login = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(params) {\n        var resp;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.call(\"rpc.login\", params);\n\n              case 2:\n                resp = _context.sent;\n\n                if (resp) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error(\"authentication failed\");\n\n              case 5:\n                return _context.abrupt(\"return\", resp);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function login(_x) {\n        return _login.apply(this, arguments);\n      }\n\n      return login;\n    }()\n    /**\n     * Fetches a list of client's methods registered on server.\n     * @method\n     * @return {Array}\n     */\n\n  }, {\n    key: \"listMethods\",\n    value: function () {\n      var _listMethods = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2() {\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.call(\"__listMethods\");\n\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function listMethods() {\n        return _listMethods.apply(this, arguments);\n      }\n\n      return listMethods;\n    }()\n    /**\n     * Sends a JSON-RPC 2.0 notification to server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object} params - optional method parameters\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"notify\",\n    value: function notify(method, params) {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!_this3.ready) return reject(new Error(\"socket not ready\"));\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null\n        };\n\n        _this3.socket.send(JSON.stringify(message), function (error) {\n          if (error) return reject(error);\n          resolve();\n        });\n      });\n    }\n    /**\n     * Subscribes for a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function () {\n      var _subscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee3(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context3.next = 3;\n                return this.call(\"rpc.on\", event);\n\n              case 3:\n                result = _context3.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed subscribing to an event '\" + event + \"' with: \" + result[event]);\n\n              case 6:\n                return _context3.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function subscribe(_x2) {\n        return _subscribe.apply(this, arguments);\n      }\n\n      return subscribe;\n    }()\n    /**\n     * Unsubscribes from a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function () {\n      var _unsubscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee4(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context4.next = 3;\n                return this.call(\"rpc.off\", event);\n\n              case 3:\n                result = _context4.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed unsubscribing from an event with: \" + result);\n\n              case 6:\n                return _context4.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function unsubscribe(_x3) {\n        return _unsubscribe.apply(this, arguments);\n      }\n\n      return unsubscribe;\n    }()\n    /**\n     * Closes a WebSocket connection gracefully.\n     * @method\n     * @param {Number} code - socket close code\n     * @param {String} data - optional data to be sent before closing\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, data) {\n      this.socket.close(code || 1000, data);\n    }\n    /**\n     * Connection/Message handler.\n     * @method\n     * @private\n     * @param {String} address - WebSocket API address\n     * @param {Object} options - ws options object\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"_connect\",\n    value: function _connect(address, options) {\n      var _this4 = this;\n\n      clearTimeout(this.reconnect_timer_id);\n      this.socket = this.webSocketFactory(address, options);\n      this.socket.addEventListener(\"open\", function () {\n        _this4.ready = true;\n\n        _this4.emit(\"open\");\n\n        _this4.current_reconnects = 0;\n      });\n      this.socket.addEventListener(\"message\", function (_ref) {\n        var message = _ref.data;\n        if (message instanceof ArrayBuffer) message = Buffer.from(message).toString();\n\n        try {\n          message = JSON.parse(message);\n        } catch (error) {\n          return;\n        } // check if any listeners are attached and forward event\n\n\n        if (message.notification && _this4.listeners(message.notification).length) {\n          if (!Object.keys(message.params).length) return _this4.emit(message.notification);\n          var args = [message.notification];\n          if (message.params.constructor === Object) args.push(message.params);else // using for-loop instead of unshift/spread because performance is better\n            for (var i = 0; i < message.params.length; i++) {\n              args.push(message.params[i]);\n            } // run as microtask so that pending queue messages are resolved first\n          // eslint-disable-next-line prefer-spread\n\n          return Promise.resolve().then(function () {\n            _this4.emit.apply(_this4, args);\n          });\n        }\n\n        if (!_this4.queue[message.id]) {\n          // general JSON RPC 2.0 events\n          if (message.method && message.params) {\n            // run as microtask so that pending queue messages are resolved first\n            return Promise.resolve().then(function () {\n              _this4.emit(message.method, message.params);\n            });\n          }\n\n          return;\n        } // reject early since server's response is invalid\n\n\n        if (\"error\" in message === \"result\" in message) _this4.queue[message.id].promise[1](new Error(\"Server response malformed. Response must include either \\\"result\\\"\" + \" or \\\"error\\\", but not both.\"));\n        if (_this4.queue[message.id].timeout) clearTimeout(_this4.queue[message.id].timeout);\n        if (message.error) _this4.queue[message.id].promise[1](message.error);else _this4.queue[message.id].promise[0](message.result);\n        delete _this4.queue[message.id];\n      });\n      this.socket.addEventListener(\"error\", function (error) {\n        return _this4.emit(\"error\", error);\n      });\n      this.socket.addEventListener(\"close\", function (_ref2) {\n        var code = _ref2.code,\n            reason = _ref2.reason;\n        if (_this4.ready) // Delay close event until internal state is updated\n          setTimeout(function () {\n            return _this4.emit(\"close\", code, reason);\n          }, 0);\n        _this4.ready = false;\n        _this4.socket = undefined;\n        if (code === 1000) return;\n        _this4.current_reconnects++;\n        if (_this4.reconnect && (_this4.max_reconnects > _this4.current_reconnects || _this4.max_reconnects === 0)) _this4.reconnect_timer_id = setTimeout(function () {\n          return _this4._connect(address, options);\n        }, _this4.reconnect_interval);\n      });\n    }\n  }]);\n  return CommonClient;\n}(_eventemitter.EventEmitter);\n\nexports[\"default\"] = CommonClient;", "/**\n * WebSocket implements a browser-side WebSocket specification.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar WebSocketBrowserImpl = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(WebSocketBrowserImpl, _EventEmitter);\n\n  var _super = _createSuper(WebSocketBrowserImpl);\n\n  /** Instantiate a WebSocket class\n   * @constructor\n   * @param {String} address - url to a websocket server\n   * @param {(Object)} options - websocket options\n   * @param {(String|Array)} protocols - a list of protocols\n   * @return {WebSocketBrowserImpl} - returns a WebSocket instance\n   */\n  function WebSocketBrowserImpl(address, options, protocols) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, WebSocketBrowserImpl);\n    _this = _super.call(this);\n    _this.socket = new window.WebSocket(address, protocols);\n\n    _this.socket.onopen = function () {\n      return _this.emit(\"open\");\n    };\n\n    _this.socket.onmessage = function (event) {\n      return _this.emit(\"message\", event.data);\n    };\n\n    _this.socket.onerror = function (error) {\n      return _this.emit(\"error\", error);\n    };\n\n    _this.socket.onclose = function (event) {\n      _this.emit(\"close\", event.code, event.reason);\n    };\n\n    return _this;\n  }\n  /**\n   * Sends data through a websocket connection\n   * @method\n   * @param {(String|Object)} data - data to be sent via websocket\n   * @param {Object} optionsOrCallback - ws options\n   * @param {Function} callback - a callback called once the data is sent\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(WebSocketBrowserImpl, [{\n    key: \"send\",\n    value: function send(data, optionsOrCallback, callback) {\n      var cb = callback || optionsOrCallback;\n\n      try {\n        this.socket.send(data);\n        cb();\n      } catch (error) {\n        cb(error);\n      }\n    }\n    /**\n     * Closes an underlying socket\n     * @method\n     * @param {Number} code - status code explaining why the connection is being closed\n     * @param {String} reason - a description why the connection is closing\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, reason) {\n      this.socket.close(code, reason);\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(type, listener, options) {\n      this.socket.addEventListener(type, listener, options);\n    }\n  }]);\n  return WebSocketBrowserImpl;\n}(_eventemitter.EventEmitter);\n/**\n * factory method for common WebSocket instance\n * @method\n * @param {String} address - url to a websocket server\n * @param {(Object)} options - websocket options\n * @return {Undefined}\n */\n\n\nfunction _default(address, options) {\n  return new WebSocketBrowserImpl(address, options);\n}", "import assert from './_assert.js';\nimport u64 from './_u64.js';\nimport {\n  Hash,\n  u32,\n  Input,\n  toBytes,\n  wrapConstructor,\n  wrapConstructorWithOpts,\n  HashXOF,\n} from './utils.js';\n\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA]: [number[], number[], bigint[]] = [[], [], []];\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _7n = BigInt(7);\nconst _256n = BigInt(256);\nconst _0x71n = BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n  // Pi\n  [x, y] = [y, (2 * x + 3 * y) % 5];\n  SHA3_PI.push(2 * (5 * y + x));\n  // Rotational\n  SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n  // Iota\n  let t = _0n;\n  for (let j = 0; j < 7; j++) {\n    R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n    if (R & _2n) t ^= _1n << ((_1n << BigInt(j)) - _1n);\n  }\n  _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = u64.split(_SHA3_IOTA, true);\n\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h: number, l: number, s: number) =>\n  s > 32 ? u64.rotlBH(h, l, s) : u64.rotlSH(h, l, s);\nconst rotlL = (h: number, l: number, s: number) =>\n  s > 32 ? u64.rotlBL(h, l, s) : u64.rotlSL(h, l, s);\n\n// Same as keccakf1600, but allows to skip some rounds\nexport function keccakP(s: Uint32Array, rounds: number = 24) {\n  const B = new Uint32Array(5 * 2);\n  // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n  for (let round = 24 - rounds; round < 24; round++) {\n    // Theta θ\n    for (let x = 0; x < 10; x++) B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n    for (let x = 0; x < 10; x += 2) {\n      const idx1 = (x + 8) % 10;\n      const idx0 = (x + 2) % 10;\n      const B0 = B[idx0];\n      const B1 = B[idx0 + 1];\n      const Th = rotlH(B0, B1, 1) ^ B[idx1];\n      const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n      for (let y = 0; y < 50; y += 10) {\n        s[x + y] ^= Th;\n        s[x + y + 1] ^= Tl;\n      }\n    }\n    // Rho (ρ) and Pi (π)\n    let curH = s[2];\n    let curL = s[3];\n    for (let t = 0; t < 24; t++) {\n      const shift = SHA3_ROTL[t];\n      const Th = rotlH(curH, curL, shift);\n      const Tl = rotlL(curH, curL, shift);\n      const PI = SHA3_PI[t];\n      curH = s[PI];\n      curL = s[PI + 1];\n      s[PI] = Th;\n      s[PI + 1] = Tl;\n    }\n    // Chi (χ)\n    for (let y = 0; y < 50; y += 10) {\n      for (let x = 0; x < 10; x++) B[x] = s[y + x];\n      for (let x = 0; x < 10; x++) s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n    }\n    // Iota (ι)\n    s[0] ^= SHA3_IOTA_H[round];\n    s[1] ^= SHA3_IOTA_L[round];\n  }\n  B.fill(0);\n}\n\nexport class Keccak extends Hash<Keccak> implements HashXOF<Keccak> {\n  protected state: Uint8Array;\n  protected pos = 0;\n  protected posOut = 0;\n  protected finished = false;\n  protected state32: Uint32Array;\n  protected destroyed = false;\n  // NOTE: we accept arguments in bytes instead of bits here.\n  constructor(\n    public blockLen: number,\n    public suffix: number,\n    public outputLen: number,\n    protected enableXOF = false,\n    protected rounds: number = 24\n  ) {\n    super();\n    // Can be passed from user as dkLen\n    assert.number(outputLen);\n    // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n    if (0 >= this.blockLen || this.blockLen >= 200)\n      throw new Error('Sha3 supports only keccak-f1600 function');\n    this.state = new Uint8Array(200);\n    this.state32 = u32(this.state);\n  }\n  protected keccak() {\n    keccakP(this.state32, this.rounds);\n    this.posOut = 0;\n    this.pos = 0;\n  }\n  update(data: Input) {\n    assert.exists(this);\n    const { blockLen, state } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      for (let i = 0; i < take; i++) state[this.pos++] ^= data[pos++];\n      if (this.pos === blockLen) this.keccak();\n    }\n    return this;\n  }\n  protected finish() {\n    if (this.finished) return;\n    this.finished = true;\n    const { state, suffix, pos, blockLen } = this;\n    // Do the padding\n    state[pos] ^= suffix;\n    if ((suffix & 0x80) !== 0 && pos === blockLen - 1) this.keccak();\n    state[blockLen - 1] ^= 0x80;\n    this.keccak();\n  }\n  protected writeInto(out: Uint8Array): Uint8Array {\n    assert.exists(this, false);\n    assert.bytes(out);\n    this.finish();\n    const bufferOut = this.state;\n    const { blockLen } = this;\n    for (let pos = 0, len = out.length; pos < len; ) {\n      if (this.posOut >= blockLen) this.keccak();\n      const take = Math.min(blockLen - this.posOut, len - pos);\n      out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n      this.posOut += take;\n      pos += take;\n    }\n    return out;\n  }\n  xofInto(out: Uint8Array): Uint8Array {\n    // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n    if (!this.enableXOF) throw new Error('XOF is not possible for this instance');\n    return this.writeInto(out);\n  }\n  xof(bytes: number): Uint8Array {\n    assert.number(bytes);\n    return this.xofInto(new Uint8Array(bytes));\n  }\n  digestInto(out: Uint8Array) {\n    assert.output(out, this);\n    if (this.finished) throw new Error('digest() was already called');\n    this.writeInto(out);\n    this.destroy();\n    return out;\n  }\n  digest() {\n    return this.digestInto(new Uint8Array(this.outputLen));\n  }\n  destroy() {\n    this.destroyed = true;\n    this.state.fill(0);\n  }\n  _cloneInto(to?: Keccak): Keccak {\n    const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n    to ||= new Keccak(blockLen, suffix, outputLen, enableXOF, rounds);\n    to.state32.set(this.state32);\n    to.pos = this.pos;\n    to.posOut = this.posOut;\n    to.finished = this.finished;\n    to.rounds = rounds;\n    // Suffix can change in cSHAKE\n    to.suffix = suffix;\n    to.outputLen = outputLen;\n    to.enableXOF = enableXOF;\n    to.destroyed = this.destroyed;\n    return to;\n  }\n}\n\nconst gen = (suffix: number, blockLen: number, outputLen: number) =>\n  wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\n\nexport const sha3_224 = gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexport const sha3_256 = gen(0x06, 136, 256 / 8);\nexport const sha3_384 = gen(0x06, 104, 384 / 8);\nexport const sha3_512 = gen(0x06, 72, 512 / 8);\nexport const keccak_224 = gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexport const keccak_256 = gen(0x01, 136, 256 / 8);\nexport const keccak_384 = gen(0x01, 104, 384 / 8);\nexport const keccak_512 = gen(0x01, 72, 512 / 8);\n\nexport type ShakeOpts = { dkLen?: number };\n\nconst genShake = (suffix: number, blockLen: number, outputLen: number) =>\n  wrapConstructorWithOpts<Keccak, ShakeOpts>(\n    (opts: ShakeOpts = {}) =>\n      new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true)\n  );\n\nexport const shake128 = genShake(0x1f, 168, 128 / 8);\nexport const shake256 = genShake(0x1f, 136, 256 / 8);\n", "import assert from './_assert.js';\nimport { Hash, CHash, Input, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nclass HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\n  oHash: T;\n  iHash: T;\n  blockLen: number;\n  outputLen: number;\n  private finished = false;\n  private destroyed = false;\n\n  constructor(hash: CHash, _key: Input) {\n    super();\n    assert.hash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create() as T;\n    if (typeof this.iHash.update !== 'function')\n      throw new TypeError('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create() as T;\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    pad.fill(0);\n  }\n  update(buf: Input) {\n    assert.exists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    assert.exists(this);\n    assert.bytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest() {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to ||= Object.create(Object.getPrototypeOf(this), {});\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n    to = to as this;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  destroy() {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash: CHash, key: Input, message: Input): Uint8Array =>\n  new HMAC<any>(hash, key).update(message).digest();\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\n", "/*! noble-secp256k1 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _3n = BigInt(3);\nconst _8n = BigInt(8);\nconst CURVE = Object.freeze({\n    a: _0n,\n    b: BigInt(7),\n    P: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f'),\n    n: BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141'),\n    h: _1n,\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n});\nconst divNearest = (a, b) => (a + b / _2n) / b;\nconst endo = {\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n    splitScalar(k) {\n        const { n } = CURVE;\n        const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n        const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n        const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n        const b2 = a1;\n        const POW_2_128 = BigInt('0x100000000000000000000000000000000');\n        const c1 = divNearest(b2 * k, n);\n        const c2 = divNearest(-b1 * k, n);\n        let k1 = mod(k - c1 * a1 - c2 * a2, n);\n        let k2 = mod(-c1 * b1 - c2 * b2, n);\n        const k1neg = k1 > POW_2_128;\n        const k2neg = k2 > POW_2_128;\n        if (k1neg)\n            k1 = n - k1;\n        if (k2neg)\n            k2 = n - k2;\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\n            throw new Error('splitScalarEndo: Endomorphism failed, k=' + k);\n        }\n        return { k1neg, k1, k2neg, k2 };\n    },\n};\nconst fieldLen = 32;\nconst groupLen = 32;\nconst hashLen = 32;\nconst compressedLen = fieldLen + 1;\nconst uncompressedLen = 2 * fieldLen + 1;\nexport { CURVE };\nfunction weierstrass(x) {\n    const { a, b } = CURVE;\n    const x2 = mod(x * x);\n    const x3 = mod(x2 * x);\n    return mod(x3 + a * x + b);\n}\nconst USE_ENDOMORPHISM = CURVE.a === _0n;\nclass ShaError extends Error {\n    constructor(message) {\n        super(message);\n    }\n}\nfunction assertJacPoint(other) {\n    if (!(other instanceof JacobianPoint))\n        throw new TypeError('JacobianPoint expected');\n}\nclass JacobianPoint {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('JacobianPoint#fromAffine: expected Point');\n        }\n        if (p.equals(Point.ZERO))\n            return JacobianPoint.ZERO;\n        return new JacobianPoint(p.x, p.y, _1n);\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return JacobianPoint.toAffineBatch(points).map(JacobianPoint.fromAffine);\n    }\n    equals(other) {\n        assertJacPoint(other);\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const Z1Z1 = mod(Z1 * Z1);\n        const Z2Z2 = mod(Z2 * Z2);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        return U1 === U2 && S1 === S2;\n    }\n    negate() {\n        return new JacobianPoint(this.x, mod(-this.y), this.z);\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const A = mod(X1 * X1);\n        const B = mod(Y1 * Y1);\n        const C = mod(B * B);\n        const x1b = X1 + B;\n        const D = mod(_2n * (mod(x1b * x1b) - A - C));\n        const E = mod(_3n * A);\n        const F = mod(E * E);\n        const X3 = mod(F - _2n * D);\n        const Y3 = mod(E * (D - X3) - _8n * C);\n        const Z3 = mod(_2n * Y1 * Z1);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    add(other) {\n        assertJacPoint(other);\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        if (X2 === _0n || Y2 === _0n)\n            return this;\n        if (X1 === _0n || Y1 === _0n)\n            return other;\n        const Z1Z1 = mod(Z1 * Z1);\n        const Z2Z2 = mod(Z2 * Z2);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        const H = mod(U2 - U1);\n        const r = mod(S2 - S1);\n        if (H === _0n) {\n            if (r === _0n) {\n                return this.double();\n            }\n            else {\n                return JacobianPoint.ZERO;\n            }\n        }\n        const HH = mod(H * H);\n        const HHH = mod(H * HH);\n        const V = mod(U1 * HH);\n        const X3 = mod(r * r - HHH - _2n * V);\n        const Y3 = mod(r * (V - X3) - S1 * HHH);\n        const Z3 = mod(Z1 * Z2 * H);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiplyUnsafe(scalar) {\n        const P0 = JacobianPoint.ZERO;\n        if (typeof scalar === 'bigint' && scalar === _0n)\n            return P0;\n        let n = normalizeScalar(scalar);\n        if (n === _1n)\n            return this;\n        if (!USE_ENDOMORPHISM) {\n            let p = P0;\n            let d = this;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        }\n        let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n        let k1p = P0;\n        let k2p = P0;\n        let d = this;\n        while (k1 > _0n || k2 > _0n) {\n            if (k1 & _1n)\n                k1p = k1p.add(d);\n            if (k2 & _1n)\n                k2p = k2p.add(d);\n            d = d.double();\n            k1 >>= _1n;\n            k2 >>= _1n;\n        }\n        if (k1neg)\n            k1p = k1p.negate();\n        if (k2neg)\n            k2p = k2p.negate();\n        k2p = new JacobianPoint(mod(k2p.x * endo.beta), k2p.y, k2p.z);\n        return k1p.add(k2p);\n    }\n    precomputeWindow(W) {\n        const windows = USE_ENDOMORPHISM ? 128 / W + 1 : 256 / W + 1;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(JacobianPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = JacobianPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = JacobianPoint.ZERO;\n        let f = JacobianPoint.BASE;\n        const windows = 1 + (USE_ENDOMORPHISM ? 128 / W : 256 / W);\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            const offset1 = offset;\n            const offset2 = offset + Math.abs(wbits) - 1;\n            const cond1 = window % 2 !== 0;\n            const cond2 = wbits < 0;\n            if (wbits === 0) {\n                f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n            }\n            else {\n                p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n            }\n        }\n        return { p, f };\n    }\n    multiply(scalar, affinePoint) {\n        let n = normalizeScalar(scalar);\n        let point;\n        let fake;\n        if (USE_ENDOMORPHISM) {\n            const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n            let { p: k1p, f: f1p } = this.wNAF(k1, affinePoint);\n            let { p: k2p, f: f2p } = this.wNAF(k2, affinePoint);\n            k1p = constTimeNegate(k1neg, k1p);\n            k2p = constTimeNegate(k2neg, k2p);\n            k2p = new JacobianPoint(mod(k2p.x * endo.beta), k2p.y, k2p.z);\n            point = k1p.add(k2p);\n            fake = f1p.add(f2p);\n        }\n        else {\n            const { p, f } = this.wNAF(n, affinePoint);\n            point = p;\n            fake = f;\n        }\n        return JacobianPoint.normalizeZ([point, fake])[0];\n    }\n    toAffine(invZ) {\n        const { x, y, z } = this;\n        const is0 = this.equals(JacobianPoint.ZERO);\n        if (invZ == null)\n            invZ = is0 ? _8n : invert(z);\n        const iz1 = invZ;\n        const iz2 = mod(iz1 * iz1);\n        const iz3 = mod(iz2 * iz1);\n        const ax = mod(x * iz2);\n        const ay = mod(y * iz3);\n        const zz = mod(z * iz1);\n        if (is0)\n            return Point.ZERO;\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n}\nJacobianPoint.BASE = new JacobianPoint(CURVE.Gx, CURVE.Gy, _1n);\nJacobianPoint.ZERO = new JacobianPoint(_0n, _1n, _0n);\nfunction constTimeNegate(condition, item) {\n    const neg = item.negate();\n    return condition ? neg : item;\n}\nconst pointPrecomputes = new WeakMap();\nexport class Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    hasEvenY() {\n        return this.y % _2n === _0n;\n    }\n    static fromCompressedHex(bytes) {\n        const isShort = bytes.length === 32;\n        const x = bytesToNumber(isShort ? bytes : bytes.subarray(1));\n        if (!isValidFieldElement(x))\n            throw new Error('Point is not on curve');\n        const y2 = weierstrass(x);\n        let y = sqrtMod(y2);\n        const isYOdd = (y & _1n) === _1n;\n        if (isShort) {\n            if (isYOdd)\n                y = mod(-y);\n        }\n        else {\n            const isFirstByteOdd = (bytes[0] & 1) === 1;\n            if (isFirstByteOdd !== isYOdd)\n                y = mod(-y);\n        }\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromUncompressedHex(bytes) {\n        const x = bytesToNumber(bytes.subarray(1, fieldLen + 1));\n        const y = bytesToNumber(bytes.subarray(fieldLen + 1, fieldLen * 2 + 1));\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        const len = bytes.length;\n        const header = bytes[0];\n        if (len === fieldLen)\n            return this.fromCompressedHex(bytes);\n        if (len === compressedLen && (header === 0x02 || header === 0x03)) {\n            return this.fromCompressedHex(bytes);\n        }\n        if (len === uncompressedLen && header === 0x04)\n            return this.fromUncompressedHex(bytes);\n        throw new Error(`Point.fromHex: received invalid point. Expected 32-${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes, not ${len}`);\n    }\n    static fromPrivateKey(privateKey) {\n        return Point.BASE.multiply(normalizePrivateKey(privateKey));\n    }\n    static fromSignature(msgHash, signature, recovery) {\n        const { r, s } = normalizeSignature(signature);\n        if (![0, 1, 2, 3].includes(recovery))\n            throw new Error('Cannot recover: invalid recovery bit');\n        const h = truncateHash(ensureBytes(msgHash));\n        const { n } = CURVE;\n        const radj = recovery === 2 || recovery === 3 ? r + n : r;\n        const rinv = invert(radj, n);\n        const u1 = mod(-h * rinv, n);\n        const u2 = mod(s * rinv, n);\n        const prefix = recovery & 1 ? '03' : '02';\n        const R = Point.fromHex(prefix + numTo32bStr(radj));\n        const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2);\n        if (!Q)\n            throw new Error('Cannot recover signature: point at infinify');\n        Q.assertValidity();\n        return Q;\n    }\n    toRawBytes(isCompressed = false) {\n        return hexToBytes(this.toHex(isCompressed));\n    }\n    toHex(isCompressed = false) {\n        const x = numTo32bStr(this.x);\n        if (isCompressed) {\n            const prefix = this.hasEvenY() ? '02' : '03';\n            return `${prefix}${x}`;\n        }\n        else {\n            return `04${x}${numTo32bStr(this.y)}`;\n        }\n    }\n    toHexX() {\n        return this.toHex(true).slice(2);\n    }\n    toRawX() {\n        return this.toRawBytes(true).slice(1);\n    }\n    assertValidity() {\n        const msg = 'Point is not on elliptic curve';\n        const { x, y } = this;\n        if (!isValidFieldElement(x) || !isValidFieldElement(y))\n            throw new Error(msg);\n        const left = mod(y * y);\n        const right = weierstrass(x);\n        if (mod(left - right) !== _0n)\n            throw new Error(msg);\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(this.x, mod(-this.y));\n    }\n    double() {\n        return JacobianPoint.fromAffine(this).double().toAffine();\n    }\n    add(other) {\n        return JacobianPoint.fromAffine(this).add(JacobianPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return JacobianPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n    multiplyAndAddUnsafe(Q, a, b) {\n        const P = JacobianPoint.fromAffine(this);\n        const aP = a === _0n || a === _1n || this !== Point.BASE ? P.multiplyUnsafe(a) : P.multiply(a);\n        const bQ = JacobianPoint.fromAffine(Q).multiplyUnsafe(b);\n        const sum = aP.add(bQ);\n        return sum.equals(JacobianPoint.ZERO) ? undefined : sum.toAffine();\n    }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _0n);\nfunction sliceDER(s) {\n    return Number.parseInt(s[0], 16) >= 8 ? '00' + s : s;\n}\nfunction parseDERInt(data) {\n    if (data.length < 2 || data[0] !== 0x02) {\n        throw new Error(`Invalid signature integer tag: ${bytesToHex(data)}`);\n    }\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) {\n        throw new Error(`Invalid signature integer: wrong length`);\n    }\n    if (res[0] === 0x00 && res[1] <= 0x7f) {\n        throw new Error('Invalid signature integer: trailing length');\n    }\n    return { data: bytesToNumber(res), left: data.subarray(len + 2) };\n}\nfunction parseDERSignature(data) {\n    if (data.length < 2 || data[0] != 0x30) {\n        throw new Error(`Invalid signature tag: ${bytesToHex(data)}`);\n    }\n    if (data[1] !== data.length - 2) {\n        throw new Error('Invalid signature: incorrect length');\n    }\n    const { data: r, left: sBytes } = parseDERInt(data.subarray(2));\n    const { data: s, left: rBytesLeft } = parseDERInt(sBytes);\n    if (rBytesLeft.length) {\n        throw new Error(`Invalid signature: left bytes after parsing: ${bytesToHex(rBytesLeft)}`);\n    }\n    return { r, s };\n}\nexport class Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromCompact(hex) {\n        const arr = hex instanceof Uint8Array;\n        const name = 'Signature.fromCompact';\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`${name}: Expected string or Uint8Array`);\n        const str = arr ? bytesToHex(hex) : hex;\n        if (str.length !== 128)\n            throw new Error(`${name}: Expected 64-byte hex`);\n        return new Signature(hexToNumber(str.slice(0, 64)), hexToNumber(str.slice(64, 128)));\n    }\n    static fromDER(hex) {\n        const arr = hex instanceof Uint8Array;\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`Signature.fromDER: Expected string or Uint8Array`);\n        const { r, s } = parseDERSignature(arr ? hex : hexToBytes(hex));\n        return new Signature(r, s);\n    }\n    static fromHex(hex) {\n        return this.fromDER(hex);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isWithinCurveOrder(r))\n            throw new Error('Invalid Signature: r must be 0 < r < n');\n        if (!isWithinCurveOrder(s))\n            throw new Error('Invalid Signature: s must be 0 < s < n');\n    }\n    hasHighS() {\n        const HALF = CURVE.n >> _1n;\n        return this.s > HALF;\n    }\n    normalizeS() {\n        return this.hasHighS() ? new Signature(this.r, mod(-this.s, CURVE.n)) : this;\n    }\n    toDERRawBytes() {\n        return hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n        const sHex = sliceDER(numberToHexUnpadded(this.s));\n        const rHex = sliceDER(numberToHexUnpadded(this.r));\n        const sHexL = sHex.length / 2;\n        const rHexL = rHex.length / 2;\n        const sLen = numberToHexUnpadded(sHexL);\n        const rLen = numberToHexUnpadded(rHexL);\n        const length = numberToHexUnpadded(rHexL + sHexL + 4);\n        return `30${length}02${rLen}${rHex}02${sLen}${sHex}`;\n    }\n    toRawBytes() {\n        return this.toDERRawBytes();\n    }\n    toHex() {\n        return this.toDERHex();\n    }\n    toCompactRawBytes() {\n        return hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n}\nfunction concatBytes(...arrays) {\n    if (!arrays.every((b) => b instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nconst POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\nfunction numTo32bStr(num) {\n    if (typeof num !== 'bigint')\n        throw new Error('Expected bigint');\n    if (!(_0n <= num && num < POW_2_256))\n        throw new Error('Expected number 0 <= n < 2^256');\n    return num.toString(16).padStart(64, '0');\n}\nfunction numTo32b(num) {\n    const b = hexToBytes(numTo32bStr(num));\n    if (b.length !== 32)\n        throw new Error('Error: expected 32 bytes');\n    return b;\n}\nfunction numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nfunction hexToNumber(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToNumber: expected string, got ' + typeof hex);\n    }\n    return BigInt(`0x${hex}`);\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex' + hex.length);\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction bytesToNumber(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nfunction ensureBytes(hex) {\n    return hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n}\nfunction normalizeScalar(num) {\n    if (typeof num === 'number' && Number.isSafeInteger(num) && num > 0)\n        return BigInt(num);\n    if (typeof num === 'bigint' && isWithinCurveOrder(num))\n        return num;\n    throw new TypeError('Expected valid private scalar: 0 < scalar < curve.n');\n}\nfunction mod(a, b = CURVE.P) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction sqrtMod(x) {\n    const { P } = CURVE;\n    const _6n = BigInt(6);\n    const _11n = BigInt(11);\n    const _22n = BigInt(22);\n    const _23n = BigInt(23);\n    const _44n = BigInt(44);\n    const _88n = BigInt(88);\n    const b2 = (x * x * x) % P;\n    const b3 = (b2 * b2 * x) % P;\n    const b6 = (pow2(b3, _3n) * b3) % P;\n    const b9 = (pow2(b6, _3n) * b3) % P;\n    const b11 = (pow2(b9, _2n) * b2) % P;\n    const b22 = (pow2(b11, _11n) * b11) % P;\n    const b44 = (pow2(b22, _22n) * b22) % P;\n    const b88 = (pow2(b44, _44n) * b44) % P;\n    const b176 = (pow2(b88, _88n) * b88) % P;\n    const b220 = (pow2(b176, _44n) * b44) % P;\n    const b223 = (pow2(b220, _3n) * b3) % P;\n    const t1 = (pow2(b223, _23n) * b22) % P;\n    const t2 = (pow2(t1, _6n) * b2) % P;\n    const rt = pow2(t2, _2n);\n    const xc = (rt * rt) % P;\n    if (xc !== x)\n        throw new Error('Cannot find square root');\n    return rt;\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const scratch = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = mod(acc * scratch[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return scratch;\n}\nfunction bits2int_2(bytes) {\n    const delta = bytes.length * 8 - groupLen * 8;\n    const num = bytesToNumber(bytes);\n    return delta > 0 ? num >> BigInt(delta) : num;\n}\nfunction truncateHash(hash, truncateOnly = false) {\n    const h = bits2int_2(hash);\n    if (truncateOnly)\n        return h;\n    const { n } = CURVE;\n    return h >= n ? h - n : h;\n}\nlet _sha256Sync;\nlet _hmacSha256Sync;\nclass HmacDrbg {\n    constructor(hashLen, qByteLen) {\n        this.hashLen = hashLen;\n        this.qByteLen = qByteLen;\n        if (typeof hashLen !== 'number' || hashLen < 2)\n            throw new Error('hashLen must be a number');\n        if (typeof qByteLen !== 'number' || qByteLen < 2)\n            throw new Error('qByteLen must be a number');\n        this.v = new Uint8Array(hashLen).fill(1);\n        this.k = new Uint8Array(hashLen).fill(0);\n        this.counter = 0;\n    }\n    hmac(...values) {\n        return utils.hmacSha256(this.k, ...values);\n    }\n    hmacSync(...values) {\n        return _hmacSha256Sync(this.k, ...values);\n    }\n    checkSync() {\n        if (typeof _hmacSha256Sync !== 'function')\n            throw new ShaError('hmacSha256Sync needs to be set');\n    }\n    incr() {\n        if (this.counter >= 1000)\n            throw new Error('Tried 1,000 k values for sign(), all were invalid');\n        this.counter += 1;\n    }\n    async reseed(seed = new Uint8Array()) {\n        this.k = await this.hmac(this.v, Uint8Array.from([0x00]), seed);\n        this.v = await this.hmac(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = await this.hmac(this.v, Uint8Array.from([0x01]), seed);\n        this.v = await this.hmac(this.v);\n    }\n    reseedSync(seed = new Uint8Array()) {\n        this.checkSync();\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x00]), seed);\n        this.v = this.hmacSync(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x01]), seed);\n        this.v = this.hmacSync(this.v);\n    }\n    async generate() {\n        this.incr();\n        let len = 0;\n        const out = [];\n        while (len < this.qByteLen) {\n            this.v = await this.hmac(this.v);\n            const sl = this.v.slice();\n            out.push(sl);\n            len += this.v.length;\n        }\n        return concatBytes(...out);\n    }\n    generateSync() {\n        this.checkSync();\n        this.incr();\n        let len = 0;\n        const out = [];\n        while (len < this.qByteLen) {\n            this.v = this.hmacSync(this.v);\n            const sl = this.v.slice();\n            out.push(sl);\n            len += this.v.length;\n        }\n        return concatBytes(...out);\n    }\n}\nfunction isWithinCurveOrder(num) {\n    return _0n < num && num < CURVE.n;\n}\nfunction isValidFieldElement(num) {\n    return _0n < num && num < CURVE.P;\n}\nfunction kmdToSig(kBytes, m, d, lowS = true) {\n    const { n } = CURVE;\n    const k = truncateHash(kBytes, true);\n    if (!isWithinCurveOrder(k))\n        return;\n    const kinv = invert(k, n);\n    const q = Point.BASE.multiply(k);\n    const r = mod(q.x, n);\n    if (r === _0n)\n        return;\n    const s = mod(kinv * mod(m + d * r, n), n);\n    if (s === _0n)\n        return;\n    let sig = new Signature(r, s);\n    let recovery = (q.x === sig.r ? 0 : 2) | Number(q.y & _1n);\n    if (lowS && sig.hasHighS()) {\n        sig = sig.normalizeS();\n        recovery ^= 1;\n    }\n    return { sig, recovery };\n}\nfunction normalizePrivateKey(key) {\n    let num;\n    if (typeof key === 'bigint') {\n        num = key;\n    }\n    else if (typeof key === 'number' && Number.isSafeInteger(key) && key > 0) {\n        num = BigInt(key);\n    }\n    else if (typeof key === 'string') {\n        if (key.length !== 2 * groupLen)\n            throw new Error('Expected 32 bytes of private key');\n        num = hexToNumber(key);\n    }\n    else if (key instanceof Uint8Array) {\n        if (key.length !== groupLen)\n            throw new Error('Expected 32 bytes of private key');\n        num = bytesToNumber(key);\n    }\n    else {\n        throw new TypeError('Expected valid private key');\n    }\n    if (!isWithinCurveOrder(num))\n        throw new Error('Expected private key: 0 < key < n');\n    return num;\n}\nfunction normalizePublicKey(publicKey) {\n    if (publicKey instanceof Point) {\n        publicKey.assertValidity();\n        return publicKey;\n    }\n    else {\n        return Point.fromHex(publicKey);\n    }\n}\nfunction normalizeSignature(signature) {\n    if (signature instanceof Signature) {\n        signature.assertValidity();\n        return signature;\n    }\n    try {\n        return Signature.fromDER(signature);\n    }\n    catch (error) {\n        return Signature.fromCompact(signature);\n    }\n}\nexport function getPublicKey(privateKey, isCompressed = false) {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n}\nexport function recoverPublicKey(msgHash, signature, recovery, isCompressed = false) {\n    return Point.fromSignature(msgHash, signature, recovery).toRawBytes(isCompressed);\n}\nfunction isProbPub(item) {\n    const arr = item instanceof Uint8Array;\n    const str = typeof item === 'string';\n    const len = (arr || str) && item.length;\n    if (arr)\n        return len === compressedLen || len === uncompressedLen;\n    if (str)\n        return len === compressedLen * 2 || len === uncompressedLen * 2;\n    if (item instanceof Point)\n        return true;\n    return false;\n}\nexport function getSharedSecret(privateA, publicB, isCompressed = false) {\n    if (isProbPub(privateA))\n        throw new TypeError('getSharedSecret: first arg must be private key');\n    if (!isProbPub(publicB))\n        throw new TypeError('getSharedSecret: second arg must be public key');\n    const b = normalizePublicKey(publicB);\n    b.assertValidity();\n    return b.multiply(normalizePrivateKey(privateA)).toRawBytes(isCompressed);\n}\nfunction bits2int(bytes) {\n    const slice = bytes.length > fieldLen ? bytes.slice(0, fieldLen) : bytes;\n    return bytesToNumber(slice);\n}\nfunction bits2octets(bytes) {\n    const z1 = bits2int(bytes);\n    const z2 = mod(z1, CURVE.n);\n    return int2octets(z2 < _0n ? z1 : z2);\n}\nfunction int2octets(num) {\n    return numTo32b(num);\n}\nfunction initSigArgs(msgHash, privateKey, extraEntropy) {\n    if (msgHash == null)\n        throw new Error(`sign: expected valid message hash, not \"${msgHash}\"`);\n    const h1 = ensureBytes(msgHash);\n    const d = normalizePrivateKey(privateKey);\n    const seedArgs = [int2octets(d), bits2octets(h1)];\n    if (extraEntropy != null) {\n        if (extraEntropy === true)\n            extraEntropy = utils.randomBytes(fieldLen);\n        const e = ensureBytes(extraEntropy);\n        if (e.length !== fieldLen)\n            throw new Error(`sign: Expected ${fieldLen} bytes of extra data`);\n        seedArgs.push(e);\n    }\n    const seed = concatBytes(...seedArgs);\n    const m = bits2int(h1);\n    return { seed, m, d };\n}\nfunction finalizeSig(recSig, opts) {\n    const { sig, recovery } = recSig;\n    const { der, recovered } = Object.assign({ canonical: true, der: true }, opts);\n    const hashed = der ? sig.toDERRawBytes() : sig.toCompactRawBytes();\n    return recovered ? [hashed, recovery] : hashed;\n}\nasync function sign(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    const drbg = new HmacDrbg(hashLen, groupLen);\n    await drbg.reseed(seed);\n    let sig;\n    while (!(sig = kmdToSig(await drbg.generate(), m, d, opts.canonical)))\n        await drbg.reseed();\n    return finalizeSig(sig, opts);\n}\nfunction signSync(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    const drbg = new HmacDrbg(hashLen, groupLen);\n    drbg.reseedSync(seed);\n    let sig;\n    while (!(sig = kmdToSig(drbg.generateSync(), m, d, opts.canonical)))\n        drbg.reseedSync();\n    return finalizeSig(sig, opts);\n}\nexport { sign, signSync };\nconst vopts = { strict: true };\nexport function verify(signature, msgHash, publicKey, opts = vopts) {\n    let sig;\n    try {\n        sig = normalizeSignature(signature);\n        msgHash = ensureBytes(msgHash);\n    }\n    catch (error) {\n        return false;\n    }\n    const { r, s } = sig;\n    if (opts.strict && sig.hasHighS())\n        return false;\n    const h = truncateHash(msgHash);\n    let P;\n    try {\n        P = normalizePublicKey(publicKey);\n    }\n    catch (error) {\n        return false;\n    }\n    const { n } = CURVE;\n    const sinv = invert(s, n);\n    const u1 = mod(h * sinv, n);\n    const u2 = mod(r * sinv, n);\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2);\n    if (!R)\n        return false;\n    const v = mod(R.x, n);\n    return v === r;\n}\nfunction schnorrChallengeFinalize(ch) {\n    return mod(bytesToNumber(ch), CURVE.n);\n}\nclass SchnorrSignature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        if (bytes.length !== 64)\n            throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${bytes.length}`);\n        const r = bytesToNumber(bytes.subarray(0, 32));\n        const s = bytesToNumber(bytes.subarray(32, 64));\n        return new SchnorrSignature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isValidFieldElement(r) || !isWithinCurveOrder(s))\n            throw new Error('Invalid signature');\n    }\n    toHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n    toRawBytes() {\n        return hexToBytes(this.toHex());\n    }\n}\nfunction schnorrGetPublicKey(privateKey) {\n    return Point.fromPrivateKey(privateKey).toRawX();\n}\nclass InternalSchnorrSignature {\n    constructor(message, privateKey, auxRand = utils.randomBytes()) {\n        if (message == null)\n            throw new TypeError(`sign: Expected valid message, not \"${message}\"`);\n        this.m = ensureBytes(message);\n        const { x, scalar } = this.getScalar(normalizePrivateKey(privateKey));\n        this.px = x;\n        this.d = scalar;\n        this.rand = ensureBytes(auxRand);\n        if (this.rand.length !== 32)\n            throw new TypeError('sign: Expected 32 bytes of aux randomness');\n    }\n    getScalar(priv) {\n        const point = Point.fromPrivateKey(priv);\n        const scalar = point.hasEvenY() ? priv : CURVE.n - priv;\n        return { point, scalar, x: point.toRawX() };\n    }\n    initNonce(d, t0h) {\n        return numTo32b(d ^ bytesToNumber(t0h));\n    }\n    finalizeNonce(k0h) {\n        const k0 = mod(bytesToNumber(k0h), CURVE.n);\n        if (k0 === _0n)\n            throw new Error('sign: Creation of signature failed. k is zero');\n        const { point: R, x: rx, scalar: k } = this.getScalar(k0);\n        return { R, rx, k };\n    }\n    finalizeSig(R, k, e, d) {\n        return new SchnorrSignature(R.x, mod(k + e * d, CURVE.n)).toRawBytes();\n    }\n    error() {\n        throw new Error('sign: Invalid signature produced');\n    }\n    async calc() {\n        const { m, d, px, rand } = this;\n        const tag = utils.taggedHash;\n        const t = this.initNonce(d, await tag(TAGS.aux, rand));\n        const { R, rx, k } = this.finalizeNonce(await tag(TAGS.nonce, t, px, m));\n        const e = schnorrChallengeFinalize(await tag(TAGS.challenge, rx, px, m));\n        const sig = this.finalizeSig(R, k, e, d);\n        if (!(await schnorrVerify(sig, m, px)))\n            this.error();\n        return sig;\n    }\n    calcSync() {\n        const { m, d, px, rand } = this;\n        const tag = utils.taggedHashSync;\n        const t = this.initNonce(d, tag(TAGS.aux, rand));\n        const { R, rx, k } = this.finalizeNonce(tag(TAGS.nonce, t, px, m));\n        const e = schnorrChallengeFinalize(tag(TAGS.challenge, rx, px, m));\n        const sig = this.finalizeSig(R, k, e, d);\n        if (!schnorrVerifySync(sig, m, px))\n            this.error();\n        return sig;\n    }\n}\nasync function schnorrSign(msg, privKey, auxRand) {\n    return new InternalSchnorrSignature(msg, privKey, auxRand).calc();\n}\nfunction schnorrSignSync(msg, privKey, auxRand) {\n    return new InternalSchnorrSignature(msg, privKey, auxRand).calcSync();\n}\nfunction initSchnorrVerify(signature, message, publicKey) {\n    const raw = signature instanceof SchnorrSignature;\n    const sig = raw ? signature : SchnorrSignature.fromHex(signature);\n    if (raw)\n        sig.assertValidity();\n    return {\n        ...sig,\n        m: ensureBytes(message),\n        P: normalizePublicKey(publicKey),\n    };\n}\nfunction finalizeSchnorrVerify(r, P, s, e) {\n    const R = Point.BASE.multiplyAndAddUnsafe(P, normalizePrivateKey(s), mod(-e, CURVE.n));\n    if (!R || !R.hasEvenY() || R.x !== r)\n        return false;\n    return true;\n}\nasync function schnorrVerify(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = schnorrChallengeFinalize(await utils.taggedHash(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        return false;\n    }\n}\nfunction schnorrVerifySync(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = schnorrChallengeFinalize(utils.taggedHashSync(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        if (error instanceof ShaError)\n            throw error;\n        return false;\n    }\n}\nexport const schnorr = {\n    Signature: SchnorrSignature,\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    signSync: schnorrSignSync,\n    verifySync: schnorrVerifySync,\n};\nPoint.BASE._setWindowSize(8);\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nconst TAGS = {\n    challenge: 'BIP0340/challenge',\n    aux: 'BIP0340/aux',\n    nonce: 'BIP0340/nonce',\n};\nconst TAGGED_HASH_PREFIXES = {};\nexport const utils = {\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    mod,\n    invert,\n    isValidPrivateKey(privateKey) {\n        try {\n            normalizePrivateKey(privateKey);\n            return true;\n        }\n        catch (error) {\n            return false;\n        }\n    },\n    _bigintTo32Bytes: numTo32b,\n    _normalizePrivateKey: normalizePrivateKey,\n    hashToPrivateKey: (hash) => {\n        hash = ensureBytes(hash);\n        const minLen = groupLen + 8;\n        if (hash.length < minLen || hash.length > 1024) {\n            throw new Error(`Expected valid bytes of private key as per FIPS 186`);\n        }\n        const num = mod(bytesToNumber(hash), CURVE.n - _1n) + _1n;\n        return numTo32b(num);\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return Uint8Array.from(randomBytes(bytesLength));\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => utils.hashToPrivateKey(utils.randomBytes(groupLen + 8)),\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point === Point.BASE ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_3n);\n        return cached;\n    },\n    sha256: async (...messages) => {\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-256', concatBytes(...messages));\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHash } = crypto.node;\n            const hash = createHash('sha256');\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha256 function\");\n        }\n    },\n    hmacSha256: async (key, ...messages) => {\n        if (crypto.web) {\n            const ckey = await crypto.web.subtle.importKey('raw', key, { name: 'HMAC', hash: { name: 'SHA-256' } }, false, ['sign']);\n            const message = concatBytes(...messages);\n            const buffer = await crypto.web.subtle.sign('HMAC', ckey, message);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHmac } = crypto.node;\n            const hash = createHmac('sha256', key);\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have hmac-sha256 function\");\n        }\n    },\n    sha256Sync: undefined,\n    hmacSha256Sync: undefined,\n    taggedHash: async (tag, ...messages) => {\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = await utils.sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return utils.sha256(tagP, ...messages);\n    },\n    taggedHashSync: (tag, ...messages) => {\n        if (typeof _sha256Sync !== 'function')\n            throw new ShaError('sha256Sync is undefined, you need to set it');\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = _sha256Sync(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return _sha256Sync(tagP, ...messages);\n    },\n    _JacobianPoint: JacobianPoint,\n};\nObject.defineProperties(utils, {\n    sha256Sync: {\n        configurable: false,\n        get() {\n            return _sha256Sync;\n        },\n        set(val) {\n            if (!_sha256Sync)\n                _sha256Sync = val;\n        },\n    },\n    hmacSha256Sync: {\n        configurable: false,\n        get() {\n            return _hmacSha256Sync;\n        },\n        set(val) {\n            if (!_hmacSha256Sync)\n                _hmacSha256Sync = val;\n        },\n    },\n});\n", "import {sha512} from '@noble/hashes/sha512';\nimport * as ed25519 from '@noble/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\ned25519.utils.sha512Sync = (...m) => sha512(ed25519.utils.concatBytes(...m));\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.sync.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.Point.fromHex(publicKey, true /* strict */);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sync.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sync.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.sync.verify;\n", "import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n", "import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n", "import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique(): PublicKey {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes(): Uint8Array {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n", "import {Buffer} from 'buffer';\n\nimport {generatePrivateKey, getPublicKey} from './utils/ed25519';\nimport {toBuffer} from './utils/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  private _publicKey: Buffer;\n  /** @internal */\n  private _secretKey: Buffer;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Uint8Array | Array<number>) {\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  get secretKey(): Buffer {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n}\n", "import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n", "/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n", "export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n\nexport class TransactionExpiredNonceInvalidError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError',\n});\n", "import {LoadedAddresses} from '../connection';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {MessageCompiledInstruction} from './index';\n\nexport type AccountKeysFromLookups = LoadedAddresses;\n\nexport class MessageAccountKeys {\n  staticAccountKeys: Array<PublicKey>;\n  accountKeysFromLookups?: AccountKeysFromLookups;\n\n  constructor(\n    staticAccountKeys: Array<PublicKey>,\n    accountKeysFromLookups?: AccountKeysFromLookups,\n  ) {\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments(): Array<Array<PublicKey>> {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n\n  get(index: number): PublicKey | undefined {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n\n  get length(): number {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(\n    instructions: Array<TransactionInstruction>,\n  ): Array<MessageCompiledInstruction> {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments()\n      .flat()\n      .forEach((key, index) => {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n\n    const findKeyIndex = (key: PublicKey) => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined)\n        throw new Error(\n          'Encountered an unknown instruction account key during compilation',\n        );\n      return keyIndex;\n    };\n\n    return instructions.map((instruction): MessageCompiledInstruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta =>\n          findKeyIndex(meta.pubkey),\n        ),\n        data: instruction.data,\n      };\n    });\n  }\n}\n", "import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {VoteAuthorizeWithSeedArgs} from './programs/vote';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nexport const voteAuthorizeWithSeedArgs = (\n  property: string = 'voteAuthorizeWithSeedArgs',\n) => {\n  return BufferLayout.struct<VoteAuthorizeWithSeedArgs>(\n    [\n      BufferLayout.u32('voteAuthorizationType'),\n      publicKey('currentAuthorityDerivedKeyOwnerPubkey'),\n      rustString('currentAuthorityDerivedKeySeed'),\n      publicKey('newAuthorized'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({layout: item}, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n", "export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n", "export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n", "import {MessageHeader, MessageAddressTableLookup} from './index';\nimport {AccountKeysFromLookups} from './account-keys';\nimport {AddressLookupTableAccount} from '../programs';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {PublicKey} from '../publickey';\n\nexport type CompiledKeyMeta = {\n  isSigner: boolean;\n  isWritable: boolean;\n  isInvoked: boolean;\n};\n\ntype KeyMetaMap = Map<string, CompiledKeyMeta>;\n\nexport class CompiledKeys {\n  payer: PublicKey;\n  keyMetaMap: KeyMetaMap;\n\n  constructor(payer: PublicKey, keyMetaMap: KeyMetaMap) {\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(\n    instructions: Array<TransactionInstruction>,\n    payer: PublicKey,\n  ): CompiledKeys {\n    const keyMetaMap: KeyMetaMap = new Map();\n    const getOrInsertDefault = (pubkey: PublicKey): CompiledKeyMeta => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false,\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents(): [MessageHeader, Array<PublicKey>] {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n\n    const writableSigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && meta.isWritable,\n    );\n    const readonlySigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && !meta.isWritable,\n    );\n    const writableNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && meta.isWritable,\n    );\n    const readonlyNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && !meta.isWritable,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length,\n    };\n\n    // sanity checks\n    {\n      assert(\n        writableSigners.length > 0,\n        'Expected at least one writable signer key',\n      );\n      const [payerAddress] = writableSigners[0];\n      assert(\n        payerAddress === this.payer.toBase58(),\n        'Expected first writable signer key to be the fee payer',\n      );\n    }\n\n    const staticAccountKeys = [\n      ...writableSigners.map(([address]) => new PublicKey(address)),\n      ...readonlySigners.map(([address]) => new PublicKey(address)),\n      ...writableNonSigners.map(([address]) => new PublicKey(address)),\n      ...readonlyNonSigners.map(([address]) => new PublicKey(address)),\n    ];\n\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(\n    lookupTable: AddressLookupTableAccount,\n  ): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined {\n    const [writableIndexes, drainedWritableKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable,\n      );\n    const [readonlyIndexes, drainedReadonlyKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable,\n      );\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [\n      {\n        accountKey: lookupTable.key,\n        writableIndexes,\n        readonlyIndexes,\n      },\n      {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys,\n      },\n    ];\n  }\n\n  /** @internal */\n  private drainKeysFoundInLookupTable(\n    lookupTableEntries: Array<PublicKey>,\n    keyMetaFilter: (keyMeta: CompiledKeyMeta) => boolean,\n  ): [Array<number>, Array<PublicKey>] {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry =>\n          entry.equals(key),\n        );\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n", "import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {TransactionInstruction} from '../transaction';\nimport {CompiledKeys} from './compiled-keys';\nimport {MessageAccountKeys} from './account-keys';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[] | PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nexport type CompileLegacyArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  getAccountKeys(): MessageAccountKeys {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args: CompileLegacyArgs): Message {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(\n      (ix: MessageCompiledInstruction): CompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accounts: ix.accountKeyIndexes,\n        data: bs58.encode(ix.data),\n      }),\n    );\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions,\n    });\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift()!;\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = byteArray.shift()!;\n    const numReadonlyUnsignedAccounts = byteArray.shift()!;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n    byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift()!;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n", "import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {TransactionInstruction} from '../transaction';\nimport {AddressLookupTableAccount} from '../programs';\nimport {CompiledKeys} from './compiled-keys';\nimport {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport type CompileV0Args = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n  addressLookupTableAccounts?: Array<AddressLookupTableAccount>;\n};\n\nexport type GetAccountKeysArgs =\n  | {\n      accountKeysFromLookups?: AccountKeysFromLookups | null;\n    }\n  | {\n      addressLookupTableAccounts?: AddressLookupTableAccount[] | null;\n    };\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups(): number {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n\n  getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys {\n    let accountKeysFromLookups: AccountKeysFromLookups | undefined;\n    if (\n      args &&\n      'accountKeysFromLookups' in args &&\n      args.accountKeysFromLookups\n    ) {\n      if (\n        this.numAccountKeysFromLookups !=\n        args.accountKeysFromLookups.writable.length +\n          args.accountKeysFromLookups.readonly.length\n      ) {\n        throw new Error(\n          'Failed to get account keys because of a mismatch in the number of account keys from lookups',\n        );\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (\n      args &&\n      'addressLookupTableAccounts' in args &&\n      args.addressLookupTableAccounts\n    ) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(\n        args.addressLookupTableAccounts,\n      );\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error(\n        'Failed to get account keys because address table lookups were not resolved',\n      );\n    }\n    return new MessageAccountKeys(\n      this.staticAccountKeys,\n      accountKeysFromLookups,\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce(\n        (count, lookup) => count + lookup.writableIndexes.length,\n        0,\n      );\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(\n    addressLookupTableAccounts: AddressLookupTableAccount[],\n  ): AccountKeysFromLookups {\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: [],\n      readonly: [],\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account =>\n        account.key.equals(tableLookup.accountKey),\n      );\n      if (!tableAccount) {\n        throw new Error(\n          `Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`,\n        );\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args: CompileV0Args): MessageV0 {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n\n    const addressTableLookups = new Array<MessageAddressTableLookup>();\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array(),\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {writable, readonly}] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(\n      staticAccountKeys,\n      accountKeysFromLookups,\n    );\n    const compiledInstructions = accountKeys.compileInstructions(\n      args.instructions,\n    );\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = byteArray.shift() as number;\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: byteArray.shift() as number,\n      numReadonlySignedAccounts: byteArray.shift() as number,\n      numReadonlyUnsignedAccounts: byteArray.shift() as number,\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(byteArray.splice(0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = byteArray.splice(0, writableIndexesLength);\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n", "import {VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {Message} from './legacy';\nimport {MessageV0} from './v0';\n\nexport type VersionedMessage = Message | MessageV0;\n// eslint-disable-next-line no-redeclare\nexport const VersionedMessage = {\n  deserializeMessageVersion(serializedMessage: Uint8Array): 'legacy' | number {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n\n  deserialize: (serializedMessage: Uint8Array): VersionedMessage => {\n    const version =\n      VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(\n        `Transaction message version ${version} deserialization is not supported`,\n      );\n    }\n  },\n};\n", "import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n  NONCE_INVALID,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\nexport type TransactionNonceCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  minContextSlot: number;\n  nonceInfo: NonceInformation;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * If this is a nonce transaction this represents the minimum slot from which\n   * to evaluate if the nonce has advanced when attempting to confirm the\n   * transaction. This protects against a case where the transaction confirmation\n   * logic loads the nonce account from an old slot and assumes the mismatch in\n   * nonce value implies that the nonce has been advanced.\n   */\n  minNonceContextSlot?: number;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  // Construct a transaction using a durable nonce\n  constructor(opts?: TransactionNonceCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?:\n      | TransactionBlockhashCtor\n      | TransactionNonceCtor\n      | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {minContextSlot, nonceInfo} = opts as TransactionNonceCtor;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number | null> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   */\n  verifySignatures(requireAllSignatures?: boolean): boolean {\n    return this._verifySignatures(\n      this.serializeMessage(),\n      requireAllSignatures === undefined ? true : requireAllSignatures,\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(\n    signData: Uint8Array,\n    requireAllSignatures: boolean,\n  ): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!verify(signature, signData, publicKey.toBytes())) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n", "import {AccountKeysFromLookups} from '../message/account-keys';\nimport assert from '../utils/assert';\nimport {toBuffer} from '../utils/to-buffer';\nimport {Blockhash} from '../blockhash';\nimport {Message, MessageV0, VersionedMessage} from '../message';\nimport {PublicKey} from '../publickey';\nimport {AddressLookupTableAccount} from '../programs';\nimport {AccountMeta, TransactionInstruction} from './legacy';\n\nexport type TransactionMessageArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\nexport type DecompileArgs =\n  | {\n      accountKeysFromLookups: AccountKeysFromLookups;\n    }\n  | {\n      addressLookupTableAccounts: AddressLookupTableAccount[];\n    };\n\nexport class TransactionMessage {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n\n  constructor(args: TransactionMessageArgs) {\n    this.payerKey = args.payerKey;\n    this.instructions = args.instructions;\n    this.recentBlockhash = args.recentBlockhash;\n  }\n\n  static decompile(\n    message: VersionedMessage,\n    args?: DecompileArgs,\n  ): TransactionMessage {\n    const {header, compiledInstructions, recentBlockhash} = message;\n\n    const {\n      numRequiredSignatures,\n      numReadonlySignedAccounts,\n      numReadonlyUnsignedAccounts,\n    } = header;\n\n    const numWritableSignedAccounts =\n      numRequiredSignatures - numReadonlySignedAccounts;\n    assert(numWritableSignedAccounts > 0, 'Message header is invalid');\n\n    const numWritableUnsignedAccounts =\n      message.staticAccountKeys.length -\n      numRequiredSignatures -\n      numReadonlyUnsignedAccounts;\n    assert(numWritableUnsignedAccounts >= 0, 'Message header is invalid');\n\n    const accountKeys = message.getAccountKeys(args);\n    const payerKey = accountKeys.get(0);\n    if (payerKey === undefined) {\n      throw new Error(\n        'Failed to decompile message because no account keys were found',\n      );\n    }\n\n    const instructions: TransactionInstruction[] = [];\n    for (const compiledIx of compiledInstructions) {\n      const keys: AccountMeta[] = [];\n\n      for (const keyIndex of compiledIx.accountKeyIndexes) {\n        const pubkey = accountKeys.get(keyIndex);\n        if (pubkey === undefined) {\n          throw new Error(\n            `Failed to find key for account key index ${keyIndex}`,\n          );\n        }\n\n        const isSigner = keyIndex < numRequiredSignatures;\n\n        let isWritable;\n        if (isSigner) {\n          isWritable = keyIndex < numWritableSignedAccounts;\n        } else if (keyIndex < accountKeys.staticAccountKeys.length) {\n          isWritable =\n            keyIndex - numRequiredSignatures < numWritableUnsignedAccounts;\n        } else {\n          isWritable =\n            keyIndex - accountKeys.staticAccountKeys.length <\n            // accountKeysFromLookups cannot be undefined because we already found a pubkey for this index above\n            accountKeys.accountKeysFromLookups!.writable.length;\n        }\n\n        keys.push({\n          pubkey,\n          isSigner: keyIndex < header.numRequiredSignatures,\n          isWritable,\n        });\n      }\n\n      const programId = accountKeys.get(compiledIx.programIdIndex);\n      if (programId === undefined) {\n        throw new Error(\n          `Failed to find program id for program id index ${compiledIx.programIdIndex}`,\n        );\n      }\n\n      instructions.push(\n        new TransactionInstruction({\n          programId,\n          data: toBuffer(compiledIx.data),\n          keys,\n        }),\n      );\n    }\n\n    return new TransactionMessage({\n      payerKey,\n      instructions,\n      recentBlockhash,\n    });\n  }\n\n  compileToLegacyMessage(): Message {\n    return Message.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n    });\n  }\n\n  compileToV0Message(\n    addressLookupTableAccounts?: AddressLookupTableAccount[],\n  ): MessageV0 {\n    return MessageV0.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n      addressLookupTableAccounts,\n    });\n  }\n}\n", "import * as BufferLayout from '@solana/buffer-layout';\n\nimport {Signer} from '../keypair';\nimport assert from '../utils/assert';\nimport {VersionedMessage} from '../message/versioned';\nimport {SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport * as Layout from '../layout';\nimport {sign} from '../utils/ed25519';\nimport {PublicKey} from '../publickey';\n\nexport type TransactionVersion = 'legacy' | 0;\n\n/**\n * Versioned transaction class\n */\nexport class VersionedTransaction {\n  signatures: Array<Uint8Array>;\n  message: VersionedMessage;\n\n  get version(): TransactionVersion {\n    return this.message.version;\n  }\n\n  constructor(message: VersionedMessage, signatures?: Array<Uint8Array>) {\n    if (signatures !== undefined) {\n      assert(\n        signatures.length === message.header.numRequiredSignatures,\n        'Expected signatures length to be equal to the number of required signatures',\n      );\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n\n  serialize(): Uint8Array {\n    const serializedMessage = this.message.serialize();\n\n    const encodedSignaturesLength = Array<number>();\n    shortvec.encodeLength(encodedSignaturesLength, this.signatures.length);\n\n    const transactionLayout = BufferLayout.struct<{\n      encodedSignaturesLength: Uint8Array;\n      signatures: Array<Uint8Array>;\n      serializedMessage: Uint8Array;\n    }>([\n      BufferLayout.blob(\n        encodedSignaturesLength.length,\n        'encodedSignaturesLength',\n      ),\n      BufferLayout.seq(\n        Layout.signature(),\n        this.signatures.length,\n        'signatures',\n      ),\n      BufferLayout.blob(serializedMessage.length, 'serializedMessage'),\n    ]);\n\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode(\n      {\n        encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n        signatures: this.signatures,\n        serializedMessage,\n      },\n      serializedTransaction,\n    );\n\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n\n  static deserialize(serializedTransaction: Uint8Array): VersionedTransaction {\n    let byteArray = [...serializedTransaction];\n\n    const signatures = [];\n    const signaturesLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(\n        new Uint8Array(byteArray.splice(0, SIGNATURE_LENGTH_IN_BYTES)),\n      );\n    }\n\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n\n  sign(signers: Array<Signer>) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey =>\n        pubkey.equals(signer.publicKey),\n      );\n      assert(\n        signerIndex >= 0,\n        `Cannot sign with non signer key ${signer.publicKey.toBase58()}`,\n      );\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n\n  addSignature(publicKey: PublicKey, signature: Uint8Array) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    const signerIndex = signerPubkeys.findIndex(pubkey =>\n      pubkey.equals(publicKey),\n    );\n    assert(\n      signerIndex >= 0,\n      `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`,\n    );\n    this.signatures[signerIndex] = signature;\n  }\n}\n", "import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n", "import {Connection, SignatureResult} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions &\n    Readonly<{\n      // A signal that, when aborted, cancels any outstanding transaction confirmation operations\n      abortSignal?: AbortSignal;\n    }>,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  let status: SignatureResult;\n  if (\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n  ) {\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          signature: signature,\n          blockhash: transaction.recentBlockhash,\n          lastValidBlockHeight: transaction.lastValidBlockHeight,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else if (\n    transaction.minNonceContextSlot != null &&\n    transaction.nonceInfo != null\n  ) {\n    const {nonceInstruction} = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          minContextSlot: transaction.minNonceContextSlot,\n          nonceAccountPubkey,\n          nonceValue: transaction.nonceInfo.nonce,\n          signature,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn(\n        'sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' +\n          'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' +\n          'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.',\n      );\n    }\n    status = (\n      await connection.confirmTransaction(\n        signature,\n        options && options.commitment,\n      )\n    ).value;\n  }\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n", "// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n", "import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n", "import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n", "import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\nexport type DurableNonce = string;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n", "import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n", "import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n", "import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n", "import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n", "var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n", "const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n", "export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  typeof SolanaJSONRPCErrorCode[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n", "export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n", "import RpcWebSocketCommonClient from 'rpc-websockets/dist/lib/client';\nimport RpcWebSocketBrowserFactory from 'rpc-websockets/dist/lib/client/websocket.browser';\nimport {\n  ICommonWebSocket,\n  IWSClientAdditionalOptions,\n  NodeWebSocketType,\n  NodeWebSocketTypeOptions,\n} from 'rpc-websockets/dist/lib/client/client.types';\n\nimport createRpc from './rpc-websocket-factory';\n\ninterface IHasReadyState {\n  readyState: WebSocket['readyState'];\n}\n\nexport default class RpcWebSocketClient extends RpcWebSocketCommonClient {\n  private underlyingSocket: IHasReadyState | undefined;\n  constructor(\n    address?: string,\n    options?: IWSClientAdditionalOptions & NodeWebSocketTypeOptions,\n    generate_request_id?: (\n      method: string,\n      params: object | Array<any>,\n    ) => number,\n  ) {\n    const webSocketFactory = (url: string) => {\n      const rpc = createRpc(url, {\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000,\n        ...options,\n      });\n      if ('socket' in rpc) {\n        this.underlyingSocket = (\n          rpc as ReturnType<typeof RpcWebSocketBrowserFactory>\n        ).socket;\n      } else {\n        this.underlyingSocket = rpc as NodeWebSocketType;\n      }\n      return rpc as ICommonWebSocket;\n    };\n    super(webSocketFactory, address, options, generate_request_id);\n  }\n  call(\n    ...args: Parameters<RpcWebSocketCommonClient['call']>\n  ): ReturnType<RpcWebSocketCommonClient['call']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.call(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to call a JSON-RPC method `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n  notify(\n    ...args: Parameters<RpcWebSocketCommonClient['notify']>\n  ): ReturnType<RpcWebSocketCommonClient['notify']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.notify(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to send a JSON-RPC notification `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n}\n", "// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n", "import * as BufferLayout from '@solana/buffer-layout';\n\nexport interface IAccountStateData {\n  readonly typeIndex: number;\n}\n\n/**\n * @internal\n */\nexport type AccountType<TInputData extends IAccountStateData> = {\n  /** The account type index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nexport function decodeData<TAccountStateData extends IAccountStateData>(\n  type: AccountType<TAccountStateData>,\n  data: Uint8Array,\n): TAccountStateData {\n  let decoded: TAccountStateData;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\n      `invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`,\n    );\n  }\n\n  return decoded;\n}\n", "import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n", "const URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nexport function makeWebsocketUrl(endpoint: string) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [\n    _, // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish,\n    portWithColon,\n    rest,\n  ] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort =\n    portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to solana-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n", "import HttpKeepAliveAgent, {\n  HttpsAgent as HttpsKeepAliveAgent,\n} from 'agentkeepalive';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport type {Agent as NodeHttpAgent} from 'http';\nimport {Agent as NodeHttpsAgent} from 'https';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {JSONRPCError} from 'jayson';\n\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl, {Response} from './fetch-impl';\nimport {DurableNonce, NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport RpcWebSocketClient from './rpc-websocket';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n  VersionedTransaction,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredNonceInvalidError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/** @internal */ type SubscriptionStateChangeCallback = (\n  nextState: StatefulSubscription['state'],\n) => void;\n/** @internal */ type SubscriptionStateChangeDisposeFn = () => void;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & BlockhashWithExpiryBlockHeight;\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\nexport type DurableNonceTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & {\n    /**\n     * The lowest slot at which to fetch the nonce value from the\n     * nonce account. This should be no lower than the slot at\n     * which the last-known value of the nonce was fetched.\n     */\n    minContextSlot: number;\n    /**\n     * The account where the current value of the nonce is stored.\n     */\n    nonceAccountPubkey: PublicKey;\n    /**\n     * The nonce value that was used to sign the transaction\n     * for which confirmation is being sought.\n     */\n    nonceValue: DurableNonce;\n  };\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\nexport type BaseTransactionConfirmationStrategy = Readonly<{\n  /** A signal that, when aborted, cancels any outstanding transaction confirmation operations */\n  abortSignal?: AbortSignal;\n  signature: TransactionSignature;\n}>;\n\n/**\n * This type represents all transaction confirmation strategies\n */\nexport type TransactionConfirmationStrategy =\n  | BlockheightBasedTransactionConfirmationStrategy\n  | DurableNonceTransactionConfirmationStrategy;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n  /** vote account commission when the reward was credited */\n  commission?: number | null;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n        commission: optional(nullable(number())),\n      }),\n    ),\n  ),\n);\n\nexport type RecentPrioritizationFees = {\n  /** slot in which the fee was observed */\n  slot: number;\n  /** the per-compute-unit fee paid by at least one successfully landed transaction, specified in increments of 0.000001 lamports*/\n  prioritizationFee: number;\n};\n\n/**\n * Configuration object for changing `getRecentPrioritizationFees` query behavior\n */\nexport type GetRecentPrioritizationFeesConfig = {\n  /**\n   * If this parameter is provided, the response will reflect a fee to land a transaction locking\n   * all of the provided accounts as writable.\n   */\n  lockedWritableAccounts?: PublicKey[];\n};\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesResult = array(\n  pick({\n    slot: number(),\n    prioritizationFee: number(),\n  }),\n);\n\nexport type InflationRate = {\n  /** total inflation */\n  total: number;\n  /** inflation allocated to validators */\n  validator: number;\n  /** inflation allocated to the foundation */\n  foundation: number;\n  /** epoch for which these values are valid */\n  epoch: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = pick({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number(),\n});\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulateTransactionConfig = {\n  /** Optional parameter used to enable signature verification before simulation */\n  sigVerify?: boolean;\n  /** Optional parameter used to replace the simulated transaction's recent blockhash with the latest blockhash */\n  replaceRecentBlockhash?: boolean;\n  /** Optional parameter used to set the commitment level when selecting the latest block */\n  commitment?: Commitment;\n  /** Optional parameter used to specify a list of account addresses to return post simulation state for */\n  accounts?: {\n    encoding: 'base64';\n    addresses: string[];\n  };\n  /** Optional parameter used to specify the minimum block slot that can be used for simulation */\n  minContextSlot?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n  /** Indicates if the account key came from the transaction or a lookup table */\n  source?: 'transaction' | 'lookupTable';\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type AccountsModeBlockResponse = VersionedAccountsModeBlockResponse;\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type NoneModeBlockResponse = VersionedNoneModeBlockResponse;\n\n/**\n * A block with parsed transactions\n */\nexport type ParsedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The details of the transaction */\n    transaction: ParsedTransaction;\n    /** Metadata produced from the transaction */\n    meta: ParsedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n  /** The number of blocks beneath this block */\n  blockHeight: number | null;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\nexport type ParsedAccountsModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<ParsedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        ParsedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\nexport type ParsedNoneModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type VersionedAccountsModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<VersionedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        VersionedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type VersionedNoneModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent: NodeHttpAgent | NodeHttpsAgent | undefined;\n  if (process.env.BROWSER) {\n    if (httpAgent != null) {\n      console.warn(\n        'You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' +\n          'It has been ignored; `httpAgent` is only used in Node environments.',\n      );\n    }\n  } else {\n    if (httpAgent == null) {\n      if (process.env.NODE_ENV !== 'test') {\n        const agentOptions = {\n          // One second fewer than the Solana RPC's keepalive timeout.\n          // Read more: https://github.com/solana-labs/solana/issues/27859#issuecomment-1340097889\n          freeSocketTimeout: 19000,\n          keepAlive: true,\n          maxSockets: 25,\n        };\n        if (url.startsWith('https:')) {\n          agent = new HttpsKeepAliveAgent(agentOptions);\n        } else {\n          agent = new HttpKeepAliveAgent(agentOptions);\n        }\n      }\n    } else {\n      if (httpAgent !== false) {\n        const isHttps = url.startsWith('https:');\n        if (isHttps && !(httpAgent instanceof NodeHttpsAgent)) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `https.Agent`. You have, instead, supplied an ' +\n              '`http.Agent` through `httpAgent`.',\n          );\n        } else if (!isHttps && httpAgent instanceof NodeHttpsAgent) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `http.Agent`. You have, instead, supplied an ' +\n              '`https.Agent` through `httpAgent`.',\n          );\n        }\n        agent = httpAgent;\n      }\n    }\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesRpcResult = jsonRpcResult(\n  GetRecentPrioritizationFeesResult,\n);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst AnnotatedAccountKey = pick({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')])),\n});\n\nconst ConfirmedTransactionAccountsModeResult = pick({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string()),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = pick({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number())),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ParsedConfirmedTransactionResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonce`\n */\nexport type GetNonceConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonceAndContext`\n */\nexport type GetNonceAndContextConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** Cluster confirmation status, if available. Possible values: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /**\n   * An `http.Agent` that will be used to manage socket connections (eg. to implement connection\n   * persistence). Set this to `false` to create a connection that uses no agent. This applies to\n   * Node environments only.\n   */\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false;\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionHashByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionConfigHash\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionStateChangeCallbacksByHash: {\n    [hash: SubscriptionConfigHash]:\n      | Set<SubscriptionStateChangeCallback>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = commitmentOrConfig.httpAgent;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n      httpAgent,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(\n    publicKeys: PublicKey[],\n    rawConfig?: GetMultipleAccountsConfig,\n  ): Promise<\n    RpcResponseAndContext<(AccountInfo<Buffer | ParsedAccountData> | null)[]>\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: TransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy: TransactionConfirmationStrategy | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy as TransactionConfirmationStrategy;\n\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature,\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    }\n  }\n\n  private getCancellationPromise(signal?: AbortSignal): Promise<never> {\n    return new Promise<never>((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n\n  private getTransactionConfirmationPromise({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }): {\n    abortConfirmation(): void;\n    confirmationPromise: Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>;\n  } {\n    let signatureSubscriptionId: number | undefined;\n    let disposeSignatureSubscriptionStateChangeObserver:\n      | SubscriptionStateChangeDisposeFn\n      | undefined;\n    let done = false;\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            signatureSubscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          commitment,\n        );\n        const subscriptionSetupPromise = new Promise<void>(\n          resolveSubscriptionSetup => {\n            if (signatureSubscriptionId == null) {\n              resolveSubscriptionSetup();\n            } else {\n              disposeSignatureSubscriptionStateChangeObserver =\n                this._onSubscriptionStateChange(\n                  signatureSubscriptionId,\n                  nextState => {\n                    if (nextState === 'subscribed') {\n                      resolveSubscriptionSetup();\n                    }\n                  },\n                );\n            }\n          },\n        );\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {context, value} = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip': {\n                if (value.confirmationStatus === 'processed') {\n                  return;\n                }\n                break;\n              }\n              case 'finalized':\n              case 'max':\n              case 'root': {\n                if (\n                  value.confirmationStatus === 'processed' ||\n                  value.confirmationStatus === 'confirmed'\n                ) {\n                  return;\n                }\n                break;\n              }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value,\n              },\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {abortConfirmation, confirmationPromise};\n  }\n\n  private async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {abortSignal, lastValidBlockHeight, signature},\n  }: {\n    commitment?: Commitment;\n    strategy: BlockheightBasedTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED;\n    }>(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature,\n    },\n  }: {\n    commitment?: Commitment;\n    strategy: DurableNonceTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.NONCE_INVALID;\n      slotInWhichNonceDidAdvance: number | null;\n    }>(resolve => {\n      let currentNonceValue: string | undefined = nonceValue;\n      let lastCheckedSlot: number | null = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {context, value: nonceAccount} = await this.getNonceAndContext(\n            nonceAccountPubkey,\n            {\n              commitment,\n              minContextSlot,\n            },\n          );\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot,\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus:\n          | RpcResponseAndContext<SignatureStatus | null>\n          | null\n          | undefined;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (\n            status.context.slot <\n            (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)\n          ) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {confirmationStatus} = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (\n                confirmationStatus !== 'processed' &&\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              ((_: never) => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {err: signatureStatus.value.err},\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.TIMED_OUT;\n      timeoutMs: number;\n    }>(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip': {\n          timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n          break;\n        }\n        // exhaust enums to ensure full coverage\n        case 'finalized':\n        case 'max':\n        case 'root':\n      }\n      timeoutId = setTimeout(\n        () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n        timeoutMs,\n      );\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({\n        commitment,\n        signature,\n      });\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(\n          signature,\n          outcome.timeoutMs / 1000,\n        );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate(): Promise<InflationRate> {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(commitment?: Commitment): Promise<\n    RpcResponseAndContext<{\n      blockhash: Blockhash;\n      feeCalculator: FeeCalculator;\n    }>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: VersionedMessage,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number | null>> {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of prioritization fees from recent blocks.\n   */\n  async getRecentPrioritizationFees(\n    config?: GetRecentPrioritizationFeesConfig,\n  ): Promise<RecentPrioritizationFees[]> {\n    const accounts = config?.lockedWritableAccounts?.map(key => key.toBase58());\n    const args = this._buildArgs(accounts?.length ? [accounts] : []);\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPrioritizationFees',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPrioritizationFeesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent prioritization fees',\n      );\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<AccountsModeBlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'none'},\n  ): Promise<NoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<VersionedAccountsModeBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<VersionedNoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | VersionedBlockResponse\n    | VersionedAccountsModeBlockResponse\n    | VersionedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          const {result} = res;\n          return result\n            ? {\n                ...result,\n                transactions: result.transactions.map(\n                  ({transaction, meta, version}) => ({\n                    meta,\n                    transaction: {\n                      ...transaction,\n                      message: versionedMessageFromResponse(\n                        version,\n                        transaction.message,\n                      ),\n                    },\n                    version,\n                  }),\n                ),\n              }\n            : null;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(\n        e as JSONRPCError,\n        'failed to get confirmed block',\n      );\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<ParsedNoneModeBlockResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | ParsedBlockResponse\n    | ParsedAccountsModeBlockResponse\n    | ParsedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetParsedBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e as JSONRPCError, 'failed to get block');\n    }\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  getBlockHeight = (() => {\n    const requestPromises: {[hash: string]: Promise<number>} = {};\n    return async (\n      commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n    ): Promise<number> => {\n      const {commitment, config} =\n        extractCommitmentFromConfig(commitmentOrConfig);\n      const args = this._buildArgs(\n        [],\n        commitment,\n        undefined /* encoding */,\n        config,\n      );\n      const requestHash = fastStableStringify(args);\n      requestPromises[requestHash] =\n        requestPromises[requestHash] ??\n        (async () => {\n          try {\n            const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n            const res = create(unsafeRes, jsonRpcResult(number()));\n            if ('error' in res) {\n              throw new SolanaJSONRPCError(\n                res.error,\n                'failed to get block height information',\n              );\n            }\n            return res.result;\n          } finally {\n            delete requestPromises[requestHash];\n          }\n        })();\n      return await requestPromises[requestHash];\n    };\n  })();\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceAndContextConfig,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitmentOrConfig,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceConfig,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n  simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(\n    transaction: VersionedTransaction,\n    config?: SimulateTransactionConfig,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(\n    transactionOrMessage: VersionedTransaction | Transaction | Message,\n    configOrSigners?: SimulateTransactionConfig | Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction =\n        Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config: any = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n  sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(\n    transaction: VersionedTransaction,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(\n    transaction: VersionedTransaction | Transaction,\n    signersOrOptions?: Array<Signer> | SendOptions,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, signersOrOptions);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration =\n      (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending',\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  private _setSubscription(\n    hash: SubscriptionConfigHash,\n    nextSubscription: Subscription,\n  ) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks =\n        this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private _onSubscriptionStateChange(\n    clientSubscriptionId: ClientSubscriptionId,\n    callback: SubscriptionStateChangeCallback,\n  ): SubscriptionStateChangeDisposeFn {\n    const hash =\n      this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = (this._subscriptionStateChangeCallbacksByHash[\n      hash\n    ] ||= new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'subscribing',\n                });\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._setSubscription(hash, {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                });\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'pending',\n                });\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._setSubscription(hash, {\n                      ...subscription,\n                      state: 'subscribed',\n                    });\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribed',\n                });\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n", "import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n", "import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n", "import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n", "import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n", "import {hmac} from '@noble/hashes/hmac';\nimport {sha256} from '@noble/hashes/sha256';\nimport * as secp256k1 from '@noble/secp256k1';\n\n// Supply a synchronous hashing algorithm to make this\n// library interoperable with the synchronous APIs in web3.js.\nsecp256k1.utils.hmacSha256Sync = (key: Uint8Array, ...msgs: Uint8Array[]) => {\n  const h = hmac.create(sha256, key);\n  msgs.forEach(msg => h.update(msg));\n  return h.digest();\n};\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.signSync>[0],\n  privKey: Parameters<typeof secp256k1.signSync>[1],\n) => secp256k1.signSync(msgHash, privKey, {der: false, recovered: true});\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n", "import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {keccak_256} from '@noble/hashes/sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n", "import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n", "import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * AuthorizeWithSeed instruction params\n */\nexport type AuthorizeVoteWithSeedParams = {\n  currentAuthorityDerivedKeyBasePubkey: PublicKey;\n  currentAuthorityDerivedKeyOwnerPubkey: PublicKey;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n  votePubkey: PublicKey;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType,\n      },\n    } = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(\n        currentAuthorityDerivedKeyOwnerPubkey,\n      ),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n      votePubkey: instruction.keys[0].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'AuthorizeWithSeed' | 'InitializeAccount' | 'Withdraw';\n\n/** @internal */\nexport type VoteAuthorizeWithSeedArgs = Readonly<{\n  currentAuthorityDerivedKeyOwnerPubkey: Uint8Array;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorized: Uint8Array;\n  voteAuthorizationType: number;\n}>;\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  AuthorizeWithSeed: IInstructionInputData & {\n    voteAuthorizeWithSeedArgs: VoteAuthorizeWithSeedArgs;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<VoteInstructionInputData['AuthorizeWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteAuthorizeWithSeedArgs(),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params: AuthorizeVoteWithSeedParams): Transaction {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(\n          currentAuthorityDerivedKeyOwnerPubkey.toBuffer(),\n        ),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index,\n      },\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insuffcient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n}\n", "import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n", "import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n", "const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n", "import type {Buffer} from 'buffer';\n\nimport {\n  BlockheightBasedTransactionConfirmationStrategy,\n  Connection,\n  DurableNonceTransactionConfirmationStrategy,\n  TransactionConfirmationStrategy,\n} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {TransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategy: TransactionConfirmationStrategy,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategyOrConfirmOptions:\n    | TransactionConfirmationStrategy\n    | ConfirmOptions\n    | undefined,\n  maybeConfirmOptions?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  let confirmationStrategy: TransactionConfirmationStrategy | undefined;\n  let options: ConfirmOptions | undefined;\n  if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'lastValidBlockHeight',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as BlockheightBasedTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'nonceValue',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as DurableNonceTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions as\n      | ConfirmOptions\n      | undefined;\n  }\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy\n    ? connection.confirmTransaction(confirmationStrategy, commitment)\n    : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n", "export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './errors';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './programs';\nexport * from './publickey';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './sysvar';\nexport * from './utils';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null],
  "mappings": "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",
  "names": ["encode", "i", "j", "decode", "string", "hash", "instance", "crypto", "isLE", "_32n", "finished", "offset", "hexes", "array", "bytes", "number", "v3", "hash", "publicKey", "crypto", "window", "f", "mask", "offset", "offset2", "u8", "offset", "TextDecoder", "TextEncoder", "string", "offset", "bytes", "mod", "array", "string", "serialize", "deserialize", "deserializeUnchecked", "offset", "split", "span", "union", "Boolean", "toBigIntLE", "toBufferLE", "isIterable", "x", "isObject", "Symbol", "iterator", "print", "value", "JSON", "stringify", "shiftIterator", "input", "done", "next", "undefined", "toFailure", "result", "context", "struct", "message", "path", "branch", "type", "refinement", "key", "length", "toFailures", "r", "failure", "run", "options", "coerce", "mask", "ctx", "coercer", "schema", "Array", "isArray", "valid", "validator", "k", "v", "s", "entries", "ts", "t", "Map", "set", "Set", "add", "refiner", "assert", "validate", "create", "is", "tuples", "tuple", "error", "StructError", "define", "name", "Struct", "any", "array", "Element", "i", "slice", "boolean", "instance", "Class", "literal", "constant", "description", "never", "nullable", "number", "isNaN", "optional", "record", "Key", "Value", "string", "Elements", "Never", "Math", "max", "keys", "Object", "union", "Structs", "map", "join", "failures", "S", "first", "push", "unknown", "condition", "TypeError", "constructor", "cached", "rest", "msg", "assign", "props", "validate", "offset", "offset", "bytes", "version", "offset", "bytes", "output", "offset", "bytes", "version", "require_browser", "self", "err", "gen", "_asyncToGenerator", "self", "_classCallCheck", "instance", "_createClass", "_setPrototypeOf", "o", "p", "_inherits", "self", "_possibleConstructorReturn", "self", "_getPrototypeOf", "o", "_createSuper", "_isNativeReflectConstruct", "CommonClient", "_createSuper", "_isNativeReflectConstruct", "WebSocketBrowserImpl", "type", "_0n", "_1n", "_2n", "bytes", "hash", "finished", "CURVE", "mod", "constTimeNegate", "bytesToHex", "concatBytes", "hexes", "_0n", "POW_2_256", "hexToBytes", "array", "bytes", "ensureBytes", "normalizeScalar", "pow2", "_2n", "invert", "number", "_1n", "invertBatch", "hash", "Point", "Signature", "utils", "signSync", "nodeCrypto", "_8n", "pointPrecomputes", "crypto", "init_esm", "d", "window", "f", "mask", "offset", "offset2", "hashLen", "isOnCurve", "publicKey", "ed25519", "Point", "fromHex", "isPublicKeyData", "value", "_bn", "undefined", "getAlloc", "type", "fields", "getItemAlloc", "item", "span", "alloc", "property", "field", "Array", "isArray", "length", "elementLayout", "layout", "forEach", "decodeLength", "bytes", "len", "size", "elem", "shift", "encodeLength", "rem_len", "push", "assert", "condition", "message", "Error", "sendAndConfirmTransaction", "connection", "transaction", "signers", "options", "sendOptions", "skipPreflight", "preflightCommitment", "commitment", "maxRetries", "minContextSlot", "signature", "sendTransaction", "status", "recentBlockhash", "lastValidBlockHeight", "confirmTransaction", "abortSignal", "blockhash", "minNonceContextSlot", "nonceInfo", "nonceInstruction", "nonceAccountPubkey", "keys", "pubkey", "nonceValue", "nonce", "console", "warn", "err", "JSON", "stringify", "sleep", "ms", "Promise", "resolve", "setTimeout", "encodeData", "allocLength", "Layout", "data", "Buffer", "layoutFields", "Object", "assign", "instruction", "index", "encode", "trailingZeros", "n", "nextPowerOfTwo", "decodeData", "decoded", "decode", "typeIndex", "makeWebsocketUrl", "endpoint", "matches", "match", "URL_RE", "TypeError", "_", "hostish", "portWithColon", "rest", "protocol", "startsWith", "startPort", "parseInt", "slice", "websocketPort", "assertEndpointUrl", "putativeUrl", "test", "extractCommitmentFromConfig", "commitmentOrConfig", "config", "specifiedCommitment", "specifiedConfig", "createRpcResult", "result", "union", "pick", "jsonrpc", "literal", "id", "string", "error", "code", "unknown", "optional", "any", "jsonRpcResult", "schema", "coerce", "UnknownRpcResult", "create", "jsonRpcResultAndContext", "context", "slot", "number", "notificationResultAndContext", "versionedMessageFromResponse", "version", "response", "MessageV0", "header", "staticAccountKeys", "accountKeys", "map", "accountKey", "PublicKey", "compiledInstructions", "instructions", "ix", "programIdIndex", "accountKeyIndexes", "accounts", "bs58", "addressTableLookups", "Message", "createRpcClient", "url", "httpHeaders", "customFetch", "fetchMiddleware", "disableRetryOnRateLimit", "httpAgent", "fetch", "fetchImpl", "agent", "fetchWithMiddleware", "info", "init", "modifiedFetchArgs", "reject", "modifiedInfo", "modifiedInit", "clientBrowser", "RpcClient", "request", "callback", "method", "body", "headers", "COMMON_HTTP_HEADERS", "too_many_requests_retries", "res", "waitTime", "log", "statusText", "text", "ok", "createRpcRequest", "client", "args", "createRpcBatchRequest", "requests", "batch", "params", "methodName", "generatePrivateKey", "generateKeypair", "getPublicKey", "sign", "verify", "toBuffer", "Struct", "SOLANA_SCHEMA", "MAX_SEED_LENGTH", "PUBLIC_KEY_LENGTH", "uniquePublicKeyCounter", "BPF_LOADER_DEPRECATED_PROGRAM_ID", "PACKET_DATA_SIZE", "VERSION_PREFIX_MASK", "SIGNATURE_LENGTH_IN_BYTES", "TransactionExpiredBlockheightExceededError", "TransactionExpiredTimeoutError", "TransactionExpiredNonceInvalidError", "MessageAccountKeys", "rustString", "authorized", "lockup", "voteInit", "voteAuthorizeWithSeedArgs", "CompiledKeys", "TransactionStatus", "DEFAULT_SIGNATURE", "TransactionInstruction", "Transaction", "SYSVAR_CLOCK_PUBKEY", "SYSVAR_EPOCH_SCHEDULE_PUBKEY", "SYSVAR_INSTRUCTIONS_PUBKEY", "SYSVAR_RECENT_BLOCKHASHES_PUBKEY", "SYSVAR_RENT_PUBKEY", "SYSVAR_REWARDS_PUBKEY", "SYSVAR_SLOT_HASHES_PUBKEY", "SYSVAR_SLOT_HISTORY_PUBKEY", "SYSVAR_STAKE_HISTORY_PUBKEY", "FeeCalculatorLayout", "NonceAccountLayout", "NONCE_ACCOUNT_LENGTH", "NonceAccount", "encodeDecode", "bigInt", "u64", "SYSTEM_INSTRUCTION_LAYOUTS", "SystemProgram", "CHUNK_SIZE", "Loader", "BPF_LOADER_PROGRAM_ID", "MINIMUM_SLOT_PER_EPOCH", "EpochSchedule", "SendTransactionError", "SolanaJSONRPCError", "RpcWebSocketClient", "NUM_TICKS_PER_SECOND", "DEFAULT_TICKS_PER_SLOT", "NUM_SLOTS_PER_SECOND", "MS_PER_SLOT", "LOOKUP_TABLE_META_SIZE", "AddressLookupTableAccount", "LookupTableMetaLayout", "PublicKeyFromString", "RawAccountDataResult", "BufferFromRawAccountData", "BLOCKHASH_CACHE_TIMEOUT_MS", "GetInflationGovernorResult", "GetInflationRewardResult", "GetRecentPrioritizationFeesResult", "GetInflationRateResult", "GetEpochInfoResult", "GetEpochScheduleResult", "GetLeaderScheduleResult", "TransactionErrorResult", "SignatureStatusResult", "SignatureReceivedResult", "VersionResult", "SimulatedTransactionResponseStruct", "BlockProductionResponseStruct", "GetInflationGovernorRpcResult", "GetInflationRateRpcResult", "GetRecentPrioritizationFeesRpcResult", "GetEpochInfoRpcResult", "GetEpochScheduleRpcResult", "GetLeaderScheduleRpcResult", "SlotRpcResult", "GetSupplyRpcResult", "TokenAmountResult", "GetTokenLargestAccountsResult", "GetTokenAccountsByOwner", "ParsedAccountDataResult", "GetParsedTokenAccountsByOwner", "GetLargestAccountsRpcResult", "AccountInfoResult", "KeyedAccountInfoResult", "ParsedOrRawAccountData", "ParsedAccountInfoResult", "KeyedParsedAccountInfoResult", "StakeActivationResult", "GetConfirmedSignaturesForAddress2RpcResult", "GetSignaturesForAddressRpcResult", "AccountNotificationResult", "ProgramAccountInfoResult", "ProgramAccountNotificationResult", "SlotInfoResult", "SlotNotificationResult", "SlotUpdateResult", "SlotUpdateNotificationResult", "SignatureNotificationResult", "RootNotificationResult", "ContactInfoResult", "VoteAccountInfoResult", "GetVoteAccounts", "ConfirmationStatus", "SignatureStatusResponse", "GetSignatureStatusesRpcResult", "GetMinimumBalanceForRentExemptionRpcResult", "AddressTableLookupStruct", "ConfirmedTransactionResult", "AnnotatedAccountKey", "ConfirmedTransactionAccountsModeResult", "ParsedInstructionResult", "RawInstructionResult", "InstructionResult", "UnknownInstructionResult", "ParsedOrRawInstruction", "ParsedConfirmedTransactionResult", "TokenBalanceResult", "LoadedAddressesResult", "ConfirmedTransactionMetaResult", "ParsedConfirmedTransactionMetaResult", "TransactionVersionStruct", "RewardsResult", "GetBlockRpcResult", "GetNoneModeBlockRpcResult", "GetAccountsModeBlockRpcResult", "GetParsedBlockRpcResult", "GetParsedAccountsModeBlockRpcResult", "GetParsedNoneModeBlockRpcResult", "GetConfirmedBlockRpcResult", "GetBlockSignaturesRpcResult", "GetTransactionRpcResult", "GetParsedTransactionRpcResult", "GetRecentBlockhashAndContextRpcResult", "GetLatestBlockhashRpcResult", "PerfSampleResult", "GetRecentPerformanceSamplesRpcResult", "GetFeeCalculatorRpcResult", "RequestAirdropRpcResult", "SendTransactionRpcResult", "LogsResult", "LogsNotificationResult", "Connection", "Keypair", "LOOKUP_TABLE_INSTRUCTION_LAYOUTS", "AddressLookupTableProgram", "COMPUTE_BUDGET_INSTRUCTION_LAYOUTS", "ComputeBudgetProgram", "PRIVATE_KEY_BYTES", "PUBLIC_KEY_BYTES", "SIGNATURE_BYTES", "ED25519_INSTRUCTION_LAYOUT", "Ed25519Program", "ecdsaSign", "publicKeyCreate", "ETHEREUM_ADDRESS_BYTES", "SIGNATURE_OFFSETS_SERIALIZED_SIZE", "SECP256K1_INSTRUCTION_LAYOUT", "Secp256k1Program", "STAKE_CONFIG_ID", "Lockup", "STAKE_INSTRUCTION_LAYOUTS", "StakeAuthorizationLayout", "StakeProgram", "VOTE_INSTRUCTION_LAYOUTS", "VoteAuthorizationLayout", "VoteProgram", "VALIDATOR_INFO_KEY", "InfoString", "VOTE_PROGRAM_ID", "VoteAccountLayout", "utils", "sha512Sync", "m", "sha512", "concatBytes", "randomPrivateKey", "privateScalar", "secretKey", "Uint8Array", "set", "sync", "arr", "isBuffer", "from", "buffer", "byteOffset", "byteLength", "constructor", "properties", "serialize", "deserialize", "decodeUnchecked", "deserializeUnchecked", "Map", "Symbol", "toStringTag", "BN", "unique", "key", "equals", "eq", "toBase58", "toBytes", "toJSON", "buf", "b", "toArrayLike", "zeroPad", "copy", "toString", "createWithSeed", "fromPublicKey", "seed", "programId", "concat", "publicKeyBytes", "sha256", "createProgramAddressSync", "seeds", "createProgramAddress", "findProgramAddressSync", "address", "seedsWithNonce", "findProgramAddress", "pubkeyData", "default", "kind", "defineProperty", "prototype", "timeoutSeconds", "toFixed", "accountKeysFromLookups", "keySegments", "writable", "readonly", "get", "keySegment", "flat", "compileInstructions", "U8_MAX", "keyIndexMap", "findKeyIndex", "keyIndex", "meta", "blob", "rsl", "struct", "u32", "offset", "_decode", "bind", "_encode", "rslShim", "str", "chars", "ns64", "u8", "payer", "keyMetaMap", "compile", "getOrInsertDefault", "keyMeta", "isSigner", "isWritable", "isInvoked", "payerKeyMeta", "accountMeta", "getMessageComponents", "mapEntries", "entries", "writableSigners", "filter", "readonlySigners", "writableNonSigners", "readonlyNonSigners", "numRequiredSignatures", "numReadonlySignedAccounts", "numReadonlyUnsignedAccounts", "payerAddress", "extractTableLookup", "lookupTable", "writableIndexes", "drainedWritableKeys", "drainKeysFoundInLookupTable", "state", "addresses", "readonlyIndexes", "drainedReadonlyKeys", "lookupTableEntries", "keyMetaFilter", "lookupTableIndexes", "drainedKeys", "lookupTableIndex", "findIndex", "entry", "delete", "indexToProgramIds", "account", "getAccountKeys", "compiledKeys", "payerKey", "isAccountSigner", "isAccountWritable", "numSignedAccounts", "unsignedAccountIndex", "numUnsignedAccounts", "numWritableUnsignedAccounts", "numWritableSignedAccounts", "isProgramId", "has", "programIds", "values", "nonProgramIds", "numKeys", "keyCount", "shortvec", "keyIndicesCount", "dataCount", "keyIndices", "dataLength", "instructionCount", "instructionBuffer", "instructionBufferLength", "instructionLayout", "seq", "signDataLayout", "signData", "byteArray", "accountCount", "i", "dataSlice", "messageArgs", "numAccountKeysFromLookups", "count", "lookup", "addressLookupTableAccounts", "resolveAddressTableLookups", "numStaticAccountKeys", "lookupAccountKeysIndex", "numWritableLookupAccountKeys", "reduce", "tableLookup", "tableAccount", "find", "lookupTableAccounts", "extractResult", "addressTableLookup", "encodedStaticAccountKeysLength", "serializedInstructions", "serializeInstructions", "encodedInstructionsLength", "serializedAddressTableLookups", "serializeAddressTableLookups", "encodedAddressTableLookupsLength", "messageLayout", "serializedMessage", "MESSAGE_VERSION_0_PREFIX", "serializedMessageLength", "prefix", "staticAccountKeysLength", "instructionsLength", "addressTableLookupsLength", "serializedLength", "encodedAccountKeyIndexesLength", "encodedDataLength", "encodedWritableIndexesLength", "encodedReadonlyIndexesLength", "addressTableLookupLayout", "maskedPrefix", "splice", "accountKeyIndexesLength", "addressTableLookupsCount", "writableIndexesLength", "readonlyIndexesLength", "fill", "opts", "signatures", "feePayer", "_message", "_json", "hasOwnProperty", "call", "add", "items", "compileMessage", "accountMetas", "includes", "uniqueMetas", "pubkeyString", "uniqueIndex", "x", "sort", "y", "localeCompare", "feePayerIndex", "payerMeta", "unshift", "signedKeys", "unsignedKeys", "indexOf", "invariant", "_compile", "valid", "every", "pair", "serializeMessage", "getEstimatedFee", "getFeeForMessage", "setSigners", "seen", "Set", "uniqueSigners", "signer", "_partialSign", "partialSign", "_addSignature", "addSignature", "sigpair", "verifySignatures", "requireAllSignatures", "_verifySignatures", "_serialize", "signatureCount", "transactionLength", "wireTransaction", "keyObj", "populate", "sigPubkeyPair", "some", "nu64", "authorizedPubkey", "feeCalculator", "fromAccountData", "nonceAccount", "bigIntLayout", "src", "toBigIntLE", "toBufferLE", "freeze", "Create", "Assign", "Transfer", "CreateWithSeed", "AdvanceNonceAccount", "WithdrawNonceAccount", "InitializeNonceAccount", "AuthorizeNonceAccount", "Allocate", "AllocateWithSeed", "AssignWithSeed", "TransferWithSeed", "UpgradeNonceAccount", "createAccount", "lamports", "space", "fromPubkey", "newAccountPubkey", "transfer", "BigInt", "basePubkey", "toPubkey", "base", "accountPubkey", "createAccountWithSeed", "createNonceAccount", "noncePubkey", "initParams", "nonceInitialize", "instructionData", "nonceAdvance", "nonceWithdraw", "nonceAuthorize", "newAuthorizedPubkey", "allocate", "getMinNumSignatures", "Math", "ceil", "chunkSize", "load", "program", "balanceNeeded", "getMinimumBalanceForRentExemption", "programInfo", "getAccountInfo", "executable", "owner", "dataLayout", "array", "transactions", "bytesLength", "bytesLengthPadding", "_rpcEndpoint", "REQUESTS_PER_SECOND", "all", "slotsPerEpoch", "leaderScheduleSlotOffset", "warmup", "firstNormalEpoch", "firstNormalSlot", "getEpoch", "getEpochAndSlotIndex", "epoch", "epochLen", "getSlotsInEpoch", "slotIndex", "normalSlotIndex", "normalEpochIndex", "floor", "getFirstSlotInEpoch", "pow", "getLastSlotInEpoch", "logs", "customMessage", "name", "globalThis", "RpcWebSocketCommonClient", "generate_request_id", "webSocketFactory", "rpc", "createRpc", "autoconnect", "max_reconnects", "reconnect", "reconnect_interval", "underlyingSocket", "socket", "readyState", "notify", "isActive", "U64_MAX", "deactivationSlot", "accountData", "serializedAddressesLen", "numSerializedAddresses", "lastExtendedSlot", "lastExtendedSlotStartIndex", "lastExtendedStartIndex", "authority", "instance", "tuple", "foundation", "foundationTerm", "initial", "taper", "terminal", "nullable", "effectiveSlot", "amount", "postBalance", "commission", "prioritizationFee", "total", "validator", "slotsInEpoch", "absoluteSlot", "blockHeight", "transactionCount", "boolean", "record", "rentEpoch", "unitsConsumed", "returnData", "byIdentity", "range", "firstSlot", "lastSlot", "circulating", "nonCirculating", "nonCirculatingAccounts", "uiAmount", "decimals", "uiAmountString", "parsed", "active", "inactive", "memo", "blockTime", "subscription", "parent", "root", "timestamp", "stats", "numTransactionEntries", "numSuccessfulTransactions", "numFailedTransactions", "maxTransactionsPerEntry", "gossip", "tpu", "votePubkey", "nodePubkey", "activatedStake", "epochVoteAccount", "epochCredits", "lastVote", "rootSlot", "current", "delinquent", "confirmations", "confirmationStatus", "source", "accountIndex", "mint", "uiTokenAmount", "fee", "innerInstructions", "preBalances", "postBalances", "logMessages", "preTokenBalances", "postTokenBalances", "loadedAddresses", "computeUnitsConsumed", "rewardType", "previousBlockhash", "parentSlot", "rewards", "lamportsPerSignature", "numTransactions", "numSlots", "samplePeriodSecs", "process", "_commitment", "_confirmTransactionInitialTimeout", "_rpcWsEndpoint", "_rpcClient", "_rpcRequest", "_rpcBatchRequest", "_rpcWebSocket", "_rpcWebSocketConnected", "_rpcWebSocketHeartbeat", "_rpcWebSocketIdleTimeout", "_rpcWebSocketGeneration", "_disableBlockhashCaching", "_pollingBlockhash", "_blockhashInfo", "latestBlockhash", "lastFetch", "transactionSignatures", "simulatedSignatures", "_nextClientSubscriptionId", "_subscriptionDisposeFunctionsByClientSubscriptionId", "_subscriptionHashByClientSubscriptionId", "_subscriptionStateChangeCallbacksByHash", "_subscriptionCallbacksByServerSubscriptionId", "_subscriptionsByHash", "_subscriptionsAutoDisposedByRpc", "getBlockHeight", "requestPromises", "_buildArgs", "requestHash", "fastStableStringify", "unsafeRes", "wsEndpoint", "confirmTransactionInitialTimeout", "Infinity", "on", "_wsOnOpen", "_wsOnError", "_wsOnClose", "_wsOnAccountNotification", "_wsOnProgramAccountNotification", "_wsOnSlotNotification", "_wsOnSlotUpdatesNotification", "_wsOnSignatureNotification", "_wsOnRootNotification", "_wsOnLogsNotification", "rpcEndpoint", "getBalanceAndContext", "getBalance", "then", "catch", "e", "getBlockTime", "getMinimumLedgerSlot", "getFirstAvailableBlock", "getSupply", "configArg", "getTokenSupply", "tokenMintAddress", "getTokenAccountBalance", "tokenAddress", "getTokenAccountsByOwner", "ownerAddress", "_args", "getParsedTokenAccountsByOwner", "getLargestAccounts", "arg", "getTokenLargestAccounts", "mintAddress", "getAccountInfoAndContext", "getParsedAccountInfo", "getMultipleParsedAccounts", "publicKeys", "rawConfig", "getMultipleAccountsInfoAndContext", "getMultipleAccountsInfo", "getStakeActivation", "getProgramAccounts", "configOrCommitment", "encoding", "configWithoutEncoding", "getParsedProgramAccounts", "strategy", "rawSignature", "aborted", "reason", "decodedSignature", "confirmTransactionUsingLegacyTimeoutStrategy", "confirmTransactionUsingBlockHeightExceedanceStrategy", "confirmTransactionUsingDurableNonceStrategy", "getCancellationPromise", "signal", "addEventListener", "getTransactionConfirmationPromise", "signatureSubscriptionId", "disposeSignatureSubscriptionStateChangeObserver", "done", "confirmationPromise", "onSignature", "__type", "PROCESSED", "subscriptionSetupPromise", "resolveSubscriptionSetup", "_onSubscriptionStateChange", "nextState", "getSignatureStatus", "abortConfirmation", "removeSignatureListener", "expiryPromise", "checkBlockHeight", "_e", "currentBlockHeight", "BLOCKHEIGHT_EXCEEDED", "cancellationPromise", "outcome", "race", "currentNonceValue", "lastCheckedSlot", "getCurrentNonceValue", "getNonceAndContext", "NONCE_INVALID", "slotInWhichNonceDidAdvance", "signatureStatus", "commitmentForStatus", "timeoutId", "timeoutMs", "TIMED_OUT", "clearTimeout", "getClusterNodes", "getVoteAccounts", "getSlot", "getSlotLeader", "getSlotLeaders", "startSlot", "limit", "getSignatureStatuses", "getTransactionCount", "getTotalSupply", "excludeNonCirculatingAccountsList", "getInflationGovernor", "getInflationReward", "getInflationRate", "getEpochInfo", "getEpochSchedule", "epochSchedule", "getLeaderSchedule", "getRecentBlockhashAndContext", "getRecentPerformanceSamples", "getFeeCalculatorForBlockhash", "wireMessage", "getRecentPrioritizationFees", "lockedWritableAccounts", "getRecentBlockhash", "getLatestBlockhash", "getLatestBlockhashAndContext", "getVersion", "getGenesisHash", "getBlock", "_buildArgsAtLeastConfirmed", "transactionDetails", "getParsedBlock", "getBlockProduction", "extra", "c", "getTransaction", "getParsedTransaction", "getParsedTransactions", "getTransactions", "getConfirmedBlock", "block", "getBlocks", "endSlot", "getBlockSignatures", "getConfirmedBlockSignatures", "getConfirmedTransaction", "getParsedConfirmedTransaction", "getParsedConfirmedTransactions", "getConfirmedSignaturesForAddress", "firstAvailableBlock", "until", "highestConfirmedRoot", "before", "confirmedSignatureInfo", "getConfirmedSignaturesForAddress2", "getSignaturesForAddress", "getAddressLookupTable", "accountInfo", "getNonce", "requestAirdrop", "to", "_blockhashWithExpiryBlockHeight", "disableCache", "timeSinceFetch", "Date", "now", "expired", "_pollNewBlockhash", "startTime", "cachedLatestBlockhash", "cachedBlockhash", "getStakeMinimumDelegation", "simulateTransaction", "transactionOrMessage", "configOrSigners", "includeAccounts", "versionedTx", "encodedTransaction", "originalTx", "sigVerify", "traceIndent", "logTrace", "join", "signersOrOptions", "sendRawTransaction", "rawTransaction", "sendEncodedTransaction", "setInterval", "_updateSubscriptions", "Number", "MAX_SAFE_INTEGER", "clearInterval", "hash", "_setSubscription", "nextSubscription", "prevState", "stateChangeCallbacks", "cb", "clientSubscriptionId", "close", "connect", "activeWebSocketGeneration", "isCurrentConnectionStillActive", "callbacks", "serverSubscriptionId", "unsubscribeMethod", "_handleServerNotification", "callbackArgs", "notification", "_makeSubscription", "subscriptionConfig", "existingSubscription", "onAccountChange", "removeAccountChangeListener", "_unsubscribeClientSubscription", "accountId", "onProgramAccountChange", "filters", "removeProgramAccountChangeListener", "onLogs", "mentions", "removeOnLogsListener", "onSlotChange", "removeSlotChangeListener", "onSlotUpdate", "removeSlotUpdateListener", "subscriptionName", "dispose", "override", "_err", "onSignatureWithOptions", "onRootChange", "removeRootChangeListener", "keypair", "_keypair", "generate", "fromSecretKey", "skipValidation", "computedPublicKey", "ii", "fromSeed", "CreateLookupTable", "bigintLayout", "FreezeLookupTable", "ExtendLookupTable", "DeactivateLookupTable", "CloseLookupTable", "createLookupTable", "lookupTableAddress", "bumpSeed", "recentSlot", "freezeLookupTable", "extendLookupTable", "addr", "deactivateLookupTable", "closeLookupTable", "recipient", "RequestUnits", "RequestHeapFrame", "SetComputeUnitLimit", "SetComputeUnitPrice", "requestUnits", "requestHeapFrame", "setComputeUnitLimit", "setComputeUnitPrice", "microLamports", "u16", "createInstructionWithPublicKey", "instructionIndex", "publicKeyOffset", "signatureOffset", "messageDataOffset", "numSignatures", "padding", "signatureInstructionIndex", "publicKeyInstructionIndex", "messageDataSize", "messageInstructionIndex", "createInstructionWithPrivateKey", "privateKey", "secp256k1", "hmacSha256Sync", "msgs", "h", "hmac", "msg", "update", "digest", "msgHash", "privKey", "signSync", "der", "recovered", "isValidPrivateKey", "publicKeyToEthAddress", "keccak_256", "recoveryId", "createInstructionWithEthAddress", "ethAddress", "rawAddress", "substr", "dataStart", "ethAddressOffset", "ethAddressInstructionIndex", "pkey", "messageHash", "unixTimestamp", "custodian", "Initialize", "Authorize", "Delegate", "Split", "Withdraw", "Deactivate", "Merge", "AuthorizeWithSeed", "Staker", "Withdrawer", "initialize", "stakePubkey", "maybeLockup", "staker", "withdrawer", "delegate", "authorize", "stakeAuthorizationType", "custodianPubkey", "newAuthorized", "authorizeWithSeed", "authorityBase", "authoritySeed", "authorityOwner", "splitInstruction", "splitStakePubkey", "split", "splitWithSeed", "merge", "sourceStakePubKey", "withdraw", "deactivate", "InitializeAccount", "Voter", "initializeAccount", "authorizedVoter", "authorizedWithdrawer", "voteAuthorizationType", "currentAuthorityDerivedKeyBasePubkey", "currentAuthorityDerivedKeyOwnerPubkey", "currentAuthorityDerivedKeySeed", "authorizedWithdrawerPubkey", "safeWithdraw", "currentVoteAccountBalance", "rentExemptMinimum", "website", "details", "keybaseUsername", "createChainIdMiddleware", "chainId", "req", "res", "next", "end", "method", "result", "createProviderConfigMiddleware", "providerConfig", "createConfigMiddleware", "mergeMiddleware", "createJsonRpcClient", "rpcTarget", "fetchMiddleware", "createFetchMiddleware", "networkMiddleware", "createGetAccountsMiddleware", "getAccounts", "createAsyncMiddleware", "_regeneratorRuntime", "request", "response", "Error", "accounts", "undefined", "createRequestAccountsMiddleware", "requestAccounts", "createGenericJRPCMiddleware", "targetMethod", "handler", "createSolanaMiddleware", "providerHandlers", "signTransaction", "signAndSendTransaction", "signAllTransactions", "signMessage", "getPrivateKey", "getSecretKey", "createChainSwitchMiddleware", "addNewChainConfig", "switchSolanaChain", "createAccountMiddleware", "updatePrivatekey", "createInjectedProviderProxyMiddleware", "provider", "_next", "_objectSpread", "getProviderHandlers", "privKey", "getProviderEngineProxy", "keyPairGenerator", "Keypair", "fromSecretKey", "Buffer", "from", "WalletInitializationError", "invalidParams", "keyPair", "publicKey", "toBase58", "bs58", "encode", "secretKey", "params", "message", "ethErrors", "rpc", "transaction", "partialSign", "signedMsg", "nacl", "sign", "detached", "_providerEngineProxy", "custom", "code", "serialize", "sig", "signature", "length", "txns", "tx", "BaseInjectedProvider", "getBaseProviderHandlers", "PhantomInjectedProvider", "getSlopeHandlers", "SlopeInjectedProxyProvider", "getSolflareHandlers", "SolflareInjectedProvider", "getSolletHandlers", "SolletInjectedProvider", "getTorusHandlers", "TorusInjectedProvider", "SolanaPrivateKeyProvider", "SolanaWallet", "_createSuper", "config", "state", "chainConfig", "chainNamespace", "CHAIN_NAMESPACES", "SOLANA", "_", "Promise", "resolve", "injectedProvider", "engine", "JRPCEngine", "solanaMiddleware", "push", "configMiddleware", "injectedProviderProxy", "getInjectedProviderProxy", "providerFromEngine", "updateProviderEngineProxy", "lookupNetwork", "update", "BaseProvider", "toBytes", "methodNotSupported", "display", "sigData", "txRes", "connect", "data", "txMessage", "invalidRequest", "serializeMessage", "PublicKey", "decode", "addSignature", "conn", "Connection", "sendRawTransaction", "allTxns", "unsignedTx", "i", "msg", "signatures", "bind", "solflareProviderHandlers", "sendTransaction", "transactions", "handleInjectedProviderUpdate", "setupEngine", "connectedChainId", "connectedHexChainId", "isHexStrict", "toString", "parseInt", "rpcConnectionError", "emit", "on", "configure", "setupProvider", "privateKey", "getChainSwitchMiddleware", "getAccountMiddleware", "existingKey", "getChainConfig", "health", "chainSwitchHandlers", "chainName", "rpcUrls", "blockExplorerUrls", "nativeCurrency", "addChain", "ticker", "symbol", "tickerName", "name", "displayName", "blockExplorer", "switchChain", "chainSwitchMiddleware", "accountHandlers", "updateAccount", "providerFactory", "signedTransaction", "signedTransactions", "args"]
}
