import _classCallCheck from '@babel/runtime/helpers/classCallCheck';
import _createClass from '@babel/runtime/helpers/createClass';
import _assertThisInitialized from '@babel/runtime/helpers/assertThisInitialized';
import _inherits from '@babel/runtime/helpers/inherits';
import _possibleConstructorReturn from '@babel/runtime/helpers/possibleConstructorReturn';
import _get from '@babel/runtime/helpers/get';
import _getPrototypeOf from '@babel/runtime/helpers/getPrototypeOf';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { createEventEmitterProxy, BaseController, providerFromEngine } from '@toruslabs/base-controllers';
import { WalletInitializationError } from '@web3auth/base';
import { ethErrors } from 'eth-rpc-errors';
import _asyncToGenerator from '@babel/runtime/helpers/asyncToGenerator';
import _regeneratorRuntime from '@babel/runtime/regenerator';
import { JRPCEngine, createScaffoldMiddleware, createAsyncMiddleware } from '@toruslabs/openlogin-jrpc';
import getCreateRandomId from 'json-rpc-random-id';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var BaseProvider = /*#__PURE__*/function (_BaseController) {
  _inherits(BaseProvider, _BaseController);
  var _super = _createSuper(BaseProvider);
  // should be Assigned in setupProvider

  function BaseProvider(_ref) {
    var _thisSuper, _this;
    var config = _ref.config,
      state = _ref.state;
    _classCallCheck(this, BaseProvider);
    _this = _super.call(this, {
      config: config,
      state: state
    });
    _defineProperty(_assertThisInitialized(_this), "_providerEngineProxy", null);
    if (!config.chainConfig) throw WalletInitializationError.invalidProviderConfigError("Please provide chainConfig");
    if (!config.chainConfig.chainId) throw WalletInitializationError.invalidProviderConfigError("Please provide chainId inside chainConfig");
    if (!config.chainConfig.rpcTarget) throw WalletInitializationError.invalidProviderConfigError("Please provide rpcTarget inside chainConfig");
    _this.defaultState = {
      chainId: "loading"
    };
    _this.defaultConfig = {
      chainConfig: config.chainConfig,
      networks: _defineProperty({}, config.chainConfig.chainId, config.chainConfig)
    };
    _get((_thisSuper = _assertThisInitialized(_this), _getPrototypeOf(BaseProvider.prototype)), "initialize", _thisSuper).call(_thisSuper);
    return _this;
  }
  _createClass(BaseProvider, [{
    key: "provider",
    get: function get() {
      return this._providerEngineProxy;
    },
    set: function set(_) {
      throw new Error("Method not implemented.");
    }
  }, {
    key: "addChain",
    value: function addChain(chainConfig) {
      if (!chainConfig.chainId) throw ethErrors.rpc.invalidParams("chainId is required");
      if (!chainConfig.rpcTarget) throw ethErrors.rpc.invalidParams("chainId is required");
      this.configure({
        networks: _objectSpread(_objectSpread({}, this.config.networks), {}, _defineProperty({}, chainConfig.chainId, chainConfig))
      });
    }
  }, {
    key: "getChainConfig",
    value: function getChainConfig(chainId) {
      var _this$config$networks;
      var chainConfig = (_this$config$networks = this.config.networks) === null || _this$config$networks === void 0 ? void 0 : _this$config$networks[chainId];
      if (!chainConfig) throw ethErrors.rpc.invalidRequest("Chain ".concat(chainId, " is not supported, please add chainConfig for it"));
      return chainConfig;
    }
  }, {
    key: "getProviderEngineProxy",
    value: function getProviderEngineProxy() {
      return this._providerEngineProxy;
    }
  }, {
    key: "updateProviderEngineProxy",
    value: function updateProviderEngineProxy(providerEngineProxy) {
      if (this._providerEngineProxy) {
        this._providerEngineProxy.setTarget(providerEngineProxy);
      } else {
        this._providerEngineProxy = createEventEmitterProxy(providerEngineProxy);
      }
    }
  }]);
  return BaseProvider;
}(BaseController);

var CommonPrivateKeyProvider = /*#__PURE__*/function () {
  function CommonPrivateKeyProvider() {
    _classCallCheck(this, CommonPrivateKeyProvider);
    _defineProperty(this, "_providerEngineProxy", null);
  }
  _createClass(CommonPrivateKeyProvider, [{
    key: "provider",
    get: function get() {
      return this._providerEngineProxy;
    },
    set: function set(_) {
      throw new Error("Method not implemented.");
    }
  }, {
    key: "addChain",
    value: function addChain(_) {
      throw new Error("Method not implemented.");
    }
  }, {
    key: "setupProvider",
    value: function () {
      var _setupProvider = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(privKey) {
        var privKeyMiddleware, engine, provider;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                privKeyMiddleware = this.getPrivKeyMiddleware(privKey);
                engine = new JRPCEngine();
                engine.push(privKeyMiddleware);
                provider = providerFromEngine(engine);
                this.updateProviderEngineProxy(provider);
              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));
      function setupProvider(_x) {
        return _setupProvider.apply(this, arguments);
      }
      return setupProvider;
    }()
  }, {
    key: "switchChain",
    value: function () {
      var _switchChain = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt("return", Promise.resolve());
              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));
      function switchChain(_x2) {
        return _switchChain.apply(this, arguments);
      }
      return switchChain;
    }()
  }, {
    key: "getProviderEngineProxy",
    value: function getProviderEngineProxy() {
      return this._providerEngineProxy;
    }
  }, {
    key: "updateProviderEngineProxy",
    value: function updateProviderEngineProxy(providerEngineProxy) {
      if (this._providerEngineProxy) {
        this._providerEngineProxy.setTarget(providerEngineProxy);
      } else {
        this._providerEngineProxy = createEventEmitterProxy(providerEngineProxy);
      }
    }
  }, {
    key: "getPrivKeyMiddleware",
    value: function getPrivKeyMiddleware(privKey) {
      var middleware = {
        getPrivatekey: function () {
          var _getPrivatekey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
            return _regeneratorRuntime.wrap(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    return _context3.abrupt("return", privKey);
                  case 1:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3);
          }));
          function getPrivatekey() {
            return _getPrivatekey.apply(this, arguments);
          }
          return getPrivatekey;
        }()
      };
      return this.createPrivKeyMiddleware(middleware);
    }
  }, {
    key: "createPrivKeyMiddleware",
    value: function createPrivKeyMiddleware(_ref) {
      var getPrivatekey = _ref.getPrivatekey;
      function getPrivatekeyHandler(_x3, _x4) {
        return _getPrivatekeyHandler.apply(this, arguments);
      }
      function _getPrivatekeyHandler() {
        _getPrivatekeyHandler = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(_, res) {
          return _regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  _context4.next = 2;
                  return getPrivatekey();
                case 2:
                  res.result = _context4.sent;
                case 3:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4);
        }));
        return _getPrivatekeyHandler.apply(this, arguments);
      }
      return createScaffoldMiddleware({
        private_key: createAsyncMiddleware(getPrivatekeyHandler)
      });
    }
  }]);
  return CommonPrivateKeyProvider;
}();
_defineProperty(CommonPrivateKeyProvider, "getProviderInstance", /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(params) {
    var providerFactory;
    return _regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            providerFactory = new CommonPrivateKeyProvider();
            _context5.next = 3;
            return providerFactory.setupProvider(params.privKey);
          case 3:
            return _context5.abrupt("return", providerFactory);
          case 4:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  return function (_x5) {
    return _ref2.apply(this, arguments);
  };
}());

var createRandomId = getCreateRandomId();

export { BaseProvider, CommonPrivateKeyProvider, createRandomId };
//# sourceMappingURL=baseProvider.esm.js.map
