/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "MetamaskAdapter": () => (/* reexport */ MetamaskAdapter)
});

;// CONCATENATED MODULE: external "@babel/runtime/helpers/asyncToGenerator"
const asyncToGenerator_namespaceObject = require("@babel/runtime/helpers/asyncToGenerator");
var asyncToGenerator_default = /*#__PURE__*/__webpack_require__.n(asyncToGenerator_namespaceObject);
;// CONCATENATED MODULE: external "@babel/runtime/helpers/classCallCheck"
const classCallCheck_namespaceObject = require("@babel/runtime/helpers/classCallCheck");
var classCallCheck_default = /*#__PURE__*/__webpack_require__.n(classCallCheck_namespaceObject);
;// CONCATENATED MODULE: external "@babel/runtime/helpers/createClass"
const createClass_namespaceObject = require("@babel/runtime/helpers/createClass");
var createClass_default = /*#__PURE__*/__webpack_require__.n(createClass_namespaceObject);
;// CONCATENATED MODULE: external "@babel/runtime/helpers/assertThisInitialized"
const assertThisInitialized_namespaceObject = require("@babel/runtime/helpers/assertThisInitialized");
var assertThisInitialized_default = /*#__PURE__*/__webpack_require__.n(assertThisInitialized_namespaceObject);
;// CONCATENATED MODULE: external "@babel/runtime/helpers/get"
const get_namespaceObject = require("@babel/runtime/helpers/get");
var get_default = /*#__PURE__*/__webpack_require__.n(get_namespaceObject);
;// CONCATENATED MODULE: external "@babel/runtime/helpers/inherits"
const inherits_namespaceObject = require("@babel/runtime/helpers/inherits");
var inherits_default = /*#__PURE__*/__webpack_require__.n(inherits_namespaceObject);
;// CONCATENATED MODULE: external "@babel/runtime/helpers/possibleConstructorReturn"
const possibleConstructorReturn_namespaceObject = require("@babel/runtime/helpers/possibleConstructorReturn");
var possibleConstructorReturn_default = /*#__PURE__*/__webpack_require__.n(possibleConstructorReturn_namespaceObject);
;// CONCATENATED MODULE: external "@babel/runtime/helpers/getPrototypeOf"
const getPrototypeOf_namespaceObject = require("@babel/runtime/helpers/getPrototypeOf");
var getPrototypeOf_default = /*#__PURE__*/__webpack_require__.n(getPrototypeOf_namespaceObject);
;// CONCATENATED MODULE: external "@babel/runtime/helpers/defineProperty"
const defineProperty_namespaceObject = require("@babel/runtime/helpers/defineProperty");
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty_namespaceObject);
;// CONCATENATED MODULE: external "@babel/runtime/regenerator"
const regenerator_namespaceObject = require("@babel/runtime/regenerator");
var regenerator_default = /*#__PURE__*/__webpack_require__.n(regenerator_namespaceObject);
;// CONCATENATED MODULE: external "@metamask/detect-provider"
const detect_provider_namespaceObject = require("@metamask/detect-provider");
var detect_provider_default = /*#__PURE__*/__webpack_require__.n(detect_provider_namespaceObject);
;// CONCATENATED MODULE: external "@web3auth/base"
const base_namespaceObject = require("@web3auth/base");
;// CONCATENATED MODULE: external "@web3auth/base-evm-adapter"
const base_evm_adapter_namespaceObject = require("@web3auth/base-evm-adapter");
;// CONCATENATED MODULE: ./src/metamaskAdapter.ts










function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var MetamaskAdapter = /*#__PURE__*/function (_BaseEvmAdapter) {
  inherits_default()(MetamaskAdapter, _BaseEvmAdapter);
  var _super = _createSuper(MetamaskAdapter);
  function MetamaskAdapter(adapterOptions) {
    var _this;
    classCallCheck_default()(this, MetamaskAdapter);
    _this = _super.call(this, adapterOptions);
    defineProperty_default()(assertThisInitialized_default()(_this), "adapterNamespace", base_namespaceObject.ADAPTER_NAMESPACES.EIP155);
    defineProperty_default()(assertThisInitialized_default()(_this), "currentChainNamespace", base_namespaceObject.CHAIN_NAMESPACES.EIP155);
    defineProperty_default()(assertThisInitialized_default()(_this), "type", base_namespaceObject.ADAPTER_CATEGORY.EXTERNAL);
    defineProperty_default()(assertThisInitialized_default()(_this), "name", base_namespaceObject.WALLET_ADAPTERS.METAMASK);
    defineProperty_default()(assertThisInitialized_default()(_this), "status", base_namespaceObject.ADAPTER_STATUS.NOT_READY);
    defineProperty_default()(assertThisInitialized_default()(_this), "rehydrated", false);
    defineProperty_default()(assertThisInitialized_default()(_this), "metamaskProvider", null);
    _this.chainConfig = (adapterOptions === null || adapterOptions === void 0 ? void 0 : adapterOptions.chainConfig) || null;
    _this.sessionTime = (adapterOptions === null || adapterOptions === void 0 ? void 0 : adapterOptions.sessionTime) || 86400;
    return _this;
  }
  createClass_default()(MetamaskAdapter, [{
    key: "provider",
    get: function get() {
      if (this.status === base_namespaceObject.ADAPTER_STATUS.CONNECTED && this.metamaskProvider) {
        return this.metamaskProvider;
      }
      return null;
    },
    set: function set(_) {
      throw new Error("Not implemented");
    }
  }, {
    key: "init",
    value: function () {
      var _init = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee(options) {
        return regenerator_default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                get_default()(getPrototypeOf_default()(MetamaskAdapter.prototype), "checkInitializationRequirements", this).call(this);
                _context.next = 3;
                return detect_provider_default()({
                  mustBeMetaMask: true
                });
              case 3:
                this.metamaskProvider = _context.sent;
                if (this.metamaskProvider) {
                  _context.next = 6;
                  break;
                }
                throw base_namespaceObject.WalletInitializationError.notInstalled("Metamask extension is not installed");
              case 6:
                this.status = base_namespaceObject.ADAPTER_STATUS.READY;
                this.emit(base_namespaceObject.ADAPTER_EVENTS.READY, base_namespaceObject.WALLET_ADAPTERS.METAMASK);
                _context.prev = 8;
                base_namespaceObject.log.debug("initializing metamask adapter");
                if (!options.autoConnect) {
                  _context.next = 14;
                  break;
                }
                this.rehydrated = true;
                _context.next = 14;
                return this.connect();
              case 14:
                _context.next = 19;
                break;
              case 16:
                _context.prev = 16;
                _context.t0 = _context["catch"](8);
                this.emit(base_namespaceObject.ADAPTER_EVENTS.ERRORED, _context.t0);
              case 19:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[8, 16]]);
      }));
      function init(_x) {
        return _init.apply(this, arguments);
      }
      return init;
    }()
  }, {
    key: "setAdapterSettings",
    value: function setAdapterSettings(options) {
      if (this.status === base_namespaceObject.ADAPTER_STATUS.READY) return;
      if (options !== null && options !== void 0 && options.sessionTime) {
        this.sessionTime = options.sessionTime;
      }
      if (options !== null && options !== void 0 && options.clientId) {
        this.clientId = options.clientId;
      }
    }
  }, {
    key: "connect",
    value: function () {
      var _connect = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee2() {
        var _this2 = this;
        var chainId;
        return regenerator_default().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                get_default()(getPrototypeOf_default()(MetamaskAdapter.prototype), "checkConnectionRequirements", this).call(this);
                // set default to mainnet
                if (!this.chainConfig) this.chainConfig = (0,base_namespaceObject.getChainConfig)(base_namespaceObject.CHAIN_NAMESPACES.EIP155, 1);
                this.status = base_namespaceObject.ADAPTER_STATUS.CONNECTING;
                this.emit(base_namespaceObject.ADAPTER_EVENTS.CONNECTING, {
                  adapter: base_namespaceObject.WALLET_ADAPTERS.METAMASK
                });
                if (this.metamaskProvider) {
                  _context2.next = 6;
                  break;
                }
                throw base_namespaceObject.WalletLoginError.notConnectedError("Not able to connect with metamask");
              case 6:
                _context2.prev = 6;
                _context2.next = 9;
                return this.metamaskProvider.request({
                  method: "eth_requestAccounts"
                });
              case 9:
                chainId = this.metamaskProvider.chainId;
                if (!(chainId !== this.chainConfig.chainId)) {
                  _context2.next = 13;
                  break;
                }
                _context2.next = 13;
                return this.switchChain(this.chainConfig);
              case 13:
                this.status = base_namespaceObject.ADAPTER_STATUS.CONNECTED;
                if (this.provider) {
                  _context2.next = 16;
                  break;
                }
                throw base_namespaceObject.WalletLoginError.notConnectedError("Failed to connect with provider");
              case 16:
                this.provider.once("disconnect", function () {
                  // ready to be connected again
                  _this2.disconnect();
                });
                this.emit(base_namespaceObject.ADAPTER_EVENTS.CONNECTED, {
                  adapter: base_namespaceObject.WALLET_ADAPTERS.METAMASK,
                  reconnected: this.rehydrated
                });
                return _context2.abrupt("return", this.provider);
              case 21:
                _context2.prev = 21;
                _context2.t0 = _context2["catch"](6);
                // ready again to be connected
                this.status = base_namespaceObject.ADAPTER_STATUS.READY;
                this.rehydrated = false;
                this.emit(base_namespaceObject.ADAPTER_EVENTS.ERRORED, _context2.t0);
                throw base_namespaceObject.WalletLoginError.connectionError("Failed to login with metamask wallet");
              case 27:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this, [[6, 21]]);
      }));
      function connect() {
        return _connect.apply(this, arguments);
      }
      return connect;
    }()
  }, {
    key: "disconnect",
    value: function () {
      var _disconnect = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee3() {
        var _this$provider;
        var options,
          _args3 = arguments;
        return regenerator_default().wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                options = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {
                  cleanup: false
                };
                _context3.next = 3;
                return get_default()(getPrototypeOf_default()(MetamaskAdapter.prototype), "disconnect", this).call(this);
              case 3:
                (_this$provider = this.provider) === null || _this$provider === void 0 ? void 0 : _this$provider.removeAllListeners();
                if (options.cleanup) {
                  this.status = base_namespaceObject.ADAPTER_STATUS.NOT_READY;
                  this.metamaskProvider = null;
                } else {
                  // ready to be connected again
                  this.status = base_namespaceObject.ADAPTER_STATUS.READY;
                }
                this.rehydrated = false;
                this.emit(base_namespaceObject.ADAPTER_EVENTS.DISCONNECTED);
              case 7:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));
      function disconnect() {
        return _disconnect.apply(this, arguments);
      }
      return disconnect;
    }()
  }, {
    key: "getUserInfo",
    value: function () {
      var _getUserInfo = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee4() {
        return regenerator_default().wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                if (!(this.status !== base_namespaceObject.ADAPTER_STATUS.CONNECTED)) {
                  _context4.next = 2;
                  break;
                }
                throw base_namespaceObject.WalletLoginError.notConnectedError("Not connected with wallet, Please login/connect first");
              case 2:
                return _context4.abrupt("return", {});
              case 3:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));
      function getUserInfo() {
        return _getUserInfo.apply(this, arguments);
      }
      return getUserInfo;
    }()
  }, {
    key: "switchChain",
    value: function () {
      var _switchChain = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee5(chainConfig) {
        return regenerator_default().wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                if (this.metamaskProvider) {
                  _context5.next = 2;
                  break;
                }
                throw base_namespaceObject.WalletLoginError.notConnectedError("Not connected with wallet");
              case 2:
                _context5.prev = 2;
                _context5.next = 5;
                return this.metamaskProvider.request({
                  method: "wallet_switchEthereumChain",
                  params: [{
                    chainId: chainConfig.chainId
                  }]
                });
              case 5:
                _context5.next = 15;
                break;
              case 7:
                _context5.prev = 7;
                _context5.t0 = _context5["catch"](2);
                if (!(_context5.t0.code === 4902)) {
                  _context5.next = 14;
                  break;
                }
                _context5.next = 12;
                return this.metamaskProvider.request({
                  method: "wallet_addEthereumChain",
                  params: [{
                    chainId: chainConfig.chainId,
                    chainName: chainConfig.displayName,
                    rpcUrls: [chainConfig.rpcTarget]
                  }]
                });
              case 12:
                _context5.next = 15;
                break;
              case 14:
                throw _context5.t0;
              case 15:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this, [[2, 7]]);
      }));
      function switchChain(_x2) {
        return _switchChain.apply(this, arguments);
      }
      return switchChain;
    }()
  }]);
  return MetamaskAdapter;
}(base_evm_adapter_namespaceObject.BaseEvmAdapter);

;// CONCATENATED MODULE: ./src/index.ts

module.exports = __webpack_exports__;
/******/ })()
;
//# sourceMappingURL=metamaskAdapter.cjs.js.map