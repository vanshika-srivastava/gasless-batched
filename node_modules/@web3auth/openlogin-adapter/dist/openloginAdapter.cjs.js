/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ 822:
/***/ ((module) => {

module.exports = require("@toruslabs/openlogin-ed25519");

/***/ }),

/***/ 41:
/***/ ((module) => {

module.exports = require("@web3auth/ethereum-provider");

/***/ }),

/***/ 448:
/***/ ((module) => {

module.exports = require("@web3auth/solana-provider");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/create fake namespace object */
/******/ 	(() => {
/******/ 		var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);
/******/ 		var leafPrototypes;
/******/ 		// create a fake namespace object
/******/ 		// mode & 1: value is a module id, require it
/******/ 		// mode & 2: merge all properties of value into the ns
/******/ 		// mode & 4: return value when already ns object
/******/ 		// mode & 16: return value when it's Promise-like
/******/ 		// mode & 8|1: behave like require
/******/ 		__webpack_require__.t = function(value, mode) {
/******/ 			if(mode & 1) value = this(value);
/******/ 			if(mode & 8) return value;
/******/ 			if(typeof value === 'object' && value) {
/******/ 				if((mode & 4) && value.__esModule) return value;
/******/ 				if((mode & 16) && typeof value.then === 'function') return value;
/******/ 			}
/******/ 			var ns = Object.create(null);
/******/ 			__webpack_require__.r(ns);
/******/ 			var def = {};
/******/ 			leafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];
/******/ 			for(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {
/******/ 				Object.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));
/******/ 			}
/******/ 			def['default'] = () => (value);
/******/ 			__webpack_require__.d(ns, def);
/******/ 			return ns;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "OpenloginAdapter": () => (/* reexport */ OpenloginAdapter),
  "getOpenloginDefaultOptions": () => (/* reexport */ getOpenloginDefaultOptions)
});

;// CONCATENATED MODULE: external "@toruslabs/openlogin"
const openlogin_namespaceObject = require("@toruslabs/openlogin");
var openlogin_default = /*#__PURE__*/__webpack_require__.n(openlogin_namespaceObject);
;// CONCATENATED MODULE: external "@web3auth/base"
const base_namespaceObject = require("@web3auth/base");
;// CONCATENATED MODULE: ./src/config.ts


var getOpenloginDefaultOptions = function getOpenloginDefaultOptions(chainNamespace, chainId) {
  return {
    adapterSettings: {
      network: openlogin_namespaceObject.OPENLOGIN_NETWORK.MAINNET,
      clientId: "",
      uxMode: openlogin_namespaceObject.UX_MODE.POPUP
    },
    chainConfig: chainNamespace ? (0,base_namespaceObject.getChainConfig)(chainNamespace, chainId) : null,
    loginSettings: {}
  };
};
;// CONCATENATED MODULE: external "@babel/runtime/helpers/asyncToGenerator"
const asyncToGenerator_namespaceObject = require("@babel/runtime/helpers/asyncToGenerator");
var asyncToGenerator_default = /*#__PURE__*/__webpack_require__.n(asyncToGenerator_namespaceObject);
;// CONCATENATED MODULE: external "@babel/runtime/helpers/classCallCheck"
const classCallCheck_namespaceObject = require("@babel/runtime/helpers/classCallCheck");
var classCallCheck_default = /*#__PURE__*/__webpack_require__.n(classCallCheck_namespaceObject);
;// CONCATENATED MODULE: external "@babel/runtime/helpers/createClass"
const createClass_namespaceObject = require("@babel/runtime/helpers/createClass");
var createClass_default = /*#__PURE__*/__webpack_require__.n(createClass_namespaceObject);
;// CONCATENATED MODULE: external "@babel/runtime/helpers/assertThisInitialized"
const assertThisInitialized_namespaceObject = require("@babel/runtime/helpers/assertThisInitialized");
var assertThisInitialized_default = /*#__PURE__*/__webpack_require__.n(assertThisInitialized_namespaceObject);
;// CONCATENATED MODULE: external "@babel/runtime/helpers/get"
const get_namespaceObject = require("@babel/runtime/helpers/get");
var get_default = /*#__PURE__*/__webpack_require__.n(get_namespaceObject);
;// CONCATENATED MODULE: external "@babel/runtime/helpers/inherits"
const inherits_namespaceObject = require("@babel/runtime/helpers/inherits");
var inherits_default = /*#__PURE__*/__webpack_require__.n(inherits_namespaceObject);
;// CONCATENATED MODULE: external "@babel/runtime/helpers/possibleConstructorReturn"
const possibleConstructorReturn_namespaceObject = require("@babel/runtime/helpers/possibleConstructorReturn");
var possibleConstructorReturn_default = /*#__PURE__*/__webpack_require__.n(possibleConstructorReturn_namespaceObject);
;// CONCATENATED MODULE: external "@babel/runtime/helpers/getPrototypeOf"
const getPrototypeOf_namespaceObject = require("@babel/runtime/helpers/getPrototypeOf");
var getPrototypeOf_default = /*#__PURE__*/__webpack_require__.n(getPrototypeOf_namespaceObject);
;// CONCATENATED MODULE: external "@babel/runtime/helpers/defineProperty"
const defineProperty_namespaceObject = require("@babel/runtime/helpers/defineProperty");
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty_namespaceObject);
;// CONCATENATED MODULE: external "@babel/runtime/regenerator"
const regenerator_namespaceObject = require("@babel/runtime/regenerator");
var regenerator_default = /*#__PURE__*/__webpack_require__.n(regenerator_namespaceObject);
;// CONCATENATED MODULE: external "@web3auth/base-provider"
const base_provider_namespaceObject = require("@web3auth/base-provider");
;// CONCATENATED MODULE: external "lodash.merge"
const external_lodash_merge_namespaceObject = require("lodash.merge");
var external_lodash_merge_default = /*#__PURE__*/__webpack_require__.n(external_lodash_merge_namespaceObject);
;// CONCATENATED MODULE: ./src/openloginAdapter.ts










function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { defineProperty_default()(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var OpenloginAdapter = /*#__PURE__*/function (_BaseAdapter) {
  inherits_default()(OpenloginAdapter, _BaseAdapter);
  var _super = _createSuper(OpenloginAdapter);
  function OpenloginAdapter(params) {
    var _params$chainConfig, _params$chainConfig2, _params$adapterSettin, _params$chainConfig3;
    var _this;
    classCallCheck_default()(this, OpenloginAdapter);
    _this = _super.call(this);
    defineProperty_default()(assertThisInitialized_default()(_this), "name", base_namespaceObject.WALLET_ADAPTERS.OPENLOGIN);
    defineProperty_default()(assertThisInitialized_default()(_this), "adapterNamespace", base_namespaceObject.ADAPTER_NAMESPACES.MULTICHAIN);
    defineProperty_default()(assertThisInitialized_default()(_this), "type", base_namespaceObject.ADAPTER_CATEGORY.IN_APP);
    defineProperty_default()(assertThisInitialized_default()(_this), "openloginInstance", null);
    defineProperty_default()(assertThisInitialized_default()(_this), "clientId", void 0);
    defineProperty_default()(assertThisInitialized_default()(_this), "status", base_namespaceObject.ADAPTER_STATUS.NOT_READY);
    defineProperty_default()(assertThisInitialized_default()(_this), "currentChainNamespace", base_namespaceObject.CHAIN_NAMESPACES.EIP155);
    defineProperty_default()(assertThisInitialized_default()(_this), "openloginOptions", void 0);
    defineProperty_default()(assertThisInitialized_default()(_this), "loginSettings", {});
    defineProperty_default()(assertThisInitialized_default()(_this), "privKeyProvider", null);
    base_namespaceObject.log.debug("const openlogin adapter", params);
    var defaultOptions = getOpenloginDefaultOptions((_params$chainConfig = params.chainConfig) === null || _params$chainConfig === void 0 ? void 0 : _params$chainConfig.chainNamespace, (_params$chainConfig2 = params.chainConfig) === null || _params$chainConfig2 === void 0 ? void 0 : _params$chainConfig2.chainId);
    _this.openloginOptions = _objectSpread(_objectSpread({
      clientId: "",
      network: openlogin_namespaceObject.OPENLOGIN_NETWORK.MAINNET
    }, defaultOptions.adapterSettings), params.adapterSettings || {});
    _this.clientId = (_params$adapterSettin = params.adapterSettings) === null || _params$adapterSettin === void 0 ? void 0 : _params$adapterSettin.clientId;
    _this.loginSettings = _objectSpread(_objectSpread({}, defaultOptions.loginSettings), params.loginSettings);
    _this.sessionTime = _this.loginSettings.sessionTime || 86400;
    // if no chainNamespace is passed then chain config should be set before calling init
    if ((_params$chainConfig3 = params.chainConfig) !== null && _params$chainConfig3 !== void 0 && _params$chainConfig3.chainNamespace) {
      var _params$chainConfig4;
      _this.currentChainNamespace = (_params$chainConfig4 = params.chainConfig) === null || _params$chainConfig4 === void 0 ? void 0 : _params$chainConfig4.chainNamespace;
      var defaultChainIdConfig = defaultOptions.chainConfig ? defaultOptions.chainConfig : {};
      _this.chainConfig = _objectSpread(_objectSpread({}, defaultChainIdConfig), params === null || params === void 0 ? void 0 : params.chainConfig);
      base_namespaceObject.log.debug("const openlogin chainConfig", _this.chainConfig);
      if (!_this.chainConfig.rpcTarget && params.chainConfig.chainNamespace !== base_namespaceObject.CHAIN_NAMESPACES.OTHER) {
        throw base_namespaceObject.WalletInitializationError.invalidParams("rpcTarget is required in chainConfig");
      }
    }
    return _this;
  }
  createClass_default()(OpenloginAdapter, [{
    key: "chainConfigProxy",
    get: function get() {
      return this.chainConfig ? _objectSpread({}, this.chainConfig) : null;
    }
  }, {
    key: "provider",
    get: function get() {
      var _this$privKeyProvider;
      return ((_this$privKeyProvider = this.privKeyProvider) === null || _this$privKeyProvider === void 0 ? void 0 : _this$privKeyProvider.provider) || null;
    },
    set: function set(_) {
      throw new Error("Not implemented");
    }
  }, {
    key: "init",
    value: function () {
      var _init = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee(options) {
        var _this$openloginOption;
        var isRedirectResult, redirectResult;
        return regenerator_default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                get_default()(getPrototypeOf_default()(OpenloginAdapter.prototype), "checkInitializationRequirements", this).call(this);
                if ((_this$openloginOption = this.openloginOptions) !== null && _this$openloginOption !== void 0 && _this$openloginOption.clientId) {
                  _context.next = 3;
                  break;
                }
                throw base_namespaceObject.WalletInitializationError.invalidParams("clientId is required before openlogin's initialization");
              case 3:
                if (this.chainConfig) {
                  _context.next = 5;
                  break;
                }
                throw base_namespaceObject.WalletInitializationError.invalidParams("chainConfig is required before initialization");
              case 5:
                isRedirectResult = false;
                if (this.openloginOptions.uxMode === openlogin_namespaceObject.UX_MODE.REDIRECT) {
                  redirectResult = (0,openlogin_namespaceObject.getHashQueryParams)();
                  if (Object.keys(redirectResult).length > 0 && redirectResult._pid) {
                    isRedirectResult = true;
                  }
                }
                this.openloginOptions = _objectSpread(_objectSpread({}, this.openloginOptions), {}, {
                  replaceUrlOnRedirect: isRedirectResult
                });
                this.openloginInstance = new (openlogin_default())(this.openloginOptions);
                base_namespaceObject.log.debug("initializing openlogin adapter init");
                _context.next = 12;
                return this.openloginInstance.init();
              case 12:
                this.status = base_namespaceObject.ADAPTER_STATUS.READY;
                this.emit(base_namespaceObject.ADAPTER_EVENTS.READY, base_namespaceObject.WALLET_ADAPTERS.OPENLOGIN);
                _context.prev = 14;
                base_namespaceObject.log.debug("initializing openlogin adapter");
                // connect only if it is redirect result or if connect (adapter is cached/already connected in same session) is true
                if (!(this.openloginInstance.privKey && (options.autoConnect || isRedirectResult))) {
                  _context.next = 19;
                  break;
                }
                _context.next = 19;
                return this.connect();
              case 19:
                _context.next = 25;
                break;
              case 21:
                _context.prev = 21;
                _context.t0 = _context["catch"](14);
                base_namespaceObject.log.error("Failed to connect with cached openlogin provider", _context.t0);
                this.emit("ERRORED", _context.t0);
              case 25:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[14, 21]]);
      }));
      function init(_x) {
        return _init.apply(this, arguments);
      }
      return init;
    }()
  }, {
    key: "connect",
    value: function () {
      var _connect = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee2(params) {
        return regenerator_default().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                get_default()(getPrototypeOf_default()(OpenloginAdapter.prototype), "checkConnectionRequirements", this).call(this);
                this.status = base_namespaceObject.ADAPTER_STATUS.CONNECTING;
                this.emit(base_namespaceObject.ADAPTER_EVENTS.CONNECTING, _objectSpread(_objectSpread({}, params), {}, {
                  adapter: base_namespaceObject.WALLET_ADAPTERS.OPENLOGIN
                }));
                _context2.prev = 3;
                _context2.next = 6;
                return this.connectWithProvider(params);
              case 6:
                return _context2.abrupt("return", this.provider);
              case 9:
                _context2.prev = 9;
                _context2.t0 = _context2["catch"](3);
                base_namespaceObject.log.error("Failed to connect with openlogin provider", _context2.t0);
                // ready again to be connected
                this.status = base_namespaceObject.ADAPTER_STATUS.READY;
                this.emit(base_namespaceObject.ADAPTER_EVENTS.ERRORED, _context2.t0);
                if (!(_context2.t0 !== null && _context2.t0 !== void 0 && _context2.t0.message.includes("user closed popup"))) {
                  _context2.next = 16;
                  break;
                }
                throw base_namespaceObject.WalletLoginError.popupClosed();
              case 16:
                throw base_namespaceObject.WalletLoginError.connectionError("Failed to login with openlogin");
              case 17:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this, [[3, 9]]);
      }));
      function connect(_x2) {
        return _connect.apply(this, arguments);
      }
      return connect;
    }()
  }, {
    key: "disconnect",
    value: function () {
      var _disconnect = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee3() {
        var options,
          _args3 = arguments;
        return regenerator_default().wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                options = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {
                  cleanup: false
                };
                if (!(this.status !== base_namespaceObject.ADAPTER_STATUS.CONNECTED)) {
                  _context3.next = 3;
                  break;
                }
                throw base_namespaceObject.WalletLoginError.notConnectedError("Not connected with wallet");
              case 3:
                if (this.openloginInstance) {
                  _context3.next = 5;
                  break;
                }
                throw base_namespaceObject.WalletInitializationError.notReady("openloginInstance is not ready");
              case 5:
                _context3.next = 7;
                return this.openloginInstance.logout();
              case 7:
                if (options.cleanup) {
                  this.status = base_namespaceObject.ADAPTER_STATUS.NOT_READY;
                  this.openloginInstance = null;
                  this.privKeyProvider = null;
                } else {
                  // ready to be connected again
                  this.status = base_namespaceObject.ADAPTER_STATUS.READY;
                }
                this.emit(base_namespaceObject.ADAPTER_EVENTS.DISCONNECTED);
              case 9:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));
      function disconnect() {
        return _disconnect.apply(this, arguments);
      }
      return disconnect;
    }()
  }, {
    key: "authenticateUser",
    value: function () {
      var _authenticateUser = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee4() {
        var userInfo;
        return regenerator_default().wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                if (!(this.status !== base_namespaceObject.ADAPTER_STATUS.CONNECTED)) {
                  _context4.next = 2;
                  break;
                }
                throw base_namespaceObject.WalletLoginError.notConnectedError("Not connected with wallet, Please login/connect first");
              case 2:
                _context4.next = 4;
                return this.getUserInfo();
              case 4:
                userInfo = _context4.sent;
                return _context4.abrupt("return", {
                  idToken: userInfo.idToken
                });
              case 6:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));
      function authenticateUser() {
        return _authenticateUser.apply(this, arguments);
      }
      return authenticateUser;
    }()
  }, {
    key: "getUserInfo",
    value: function () {
      var _getUserInfo = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee5() {
        var userInfo;
        return regenerator_default().wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                if (!(this.status !== base_namespaceObject.ADAPTER_STATUS.CONNECTED)) {
                  _context5.next = 2;
                  break;
                }
                throw base_namespaceObject.WalletLoginError.notConnectedError("Not connected with wallet");
              case 2:
                if (this.openloginInstance) {
                  _context5.next = 4;
                  break;
                }
                throw base_namespaceObject.WalletInitializationError.notReady("openloginInstance is not ready");
              case 4:
                _context5.next = 6;
                return this.openloginInstance.getUserInfo();
              case 6:
                userInfo = _context5.sent;
                return _context5.abrupt("return", userInfo);
              case 8:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));
      function getUserInfo() {
        return _getUserInfo.apply(this, arguments);
      }
      return getUserInfo;
    }() // should be called only before initialization.
  }, {
    key: "setAdapterSettings",
    value: function setAdapterSettings(adapterSettings) {
      if (this.status === base_namespaceObject.ADAPTER_STATUS.READY) return;
      var defaultOptions = getOpenloginDefaultOptions();
      this.openloginOptions = _objectSpread(_objectSpread(_objectSpread({}, defaultOptions.adapterSettings), this.openloginOptions || {}), adapterSettings);
      if (adapterSettings.sessionTime) {
        this.loginSettings = _objectSpread(_objectSpread({}, this.loginSettings), {}, {
          sessionTime: adapterSettings.sessionTime
        });
      }
      if (adapterSettings.clientId) {
        this.clientId = adapterSettings.clientId;
      }
    }

    // should be called only before initialization.
  }, {
    key: "setChainConfig",
    value: function setChainConfig(customChainConfig) {
      get_default()(getPrototypeOf_default()(OpenloginAdapter.prototype), "setChainConfig", this).call(this, customChainConfig);
      this.currentChainNamespace = customChainConfig.chainNamespace;
    }
  }, {
    key: "connectWithProvider",
    value: function () {
      var _connectWithProvider = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee6() {
        var params,
          _yield$import,
          SolanaPrivateKeyProvider,
          _yield$import2,
          EthereumPrivateKeyProvider,
          _params$extraLoginOpt,
          finalPrivKey,
          _yield$import3,
          getED25519Key,
          _args6 = arguments;
        return regenerator_default().wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                params = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : {};
                if (this.chainConfig) {
                  _context6.next = 3;
                  break;
                }
                throw base_namespaceObject.WalletInitializationError.invalidParams("chainConfig is required before initialization");
              case 3:
                if (this.openloginInstance) {
                  _context6.next = 5;
                  break;
                }
                throw base_namespaceObject.WalletInitializationError.notReady("openloginInstance is not ready");
              case 5:
                if (!(this.currentChainNamespace === base_namespaceObject.CHAIN_NAMESPACES.SOLANA)) {
                  _context6.next = 13;
                  break;
                }
                _context6.next = 8;
                return Promise.resolve(/* import() */).then(__webpack_require__.t.bind(__webpack_require__, 448, 23));
              case 8:
                _yield$import = _context6.sent;
                SolanaPrivateKeyProvider = _yield$import.SolanaPrivateKeyProvider;
                this.privKeyProvider = new SolanaPrivateKeyProvider({
                  config: {
                    chainConfig: this.chainConfig
                  }
                });
                _context6.next = 26;
                break;
              case 13:
                if (!(this.currentChainNamespace === base_namespaceObject.CHAIN_NAMESPACES.EIP155)) {
                  _context6.next = 21;
                  break;
                }
                _context6.next = 16;
                return Promise.resolve(/* import() */).then(__webpack_require__.t.bind(__webpack_require__, 41, 23));
              case 16:
                _yield$import2 = _context6.sent;
                EthereumPrivateKeyProvider = _yield$import2.EthereumPrivateKeyProvider;
                this.privKeyProvider = new EthereumPrivateKeyProvider({
                  config: {
                    chainConfig: this.chainConfig
                  }
                });
                _context6.next = 26;
                break;
              case 21:
                if (!(this.currentChainNamespace === base_namespaceObject.CHAIN_NAMESPACES.OTHER)) {
                  _context6.next = 25;
                  break;
                }
                this.privKeyProvider = new base_provider_namespaceObject.CommonPrivateKeyProvider();
                _context6.next = 26;
                break;
              case 25:
                throw new Error("Invalid chainNamespace: ".concat(this.currentChainNamespace, " found while connecting to wallet"));
              case 26:
                if (this.openloginInstance.privKey) {
                  _context6.next = 30;
                  break;
                }
                if (!this.loginSettings.curve) {
                  this.loginSettings.curve = this.currentChainNamespace === base_namespaceObject.CHAIN_NAMESPACES.SOLANA ? openlogin_namespaceObject.SUPPORTED_KEY_CURVES.ED25519 : openlogin_namespaceObject.SUPPORTED_KEY_CURVES.SECP256K1;
                }
                _context6.next = 30;
                return this.openloginInstance.login(external_lodash_merge_default()(this.loginSettings, params, {
                  loginProvider: params.loginProvider
                }, {
                  extraLoginOptions: _objectSpread(_objectSpread({}, params.extraLoginOptions || {}), {}, {
                    login_hint: params.login_hint || ((_params$extraLoginOpt = params.extraLoginOptions) === null || _params$extraLoginOpt === void 0 ? void 0 : _params$extraLoginOpt.login_hint)
                  })
                }));
              case 30:
                finalPrivKey = this.openloginInstance.privKey;
                if (!finalPrivKey) {
                  _context6.next = 42;
                  break;
                }
                if (!(this.currentChainNamespace === base_namespaceObject.CHAIN_NAMESPACES.SOLANA)) {
                  _context6.next = 38;
                  break;
                }
                _context6.next = 35;
                return Promise.resolve(/* import() */).then(__webpack_require__.t.bind(__webpack_require__, 822, 23));
              case 35:
                _yield$import3 = _context6.sent;
                getED25519Key = _yield$import3.getED25519Key;
                finalPrivKey = getED25519Key(finalPrivKey).sk.toString("hex");
              case 38:
                _context6.next = 40;
                return this.privKeyProvider.setupProvider(finalPrivKey);
              case 40:
                this.status = base_namespaceObject.ADAPTER_STATUS.CONNECTED;
                this.emit(base_namespaceObject.ADAPTER_EVENTS.CONNECTED, {
                  adapter: base_namespaceObject.WALLET_ADAPTERS.OPENLOGIN,
                  reconnected: !params
                });
              case 42:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));
      function connectWithProvider() {
        return _connectWithProvider.apply(this, arguments);
      }
      return connectWithProvider;
    }()
  }]);
  return OpenloginAdapter;
}(base_namespaceObject.BaseAdapter);
;// CONCATENATED MODULE: ./src/index.ts



})();

module.exports = __webpack_exports__;
/******/ })()
;
//# sourceMappingURL=openloginAdapter.cjs.js.map