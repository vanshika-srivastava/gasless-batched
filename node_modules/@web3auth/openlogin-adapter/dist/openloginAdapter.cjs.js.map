{"version":3,"file":"openloginAdapter.cjs.js","mappings":"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","sources":["webpack://@web3auth/openlogin-adapter/external commonjs2 \"@toruslabs/openlogin-ed25519\"","webpack://@web3auth/openlogin-adapter/external commonjs2 \"@web3auth/ethereum-provider\"","webpack://@web3auth/openlogin-adapter/external commonjs2 \"@web3auth/solana-provider\"","webpack://@web3auth/openlogin-adapter/webpack/bootstrap","webpack://@web3auth/openlogin-adapter/webpack/runtime/compat get default export","webpack://@web3auth/openlogin-adapter/webpack/runtime/create fake namespace object","webpack://@web3auth/openlogin-adapter/webpack/runtime/define property getters","webpack://@web3auth/openlogin-adapter/webpack/runtime/hasOwnProperty shorthand","webpack://@web3auth/openlogin-adapter/webpack/runtime/make namespace object","webpack://@web3auth/openlogin-adapter/external commonjs2 \"@toruslabs/openlogin\"","webpack://@web3auth/openlogin-adapter/external commonjs2 \"@web3auth/base\"","webpack://@web3auth/openlogin-adapter/./src/config.ts","webpack://@web3auth/openlogin-adapter/external commonjs2 \"@babel/runtime/helpers/asyncToGenerator\"","webpack://@web3auth/openlogin-adapter/external commonjs2 \"@babel/runtime/helpers/classCallCheck\"","webpack://@web3auth/openlogin-adapter/external commonjs2 \"@babel/runtime/helpers/createClass\"","webpack://@web3auth/openlogin-adapter/external commonjs2 \"@babel/runtime/helpers/assertThisInitialized\"","webpack://@web3auth/openlogin-adapter/external commonjs2 \"@babel/runtime/helpers/get\"","webpack://@web3auth/openlogin-adapter/external commonjs2 \"@babel/runtime/helpers/inherits\"","webpack://@web3auth/openlogin-adapter/external commonjs2 \"@babel/runtime/helpers/possibleConstructorReturn\"","webpack://@web3auth/openlogin-adapter/external commonjs2 \"@babel/runtime/helpers/getPrototypeOf\"","webpack://@web3auth/openlogin-adapter/external commonjs2 \"@babel/runtime/helpers/defineProperty\"","webpack://@web3auth/openlogin-adapter/external commonjs2 \"@babel/runtime/regenerator\"","webpack://@web3auth/openlogin-adapter/external commonjs2 \"@web3auth/base-provider\"","webpack://@web3auth/openlogin-adapter/external commonjs2 \"lodash.merge\"","webpack://@web3auth/openlogin-adapter/./src/openloginAdapter.ts","webpack://@web3auth/openlogin-adapter/./src/index.ts"],"sourcesContent":["module.exports = require(\"@toruslabs/openlogin-ed25519\");","module.exports = require(\"@web3auth/ethereum-provider\");","module.exports = require(\"@web3auth/solana-provider\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/openlogin\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@web3auth/base\");","import { OPENLOGIN_NETWORK, UX_MODE } from \"@toruslabs/openlogin\";\nimport { ChainNamespaceType, getChainConfig } from \"@web3auth/base\";\n\nimport { OpenloginAdapterOptions } from \"./interface\";\n\nexport const getOpenloginDefaultOptions = (chainNamespace?: ChainNamespaceType, chainId?: number | string): OpenloginAdapterOptions => {\n  return {\n    adapterSettings: {\n      network: OPENLOGIN_NETWORK.MAINNET,\n      clientId: \"\",\n      uxMode: UX_MODE.POPUP,\n    },\n    chainConfig: chainNamespace ? getChainConfig(chainNamespace, chainId) : null,\n    loginSettings: {},\n  };\n};\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/asyncToGenerator\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/classCallCheck\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/createClass\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/assertThisInitialized\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/get\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/inherits\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/possibleConstructorReturn\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/getPrototypeOf\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/regenerator\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@web3auth/base-provider\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"lodash.merge\");","import OpenLogin, { getHashQueryParams, LoginParams, OPENLOGIN_NETWORK, OpenLoginOptions, SUPPORTED_KEY_CURVES, UX_MODE } from \"@toruslabs/openlogin\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  BaseAdapter,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n} from \"@web3auth/base\";\nimport { CommonPrivateKeyProvider, IBaseProvider } from \"@web3auth/base-provider\";\nimport merge from \"lodash.merge\";\n\nimport { getOpenloginDefaultOptions } from \"./config\";\nimport type { LoginSettings, OpenloginAdapterOptions } from \"./interface\";\n\nexport type OpenloginLoginParams = LoginParams & {\n  // to maintain backward compatibility\n  login_hint?: string;\n};\n\ntype PrivateKeyProvider = IBaseProvider<string>;\n\nexport class OpenloginAdapter extends BaseAdapter<OpenloginLoginParams> {\n  readonly name: string = WALLET_ADAPTERS.OPENLOGIN;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.MULTICHAIN;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.IN_APP;\n\n  public openloginInstance: OpenLogin | null = null;\n\n  public clientId: string;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.EIP155;\n\n  private openloginOptions: OpenLoginOptions;\n\n  private loginSettings: LoginSettings = {};\n\n  private privKeyProvider: PrivateKeyProvider | null = null;\n\n  constructor(params: OpenloginAdapterOptions) {\n    super();\n    log.debug(\"const openlogin adapter\", params);\n    const defaultOptions = getOpenloginDefaultOptions(params.chainConfig?.chainNamespace, params.chainConfig?.chainId);\n    this.openloginOptions = {\n      clientId: \"\",\n      network: OPENLOGIN_NETWORK.MAINNET,\n      ...defaultOptions.adapterSettings,\n      ...(params.adapterSettings || {}),\n    };\n    this.clientId = params.adapterSettings?.clientId as string;\n    this.loginSettings = { ...defaultOptions.loginSettings, ...params.loginSettings };\n    this.sessionTime = this.loginSettings.sessionTime || 86400;\n    // if no chainNamespace is passed then chain config should be set before calling init\n    if (params.chainConfig?.chainNamespace) {\n      this.currentChainNamespace = params.chainConfig?.chainNamespace;\n      const defaultChainIdConfig = defaultOptions.chainConfig ? defaultOptions.chainConfig : {};\n      this.chainConfig = { ...defaultChainIdConfig, ...params?.chainConfig };\n      log.debug(\"const openlogin chainConfig\", this.chainConfig);\n      if (!this.chainConfig.rpcTarget && params.chainConfig.chainNamespace !== CHAIN_NAMESPACES.OTHER) {\n        throw WalletInitializationError.invalidParams(\"rpcTarget is required in chainConfig\");\n      }\n    }\n  }\n\n  get chainConfigProxy(): CustomChainConfig | null {\n    return this.chainConfig ? { ...this.chainConfig } : null;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    return this.privKeyProvider?.provider || null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions): Promise<void> {\n    super.checkInitializationRequirements();\n    if (!this.openloginOptions?.clientId) throw WalletInitializationError.invalidParams(\"clientId is required before openlogin's initialization\");\n    if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"chainConfig is required before initialization\");\n    let isRedirectResult = false;\n\n    if (this.openloginOptions.uxMode === UX_MODE.REDIRECT) {\n      const redirectResult = getHashQueryParams();\n      if (Object.keys(redirectResult).length > 0 && redirectResult._pid) {\n        isRedirectResult = true;\n      }\n    }\n    this.openloginOptions = {\n      ...this.openloginOptions,\n      replaceUrlOnRedirect: isRedirectResult,\n    };\n    this.openloginInstance = new OpenLogin(this.openloginOptions);\n    log.debug(\"initializing openlogin adapter init\");\n\n    await this.openloginInstance.init();\n\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.OPENLOGIN);\n\n    try {\n      log.debug(\"initializing openlogin adapter\");\n      // connect only if it is redirect result or if connect (adapter is cached/already connected in same session) is true\n      if (this.openloginInstance.privKey && (options.autoConnect || isRedirectResult)) {\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached openlogin provider\", error);\n      this.emit(\"ERRORED\", error);\n    }\n  }\n\n  async connect(params?: OpenloginLoginParams): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { ...params, adapter: WALLET_ADAPTERS.OPENLOGIN });\n    try {\n      await this.connectWithProvider(params);\n      return this.provider;\n    } catch (error: unknown) {\n      log.error(\"Failed to connect with openlogin provider\", error);\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      if ((error as Error)?.message.includes(\"user closed popup\")) {\n        throw WalletLoginError.popupClosed();\n      }\n      throw WalletLoginError.connectionError(\"Failed to login with openlogin\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n    await this.openloginInstance.logout();\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.openloginInstance = null;\n      this.privKeyProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async authenticateUser(): Promise<{ idToken: string }> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    const userInfo = await this.getUserInfo();\n    return {\n      idToken: userInfo.idToken as string,\n    };\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n    const userInfo = await this.openloginInstance.getUserInfo();\n    return userInfo;\n  }\n\n  // should be called only before initialization.\n  setAdapterSettings(adapterSettings: OpenLoginOptions & { sessionTime: number }): void {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    const defaultOptions = getOpenloginDefaultOptions();\n    this.openloginOptions = { ...defaultOptions.adapterSettings, ...(this.openloginOptions || {}), ...adapterSettings };\n    if (adapterSettings.sessionTime) {\n      this.loginSettings = { ...this.loginSettings, sessionTime: adapterSettings.sessionTime };\n    }\n    if (adapterSettings.clientId) {\n      this.clientId = adapterSettings.clientId;\n    }\n  }\n\n  // should be called only before initialization.\n  setChainConfig(customChainConfig: CustomChainConfig): void {\n    super.setChainConfig(customChainConfig);\n    this.currentChainNamespace = customChainConfig.chainNamespace;\n  }\n\n  private async connectWithProvider(params: OpenloginLoginParams = {}): Promise<void> {\n    if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"chainConfig is required before initialization\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n\n    if (this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA) {\n      const { SolanaPrivateKeyProvider } = await import(\"@web3auth/solana-provider\");\n      this.privKeyProvider = new SolanaPrivateKeyProvider({ config: { chainConfig: this.chainConfig } });\n    } else if (this.currentChainNamespace === CHAIN_NAMESPACES.EIP155) {\n      const { EthereumPrivateKeyProvider } = await import(\"@web3auth/ethereum-provider\");\n      this.privKeyProvider = new EthereumPrivateKeyProvider({ config: { chainConfig: this.chainConfig } });\n    } else if (this.currentChainNamespace === CHAIN_NAMESPACES.OTHER) {\n      this.privKeyProvider = new CommonPrivateKeyProvider();\n    } else {\n      throw new Error(`Invalid chainNamespace: ${this.currentChainNamespace} found while connecting to wallet`);\n    }\n    // if not logged in then login\n    if (!this.openloginInstance.privKey) {\n      if (!this.loginSettings.curve) {\n        this.loginSettings.curve =\n          this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA ? SUPPORTED_KEY_CURVES.ED25519 : SUPPORTED_KEY_CURVES.SECP256K1;\n      }\n      await this.openloginInstance.login(\n        merge(\n          this.loginSettings,\n          params,\n          { loginProvider: params.loginProvider },\n          { extraLoginOptions: { ...(params.extraLoginOptions || {}), login_hint: params.login_hint || params.extraLoginOptions?.login_hint } }\n        )\n      );\n    }\n    let finalPrivKey = this.openloginInstance.privKey;\n    if (finalPrivKey) {\n      if (this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA) {\n        const { getED25519Key } = await import(\"@toruslabs/openlogin-ed25519\");\n        finalPrivKey = getED25519Key(finalPrivKey).sk.toString(\"hex\");\n      }\n      await this.privKeyProvider.setupProvider(finalPrivKey);\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.OPENLOGIN, reconnected: !params } as CONNECTED_EVENT_DATA);\n    }\n  }\n}\n","export * from \"./config\";\nexport * from \"./interface\";\nexport * from \"./openloginAdapter\";\n"],"names":["OPENLOGIN_NETWORK","UX_MODE","getChainConfig","getOpenloginDefaultOptions","chainNamespace","chainId","adapterSettings","network","MAINNET","clientId","uxMode","POPUP","chainConfig","loginSettings","OpenLogin","getHashQueryParams","SUPPORTED_KEY_CURVES","ADAPTER_CATEGORY","ADAPTER_EVENTS","ADAPTER_NAMESPACES","ADAPTER_STATUS","BaseAdapter","CHAIN_NAMESPACES","log","WALLET_ADAPTERS","WalletInitializationError","WalletLoginError","CommonPrivateKeyProvider","merge","OpenloginAdapter","params","OPENLOGIN","MULTICHAIN","IN_APP","NOT_READY","EIP155","debug","defaultOptions","openloginOptions","sessionTime","currentChainNamespace","defaultChainIdConfig","rpcTarget","OTHER","invalidParams","privKeyProvider","provider","_","Error","options","isRedirectResult","REDIRECT","redirectResult","Object","keys","length","_pid","replaceUrlOnRedirect","openloginInstance","init","status","READY","emit","privKey","autoConnect","connect","error","CONNECTING","adapter","connectWithProvider","ERRORED","message","includes","popupClosed","connectionError","cleanup","CONNECTED","notConnectedError","notReady","logout","DISCONNECTED","getUserInfo","userInfo","idToken","customChainConfig","SOLANA","SolanaPrivateKeyProvider","config","EthereumPrivateKeyProvider","curve","ED25519","SECP256K1","login","loginProvider","extraLoginOptions","login_hint","finalPrivKey","getED25519Key","sk","toString","setupProvider","reconnected"],"sourceRoot":""}