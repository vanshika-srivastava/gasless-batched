import _classCallCheck from '@babel/runtime/helpers/classCallCheck';
import _createClass from '@babel/runtime/helpers/createClass';
import _inherits from '@babel/runtime/helpers/inherits';
import _possibleConstructorReturn from '@babel/runtime/helpers/possibleConstructorReturn';
import _getPrototypeOf from '@babel/runtime/helpers/getPrototypeOf';
import _asyncToGenerator from '@babel/runtime/helpers/asyncToGenerator';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import _regeneratorRuntime from '@babel/runtime/regenerator';
import { createFetchMiddleware, providerFromEngine } from '@toruslabs/base-controllers';
import { mergeMiddleware, createAsyncMiddleware, JRPCEngine } from '@toruslabs/openlogin-jrpc';
import { CHAIN_NAMESPACES, isHexStrict, WalletInitializationError } from '@web3auth/base';
import { BaseProvider } from '@web3auth/base-provider';
import bs58 from 'bs58';
import { ethErrors } from 'eth-rpc-errors';
import { PublicKey, Connection, Keypair } from '@solana/web3.js';
import nacl from '@toruslabs/tweetnacl-js';

function createChainIdMiddleware(chainId) {
  return function (req, res, next, end) {
    if (req.method === "solana_chainId") {
      res.result = chainId;
      return end();
    }
    return next();
  };
}
function createProviderConfigMiddleware(providerConfig) {
  return function (req, res, next, end) {
    if (req.method === "solana_provider_config") {
      res.result = providerConfig;
      return end();
    }
    return next();
  };
}
function createConfigMiddleware(providerConfig) {
  var chainId = providerConfig.chainId;
  return mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig)]);
}
function createJsonRpcClient(providerConfig) {
  var rpcTarget = providerConfig.rpcTarget;
  var fetchMiddleware = createFetchMiddleware({
    rpcTarget: rpcTarget
  });
  var networkMiddleware = mergeMiddleware([createConfigMiddleware(providerConfig), fetchMiddleware]);
  return {
    networkMiddleware: networkMiddleware,
    fetchMiddleware: fetchMiddleware
  };
}

function createGetAccountsMiddleware(_ref) {
  var getAccounts = _ref.getAccounts;
  return createAsyncMiddleware( /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(request, response, next) {
      var method, accounts;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              method = request.method;
              if (!(method !== "getAccounts")) {
                _context.next = 3;
                break;
              }
              return _context.abrupt("return", next());
            case 3:
              if (getAccounts) {
                _context.next = 5;
                break;
              }
              throw new Error("WalletMiddleware - opts.getAccounts not provided");
            case 5:
              _context.next = 7;
              return getAccounts(request);
            case 7:
              accounts = _context.sent;
              response.result = accounts;
              return _context.abrupt("return", undefined);
            case 10:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return function (_x, _x2, _x3) {
      return _ref2.apply(this, arguments);
    };
  }());
}
function createRequestAccountsMiddleware(_ref3) {
  var requestAccounts = _ref3.requestAccounts;
  return createAsyncMiddleware( /*#__PURE__*/function () {
    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(request, response, next) {
      var method, accounts;
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              method = request.method;
              if (!(method !== "requestAccounts")) {
                _context2.next = 3;
                break;
              }
              return _context2.abrupt("return", next());
            case 3:
              if (requestAccounts) {
                _context2.next = 5;
                break;
              }
              throw new Error("WalletMiddleware - opts.requestAccounts not provided");
            case 5:
              _context2.next = 7;
              return requestAccounts(request);
            case 7:
              accounts = _context2.sent;
              response.result = accounts;
              return _context2.abrupt("return", undefined);
            case 10:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));
    return function (_x4, _x5, _x6) {
      return _ref4.apply(this, arguments);
    };
  }());
}
function createGenericJRPCMiddleware(targetMethod, handler) {
  return createAsyncMiddleware( /*#__PURE__*/function () {
    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(request, response, next) {
      var method, result;
      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              method = request.method;
              if (!(method !== targetMethod)) {
                _context3.next = 3;
                break;
              }
              return _context3.abrupt("return", next());
            case 3:
              if (handler) {
                _context3.next = 5;
                break;
              }
              throw new Error("WalletMiddleware - ".concat(targetMethod, " not provided"));
            case 5:
              _context3.next = 7;
              return handler(request);
            case 7:
              result = _context3.sent;
              response.result = result;
              return _context3.abrupt("return", undefined);
            case 10:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));
    return function (_x7, _x8, _x9) {
      return _ref5.apply(this, arguments);
    };
  }());
}
function createSolanaMiddleware(providerHandlers) {
  var getAccounts = providerHandlers.getAccounts,
    requestAccounts = providerHandlers.requestAccounts,
    signTransaction = providerHandlers.signTransaction,
    signAndSendTransaction = providerHandlers.signAndSendTransaction,
    signAllTransactions = providerHandlers.signAllTransactions,
    signMessage = providerHandlers.signMessage,
    getPrivateKey = providerHandlers.getPrivateKey,
    getSecretKey = providerHandlers.getSecretKey;
  return mergeMiddleware([createRequestAccountsMiddleware({
    requestAccounts: requestAccounts
  }), createGetAccountsMiddleware({
    getAccounts: getAccounts
  }), createGenericJRPCMiddleware("signTransaction", signTransaction), createGenericJRPCMiddleware("signAndSendTransaction", signAndSendTransaction), createGenericJRPCMiddleware("signAllTransactions", signAllTransactions), createGenericJRPCMiddleware("signMessage", signMessage), createGenericJRPCMiddleware("solanaPrivateKey", getPrivateKey), createGenericJRPCMiddleware("solanaSecretKey", getSecretKey)]);
}
function createChainSwitchMiddleware(_ref6) {
  var addNewChainConfig = _ref6.addNewChainConfig,
    switchSolanaChain = _ref6.switchSolanaChain;
  return mergeMiddleware([createGenericJRPCMiddleware("addSolanaChain", addNewChainConfig), createGenericJRPCMiddleware("switchSolanaChain", switchSolanaChain)]);
}
function createAccountMiddleware(_ref7) {
  var updatePrivatekey = _ref7.updatePrivatekey;
  return mergeMiddleware([createGenericJRPCMiddleware("updateAccount", updatePrivatekey)]);
}

function ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createSuper$6(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$6(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct$6() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var BaseInjectedProvider = /*#__PURE__*/function (_BaseProvider) {
  _inherits(BaseInjectedProvider, _BaseProvider);
  var _super = _createSuper$6(BaseInjectedProvider);
  function BaseInjectedProvider(_ref) {
    var config = _ref.config,
      state = _ref.state;
    _classCallCheck(this, BaseInjectedProvider);
    return _super.call(this, {
      config: {
        chainConfig: _objectSpread$3(_objectSpread$3({}, config.chainConfig), {}, {
          chainNamespace: CHAIN_NAMESPACES.SOLANA
        })
      },
      state: state
    });
  }
  _createClass(BaseInjectedProvider, [{
    key: "switchChain",
    value: function () {
      var _switchChain = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_) {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt("return", Promise.resolve());
              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
      function switchChain(_x) {
        return _switchChain.apply(this, arguments);
      }
      return switchChain;
    }()
  }, {
    key: "setupProvider",
    value: function () {
      var _setupProvider = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(injectedProvider) {
        var engine, providerHandlers, solanaMiddleware, configMiddleware, injectedProviderProxy, provider;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                engine = new JRPCEngine();
                providerHandlers = this.getProviderHandlers(injectedProvider);
                solanaMiddleware = createSolanaMiddleware(providerHandlers);
                engine.push(solanaMiddleware);
                configMiddleware = createConfigMiddleware(this.config.chainConfig);
                engine.push(configMiddleware);
                injectedProviderProxy = this.getInjectedProviderProxy(injectedProvider);
                if (injectedProviderProxy) {
                  engine.push(injectedProviderProxy);
                }
                provider = providerFromEngine(engine);
                this.updateProviderEngineProxy(provider);
                _context2.next = 12;
                return this.lookupNetwork();
              case 12:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));
      function setupProvider(_x2) {
        return _setupProvider.apply(this, arguments);
      }
      return setupProvider;
    }()
  }, {
    key: "lookupNetwork",
    value: function () {
      var _lookupNetwork = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        var chainConfig;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                chainConfig = this.config.chainConfig;
                this.update({
                  chainId: chainConfig.chainId
                });
                return _context3.abrupt("return", chainConfig.chainId || "");
              case 3:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));
      function lookupNetwork() {
        return _lookupNetwork.apply(this, arguments);
      }
      return lookupNetwork;
    }()
  }, {
    key: "getInjectedProviderProxy",
    value: function getInjectedProviderProxy(_) {
      return undefined;
    }
  }]);
  return BaseInjectedProvider;
}(BaseProvider);

var getBaseProviderHandlers = function getBaseProviderHandlers(injectedProvider) {
  var providerHandlers = {
    requestAccounts: function () {
      var _requestAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt("return", injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : []);
              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
      function requestAccounts() {
        return _requestAccounts.apply(this, arguments);
      }
      return requestAccounts;
    }(),
    getAccounts: function () {
      var _getAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt("return", injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : []);
              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));
      function getAccounts() {
        return _getAccounts.apply(this, arguments);
      }
      return getAccounts;
    }(),
    getPrivateKey: function () {
      var _getPrivateKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                throw ethErrors.rpc.methodNotSupported();
              case 1:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));
      function getPrivateKey() {
        return _getPrivateKey.apply(this, arguments);
      }
      return getPrivateKey;
    }(),
    getSecretKey: function () {
      var _getSecretKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                throw ethErrors.rpc.methodNotSupported();
              case 1:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));
      function getSecretKey() {
        return _getSecretKey.apply(this, arguments);
      }
      return getSecretKey;
    }(),
    signTransaction: function () {
      var _signTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(req) {
        var transaction;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return injectedProvider.signTransaction(req.params.message);
              case 2:
                transaction = _context5.sent;
                return _context5.abrupt("return", transaction);
              case 4:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));
      function signTransaction(_x) {
        return _signTransaction.apply(this, arguments);
      }
      return signTransaction;
    }(),
    signMessage: function () {
      var _signMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(req) {
        var sigData;
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return injectedProvider.signMessage(req.params.message, req.params.display);
              case 2:
                sigData = _context6.sent;
                return _context6.abrupt("return", sigData.signature);
              case 4:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));
      function signMessage(_x2) {
        return _signMessage.apply(this, arguments);
      }
      return signMessage;
    }(),
    signAllTransactions: function () {
      var _signAllTransactions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(req) {
        var _req$params, _req$params2;
        var transaction;
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                if (!(!((_req$params = req.params) !== null && _req$params !== void 0 && _req$params.message) || !((_req$params2 = req.params) !== null && _req$params2 !== void 0 && _req$params2.message.length))) {
                  _context7.next = 2;
                  break;
                }
                throw ethErrors.rpc.invalidParams("message");
              case 2:
                _context7.next = 4;
                return injectedProvider.signAllTransactions(req.params.message);
              case 4:
                transaction = _context7.sent;
                return _context7.abrupt("return", transaction);
              case 6:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));
      function signAllTransactions(_x3) {
        return _signAllTransactions.apply(this, arguments);
      }
      return signAllTransactions;
    }(),
    signAndSendTransaction: function () {
      var _signAndSendTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(req) {
        var txRes;
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return injectedProvider.signAndSendTransaction(req.params.message);
              case 2:
                txRes = _context8.sent;
                return _context8.abrupt("return", {
                  signature: txRes.signature
                });
              case 4:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8);
      }));
      function signAndSendTransaction(_x4) {
        return _signAndSendTransaction.apply(this, arguments);
      }
      return signAndSendTransaction;
    }()
  };
  return providerHandlers;
};

function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function createInjectedProviderProxyMiddleware(provider) {
  return createAsyncMiddleware( /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(req, res, _next) {
      var result;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return provider.request(_objectSpread$2({}, req));
            case 2:
              result = _context.sent;
              res.result = result;
            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return function (_x, _x2, _x3) {
      return _ref.apply(this, arguments);
    };
  }());
}

function _createSuper$5(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$5(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct$5() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var PhantomInjectedProvider = /*#__PURE__*/function (_BaseInjectedProvider) {
  _inherits(PhantomInjectedProvider, _BaseInjectedProvider);
  var _super = _createSuper$5(PhantomInjectedProvider);
  function PhantomInjectedProvider() {
    _classCallCheck(this, PhantomInjectedProvider);
    return _super.apply(this, arguments);
  }
  _createClass(PhantomInjectedProvider, [{
    key: "getProviderHandlers",
    value: function getProviderHandlers(injectedProvider) {
      return getBaseProviderHandlers(injectedProvider);
    }
  }, {
    key: "getInjectedProviderProxy",
    value: function getInjectedProviderProxy(injectedProvider) {
      return createInjectedProviderProxyMiddleware(injectedProvider);
    }
  }]);
  return PhantomInjectedProvider;
}(BaseInjectedProvider);

var getSlopeHandlers = function getSlopeHandlers(injectedProvider, getProviderEngineProxy) {
  var providerHandlers = {
    requestAccounts: function () {
      var _requestAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var _yield$injectedProvid, data;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return injectedProvider.connect();
              case 2:
                _yield$injectedProvid = _context.sent;
                data = _yield$injectedProvid.data;
                return _context.abrupt("return", [data.publicKey]);
              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
      function requestAccounts() {
        return _requestAccounts.apply(this, arguments);
      }
      return requestAccounts;
    }(),
    getAccounts: function () {
      var _getAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        var _yield$injectedProvid2, data;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return injectedProvider.connect();
              case 2:
                _yield$injectedProvid2 = _context2.sent;
                data = _yield$injectedProvid2.data;
                return _context2.abrupt("return", [data.publicKey]);
              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));
      function getAccounts() {
        return _getAccounts.apply(this, arguments);
      }
      return getAccounts;
    }(),
    getPrivateKey: function () {
      var _getPrivateKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                throw ethErrors.rpc.methodNotSupported();
              case 1:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));
      function getPrivateKey() {
        return _getPrivateKey.apply(this, arguments);
      }
      return getPrivateKey;
    }(),
    getSecretKey: function () {
      var _getSecretKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                throw ethErrors.rpc.methodNotSupported();
              case 1:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));
      function getSecretKey() {
        return _getSecretKey.apply(this, arguments);
      }
      return getSecretKey;
    }(),
    signTransaction: function () {
      var _signTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(req) {
        var txMessage, _yield$injectedProvid3, data, publicKey, signature;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                txMessage = req.params.message;
                if (txMessage) {
                  _context5.next = 3;
                  break;
                }
                throw ethErrors.rpc.invalidRequest({
                  message: "Invalid transaction message"
                });
              case 3:
                _context5.next = 5;
                return injectedProvider.signTransaction(bs58.encode(txMessage.serializeMessage()));
              case 5:
                _yield$injectedProvid3 = _context5.sent;
                data = _yield$injectedProvid3.data;
                if (!(!data.publicKey || !data.signature)) {
                  _context5.next = 9;
                  break;
                }
                throw new Error("Invalid signature from slope wallet");
              case 9:
                publicKey = new PublicKey(data.publicKey);
                signature = bs58.decode(data.signature);
                txMessage.addSignature(publicKey, Buffer.from(signature));
                return _context5.abrupt("return", txMessage);
              case 13:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));
      function signTransaction(_x) {
        return _signTransaction.apply(this, arguments);
      }
      return signTransaction;
    }(),
    signMessage: function () {
      var _signMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(req) {
        var response;
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return injectedProvider.signMessage(req.params.message);
              case 2:
                response = _context6.sent;
                return _context6.abrupt("return", bs58.decode(response.data.signature));
              case 4:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));
      function signMessage(_x2) {
        return _signMessage.apply(this, arguments);
      }
      return signMessage;
    }(),
    signAndSendTransaction: function () {
      var _signAndSendTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(req) {
        var provider, txMessage, _yield$injectedProvid4, data, publicKey, signature, chainConfig, conn, res;
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                provider = getProviderEngineProxy();
                if (provider) {
                  _context7.next = 3;
                  break;
                }
                throw ethErrors.provider.custom({
                  message: "Provider is not initialized",
                  code: 4902
                });
              case 3:
                txMessage = req.params.message;
                if (txMessage) {
                  _context7.next = 6;
                  break;
                }
                throw ethErrors.rpc.invalidRequest({
                  message: "Invalid transaction message"
                });
              case 6:
                _context7.next = 8;
                return injectedProvider.signTransaction(bs58.encode(txMessage.serializeMessage()));
              case 8:
                _yield$injectedProvid4 = _context7.sent;
                data = _yield$injectedProvid4.data;
                if (!(!data.publicKey || !data.signature)) {
                  _context7.next = 12;
                  break;
                }
                throw new Error("Invalid signature from slope wallet");
              case 12:
                publicKey = new PublicKey(data.publicKey);
                signature = bs58.decode(data.signature);
                txMessage.addSignature(publicKey, Buffer.from(signature));
                _context7.next = 17;
                return provider.request({
                  method: "solana_provider_config",
                  params: []
                });
              case 17:
                chainConfig = _context7.sent;
                conn = new Connection(chainConfig.rpcTarget);
                _context7.next = 21;
                return conn.sendRawTransaction(txMessage.serialize());
              case 21:
                res = _context7.sent;
                return _context7.abrupt("return", {
                  signature: res
                });
              case 23:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));
      function signAndSendTransaction(_x3) {
        return _signAndSendTransaction.apply(this, arguments);
      }
      return signAndSendTransaction;
    }(),
    signAllTransactions: function () {
      var _signAllTransactions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(req) {
        var _req$params, _req$params2, _data$signatures;
        var allTxns, length, unsignedTx, i, _yield$injectedProvid5, msg, data, publicKey, signature;
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                if (!(!((_req$params = req.params) !== null && _req$params !== void 0 && _req$params.message) || !((_req$params2 = req.params) !== null && _req$params2 !== void 0 && _req$params2.message.length))) {
                  _context8.next = 2;
                  break;
                }
                throw ethErrors.rpc.invalidParams("message");
              case 2:
                allTxns = req.params.message;
                length = allTxns.length;
                unsignedTx = [];
                for (i = 0; i < length; i++) {
                  unsignedTx.push(bs58.encode(req.params.message[i].serializeMessage()));
                }
                _context8.next = 8;
                return injectedProvider.signAllTransactions(unsignedTx);
              case 8:
                _yield$injectedProvid5 = _context8.sent;
                msg = _yield$injectedProvid5.msg;
                data = _yield$injectedProvid5.data;
                if (!(!data.publicKey || ((_data$signatures = data.signatures) === null || _data$signatures === void 0 ? void 0 : _data$signatures.length) !== length)) {
                  _context8.next = 13;
                  break;
                }
                throw new Error(msg);
              case 13:
                publicKey = new PublicKey(data.publicKey);
                for (i = 0; i < length; i++) {
                  signature = bs58.decode(data.signatures[i]);
                  allTxns[i].addSignature(publicKey, Buffer.from(signature));
                }
                return _context8.abrupt("return", allTxns);
              case 16:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8);
      }));
      function signAllTransactions(_x4) {
        return _signAllTransactions.apply(this, arguments);
      }
      return signAllTransactions;
    }()
  };
  return providerHandlers;
};

function _createSuper$4(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$4(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct$4() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var SlopeInjectedProxyProvider = /*#__PURE__*/function (_BaseInjectedProvider) {
  _inherits(SlopeInjectedProxyProvider, _BaseInjectedProvider);
  var _super = _createSuper$4(SlopeInjectedProxyProvider);
  function SlopeInjectedProxyProvider() {
    _classCallCheck(this, SlopeInjectedProxyProvider);
    return _super.apply(this, arguments);
  }
  _createClass(SlopeInjectedProxyProvider, [{
    key: "getProviderHandlers",
    value: function getProviderHandlers(injectedProvider) {
      return getSlopeHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));
    }
  }]);
  return SlopeInjectedProxyProvider;
}(BaseInjectedProvider);

var getSolflareHandlers = function getSolflareHandlers(injectedProvider, getProviderEngineProxy) {
  var solflareProviderHandlers = getBaseProviderHandlers(injectedProvider);
  solflareProviderHandlers.signAndSendTransaction = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(req) {
      var provider, transaction, chainConfig, conn, res;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              provider = getProviderEngineProxy();
              if (provider) {
                _context.next = 3;
                break;
              }
              throw ethErrors.provider.custom({
                message: "Provider is not initialized",
                code: 4902
              });
            case 3:
              _context.next = 5;
              return injectedProvider.signTransaction(req.params.message);
            case 5:
              transaction = _context.sent;
              _context.next = 8;
              return provider.request({
                method: "solana_provider_config",
                params: []
              });
            case 8:
              chainConfig = _context.sent;
              conn = new Connection(chainConfig.rpcTarget);
              _context.next = 12;
              return conn.sendRawTransaction(transaction.serialize());
            case 12:
              res = _context.sent;
              return _context.abrupt("return", {
                signature: res
              });
            case 14:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }();
  return solflareProviderHandlers;
};

function _createSuper$3(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$3(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct$3() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var SolflareInjectedProvider = /*#__PURE__*/function (_BaseInjectedProvider) {
  _inherits(SolflareInjectedProvider, _BaseInjectedProvider);
  var _super = _createSuper$3(SolflareInjectedProvider);
  function SolflareInjectedProvider() {
    _classCallCheck(this, SolflareInjectedProvider);
    return _super.apply(this, arguments);
  }
  _createClass(SolflareInjectedProvider, [{
    key: "getProviderHandlers",
    value: function getProviderHandlers(injectedProvider) {
      return getSolflareHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));
    }
  }]);
  return SolflareInjectedProvider;
}(BaseInjectedProvider);

var getSolletHandlers = function getSolletHandlers(injectedProvider, getProviderEngineProxy) {
  var providerHandlers = getBaseProviderHandlers(injectedProvider);
  providerHandlers.signMessage = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(req) {
      var _yield$injectedProvid, signature;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return injectedProvider.sign(req.params.message, "utf8");
            case 2:
              _yield$injectedProvid = _context.sent;
              signature = _yield$injectedProvid.signature;
              return _context.abrupt("return", signature);
            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }();
  providerHandlers.signAndSendTransaction = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(req) {
      var provider, transaction, chainConfig, conn, res;
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              provider = getProviderEngineProxy();
              if (provider) {
                _context2.next = 3;
                break;
              }
              throw ethErrors.provider.custom({
                message: "Provider is not initialized",
                code: 4902
              });
            case 3:
              _context2.next = 5;
              return injectedProvider.signTransaction(req.params.message);
            case 5:
              transaction = _context2.sent;
              _context2.next = 8;
              return provider.request({
                method: "solana_provider_config",
                params: []
              });
            case 8:
              chainConfig = _context2.sent;
              conn = new Connection(chainConfig.rpcTarget);
              _context2.next = 12;
              return conn.sendRawTransaction(transaction.serialize());
            case 12:
              res = _context2.sent;
              return _context2.abrupt("return", {
                signature: res
              });
            case 14:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));
    return function (_x2) {
      return _ref2.apply(this, arguments);
    };
  }();
  return providerHandlers;
};

function _createSuper$2(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$2(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct$2() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var SolletInjectedProvider = /*#__PURE__*/function (_BaseInjectedProvider) {
  _inherits(SolletInjectedProvider, _BaseInjectedProvider);
  var _super = _createSuper$2(SolletInjectedProvider);
  function SolletInjectedProvider() {
    _classCallCheck(this, SolletInjectedProvider);
    return _super.apply(this, arguments);
  }
  _createClass(SolletInjectedProvider, [{
    key: "getProviderHandlers",
    value: function getProviderHandlers(injectedProvider) {
      return getSolletHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));
    }
  }]);
  return SolletInjectedProvider;
}(BaseInjectedProvider);

var getTorusHandlers = function getTorusHandlers(injectedProvider) {
  var providerHandlers = {
    requestAccounts: function () {
      var _requestAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var accounts;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return injectedProvider.request({
                  method: "solana_requestAccounts",
                  params: {}
                });
              case 2:
                accounts = _context.sent;
                return _context.abrupt("return", accounts);
              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
      function requestAccounts() {
        return _requestAccounts.apply(this, arguments);
      }
      return requestAccounts;
    }(),
    getAccounts: function () {
      var _getAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        var accounts;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return injectedProvider.request({
                  method: "solana_requestAccounts",
                  params: {}
                });
              case 2:
                accounts = _context2.sent;
                return _context2.abrupt("return", accounts);
              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));
      function getAccounts() {
        return _getAccounts.apply(this, arguments);
      }
      return getAccounts;
    }(),
    getPrivateKey: function () {
      var _getPrivateKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                throw ethErrors.rpc.methodNotSupported();
              case 1:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));
      function getPrivateKey() {
        return _getPrivateKey.apply(this, arguments);
      }
      return getPrivateKey;
    }(),
    getSecretKey: function () {
      var _getSecretKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                throw ethErrors.rpc.methodNotSupported();
              case 1:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));
      function getSecretKey() {
        return _getSecretKey.apply(this, arguments);
      }
      return getSecretKey;
    }(),
    signMessage: function () {
      var _signMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(req) {
        var _req$params;
        var message;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                if ((_req$params = req.params) !== null && _req$params !== void 0 && _req$params.message) {
                  _context5.next = 2;
                  break;
                }
                throw ethErrors.rpc.invalidParams("message");
              case 2:
                _context5.next = 4;
                return injectedProvider.signMessage(req.params.message);
              case 4:
                message = _context5.sent;
                return _context5.abrupt("return", message);
              case 6:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));
      function signMessage(_x) {
        return _signMessage.apply(this, arguments);
      }
      return signMessage;
    }(),
    signTransaction: function () {
      var _signTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(req) {
        var _req$params2;
        var txMessage, response;
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                if ((_req$params2 = req.params) !== null && _req$params2 !== void 0 && _req$params2.message) {
                  _context6.next = 2;
                  break;
                }
                throw ethErrors.rpc.invalidParams("message");
              case 2:
                txMessage = req.params.message;
                _context6.next = 5;
                return injectedProvider.signTransaction(txMessage);
              case 5:
                response = _context6.sent;
                return _context6.abrupt("return", response);
              case 7:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));
      function signTransaction(_x2) {
        return _signTransaction.apply(this, arguments);
      }
      return signTransaction;
    }(),
    signAndSendTransaction: function () {
      var _signAndSendTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(req) {
        var _req$params3;
        var txMessage, response;
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                if ((_req$params3 = req.params) !== null && _req$params3 !== void 0 && _req$params3.message) {
                  _context7.next = 2;
                  break;
                }
                throw ethErrors.rpc.invalidParams("message");
              case 2:
                txMessage = req.params.message;
                _context7.next = 5;
                return injectedProvider.sendTransaction(txMessage);
              case 5:
                response = _context7.sent;
                return _context7.abrupt("return", {
                  signature: response
                });
              case 7:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));
      function signAndSendTransaction(_x3) {
        return _signAndSendTransaction.apply(this, arguments);
      }
      return signAndSendTransaction;
    }(),
    signAllTransactions: function () {
      var _signAllTransactions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(req) {
        var _req$params4, _req$params5;
        var transactions, response;
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                if (!(!((_req$params4 = req.params) !== null && _req$params4 !== void 0 && _req$params4.message) || !((_req$params5 = req.params) !== null && _req$params5 !== void 0 && _req$params5.message.length))) {
                  _context8.next = 2;
                  break;
                }
                throw ethErrors.rpc.invalidParams("message");
              case 2:
                transactions = req.params.message;
                _context8.next = 5;
                return injectedProvider.signAllTransactions(transactions);
              case 5:
                response = _context8.sent;
                return _context8.abrupt("return", response);
              case 7:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8);
      }));
      function signAllTransactions(_x4) {
        return _signAllTransactions.apply(this, arguments);
      }
      return signAllTransactions;
    }()
  };
  return providerHandlers;
};

function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createSuper$1(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$1(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct$1() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var TorusInjectedProvider = /*#__PURE__*/function (_BaseProvider) {
  _inherits(TorusInjectedProvider, _BaseProvider);
  var _super = _createSuper$1(TorusInjectedProvider);
  function TorusInjectedProvider(_ref) {
    var config = _ref.config,
      state = _ref.state;
    _classCallCheck(this, TorusInjectedProvider);
    return _super.call(this, {
      config: {
        chainConfig: _objectSpread$1(_objectSpread$1({}, config.chainConfig), {}, {
          chainNamespace: CHAIN_NAMESPACES.SOLANA
        })
      },
      state: state
    });
  }
  _createClass(TorusInjectedProvider, [{
    key: "switchChain",
    value: function () {
      var _switchChain = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_) {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt("return", Promise.resolve());
              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
      function switchChain(_x) {
        return _switchChain.apply(this, arguments);
      }
      return switchChain;
    }()
  }, {
    key: "setupProvider",
    value: function () {
      var _setupProvider = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(injectedProvider) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.handleInjectedProviderUpdate(injectedProvider);
                _context2.next = 3;
                return this.setupEngine(injectedProvider);
              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));
      function setupProvider(_x2) {
        return _setupProvider.apply(this, arguments);
      }
      return setupProvider;
    }()
  }, {
    key: "lookupNetwork",
    value: function () {
      var _lookupNetwork = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        var chainId, connectedChainId, connectedHexChainId;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (this.provider) {
                  _context3.next = 2;
                  break;
                }
                throw ethErrors.provider.custom({
                  message: "Torus solana provider is not initialized",
                  code: 4902
                });
              case 2:
                chainId = this.config.chainConfig.chainId;
                _context3.next = 5;
                return this.provider.request({
                  method: "solana_chainId"
                });
              case 5:
                connectedChainId = _context3.sent;
                connectedHexChainId = isHexStrict(connectedChainId.toString()) ? connectedChainId : "0x".concat(parseInt(connectedChainId, 10).toString(16));
                if (!(chainId !== connectedHexChainId)) {
                  _context3.next = 9;
                  break;
                }
                throw WalletInitializationError.rpcConnectionError("Invalid network, net_version is: ".concat(connectedHexChainId, ", expected: ").concat(chainId));
              case 9:
                this.update({
                  chainId: connectedHexChainId
                });
                this.provider.emit("connect", {
                  chainId: this.state.chainId
                });
                this.provider.emit("chainChanged", this.state.chainId);
                return _context3.abrupt("return", this.state.chainId);
              case 13:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));
      function lookupNetwork() {
        return _lookupNetwork.apply(this, arguments);
      }
      return lookupNetwork;
    }()
  }, {
    key: "setupEngine",
    value: function () {
      var _setupEngine = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(injectedProvider) {
        var providerHandlers, solanaMiddleware, injectedProviderProxy, engine, provider;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                providerHandlers = getTorusHandlers(injectedProvider);
                solanaMiddleware = createSolanaMiddleware(providerHandlers);
                injectedProviderProxy = createInjectedProviderProxyMiddleware(injectedProvider);
                engine = new JRPCEngine();
                engine.push(solanaMiddleware);
                engine.push(injectedProviderProxy);
                provider = providerFromEngine(engine);
                this.updateProviderEngineProxy(provider);
                _context4.next = 10;
                return this.lookupNetwork();
              case 10:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));
      function setupEngine(_x3) {
        return _setupEngine.apply(this, arguments);
      }
      return setupEngine;
    }()
  }, {
    key: "handleInjectedProviderUpdate",
    value: function () {
      var _handleInjectedProviderUpdate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(injectedProvider) {
        var _this = this;
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                injectedProvider.on("accountsChanged", /*#__PURE__*/function () {
                  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(accounts) {
                    return _regeneratorRuntime.wrap(function _callee5$(_context5) {
                      while (1) {
                        switch (_context5.prev = _context5.next) {
                          case 0:
                            _this.provider.emit("accountsChanged", accounts);
                          case 1:
                          case "end":
                            return _context5.stop();
                        }
                      }
                    }, _callee5);
                  }));
                  return function (_x5) {
                    return _ref2.apply(this, arguments);
                  };
                }());
                injectedProvider.on("chainChanged", /*#__PURE__*/function () {
                  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(chainId) {
                    var connectedHexChainId;
                    return _regeneratorRuntime.wrap(function _callee6$(_context6) {
                      while (1) {
                        switch (_context6.prev = _context6.next) {
                          case 0:
                            connectedHexChainId = isHexStrict(chainId) ? chainId : "0x".concat(parseInt(chainId, 10).toString(16)); // Check if chainId changed and trigger event
                            _this.configure({
                              chainConfig: _objectSpread$1(_objectSpread$1({}, _this.config.chainConfig), {}, {
                                chainId: connectedHexChainId
                              })
                            });
                            _context6.next = 4;
                            return _this.setupProvider(injectedProvider);
                          case 4:
                          case "end":
                            return _context6.stop();
                        }
                      }
                    }, _callee6);
                  }));
                  return function (_x6) {
                    return _ref3.apply(this, arguments);
                  };
                }());
              case 2:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));
      function handleInjectedProviderUpdate(_x4) {
        return _handleInjectedProviderUpdate.apply(this, arguments);
      }
      return handleInjectedProviderUpdate;
    }()
  }]);
  return TorusInjectedProvider;
}(BaseProvider);

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
function getProviderHandlers(_x) {
  return _getProviderHandlers.apply(this, arguments);
}
function _getProviderHandlers() {
  _getProviderHandlers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(_ref) {
    var privKey, getProviderEngineProxy, keyPairGenerator, keyPair, providerHandlers;
    return _regeneratorRuntime.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            privKey = _ref.privKey, getProviderEngineProxy = _ref.getProviderEngineProxy;
            keyPairGenerator = function keyPairGenerator() {
              return Keypair.fromSecretKey(Buffer.from(privKey, "hex"));
            };
            if (!(typeof privKey !== "string")) {
              _context9.next = 4;
              break;
            }
            throw WalletInitializationError.invalidParams("privKey must be a string");
          case 4:
            keyPair = keyPairGenerator();
            providerHandlers = {
              requestAccounts: function () {
                var _requestAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
                  return _regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          return _context.abrupt("return", [keyPair.publicKey.toBase58()]);
                        case 1:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                }));
                function requestAccounts() {
                  return _requestAccounts.apply(this, arguments);
                }
                return requestAccounts;
              }(),
              getAccounts: function () {
                var _getAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
                  return _regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                      switch (_context2.prev = _context2.next) {
                        case 0:
                          return _context2.abrupt("return", [keyPair.publicKey.toBase58()]);
                        case 1:
                        case "end":
                          return _context2.stop();
                      }
                    }
                  }, _callee2);
                }));
                function getAccounts() {
                  return _getAccounts.apply(this, arguments);
                }
                return getAccounts;
              }(),
              getPrivateKey: function () {
                var _getPrivateKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
                  return _regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          return _context3.abrupt("return", privKey);
                        case 1:
                        case "end":
                          return _context3.stop();
                      }
                    }
                  }, _callee3);
                }));
                function getPrivateKey() {
                  return _getPrivateKey.apply(this, arguments);
                }
                return getPrivateKey;
              }(),
              getSecretKey: function () {
                var _getSecretKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
                  return _regeneratorRuntime.wrap(function _callee4$(_context4) {
                    while (1) {
                      switch (_context4.prev = _context4.next) {
                        case 0:
                          return _context4.abrupt("return", bs58.encode(keyPair.secretKey));
                        case 1:
                        case "end":
                          return _context4.stop();
                      }
                    }
                  }, _callee4);
                }));
                function getSecretKey() {
                  return _getSecretKey.apply(this, arguments);
                }
                return getSecretKey;
              }(),
              signTransaction: function () {
                var _signTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(req) {
                  var _req$params;
                  var transaction;
                  return _regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                      switch (_context5.prev = _context5.next) {
                        case 0:
                          if ((_req$params = req.params) !== null && _req$params !== void 0 && _req$params.message) {
                            _context5.next = 2;
                            break;
                          }
                          throw ethErrors.rpc.invalidParams("message");
                        case 2:
                          transaction = req.params.message;
                          transaction.partialSign(keyPair);
                          return _context5.abrupt("return", transaction);
                        case 5:
                        case "end":
                          return _context5.stop();
                      }
                    }
                  }, _callee5);
                }));
                function signTransaction(_x2) {
                  return _signTransaction.apply(this, arguments);
                }
                return signTransaction;
              }(),
              signMessage: function () {
                var _signMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(req) {
                  var _req$params2;
                  var signedMsg;
                  return _regeneratorRuntime.wrap(function _callee6$(_context6) {
                    while (1) {
                      switch (_context6.prev = _context6.next) {
                        case 0:
                          if ((_req$params2 = req.params) !== null && _req$params2 !== void 0 && _req$params2.message) {
                            _context6.next = 2;
                            break;
                          }
                          throw ethErrors.rpc.invalidParams("message");
                        case 2:
                          signedMsg = nacl.sign.detached(req.params.message, keyPair.secretKey);
                          return _context6.abrupt("return", signedMsg);
                        case 4:
                        case "end":
                          return _context6.stop();
                      }
                    }
                  }, _callee6);
                }));
                function signMessage(_x3) {
                  return _signMessage.apply(this, arguments);
                }
                return signMessage;
              }(),
              signAndSendTransaction: function () {
                var _signAndSendTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(req) {
                  var _req$params3;
                  var _providerEngineProxy, transaction, sig;
                  return _regeneratorRuntime.wrap(function _callee7$(_context7) {
                    while (1) {
                      switch (_context7.prev = _context7.next) {
                        case 0:
                          if ((_req$params3 = req.params) !== null && _req$params3 !== void 0 && _req$params3.message) {
                            _context7.next = 2;
                            break;
                          }
                          throw ethErrors.rpc.invalidParams("message");
                        case 2:
                          _providerEngineProxy = getProviderEngineProxy();
                          if (_providerEngineProxy) {
                            _context7.next = 5;
                            break;
                          }
                          throw ethErrors.provider.custom({
                            message: "Provider is not initialized",
                            code: 4902
                          });
                        case 5:
                          transaction = req.params.message;
                          transaction.sign(keyPair);
                          _context7.next = 9;
                          return _providerEngineProxy.request({
                            method: "sendTransaction",
                            params: [bs58.encode(transaction.serialize())]
                          });
                        case 9:
                          sig = _context7.sent;
                          return _context7.abrupt("return", {
                            signature: sig
                          });
                        case 11:
                        case "end":
                          return _context7.stop();
                      }
                    }
                  }, _callee7);
                }));
                function signAndSendTransaction(_x4) {
                  return _signAndSendTransaction.apply(this, arguments);
                }
                return signAndSendTransaction;
              }(),
              signAllTransactions: function () {
                var _signAllTransactions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(req) {
                  var _req$params4, _req$params5, _req$params6;
                  var txns, _iterator, _step, tx, transaction;
                  return _regeneratorRuntime.wrap(function _callee8$(_context8) {
                    while (1) {
                      switch (_context8.prev = _context8.next) {
                        case 0:
                          if (!(!((_req$params4 = req.params) !== null && _req$params4 !== void 0 && _req$params4.message) || !((_req$params5 = req.params) !== null && _req$params5 !== void 0 && _req$params5.message.length))) {
                            _context8.next = 2;
                            break;
                          }
                          throw ethErrors.rpc.invalidParams("message");
                        case 2:
                          txns = (_req$params6 = req.params) === null || _req$params6 === void 0 ? void 0 : _req$params6.message;
                          _iterator = _createForOfIteratorHelper(txns || []);
                          try {
                            for (_iterator.s(); !(_step = _iterator.n()).done;) {
                              tx = _step.value;
                              transaction = tx;
                              transaction.partialSign(keyPair);
                            }
                          } catch (err) {
                            _iterator.e(err);
                          } finally {
                            _iterator.f();
                          }
                          return _context8.abrupt("return", txns);
                        case 6:
                        case "end":
                          return _context8.stop();
                      }
                    }
                  }, _callee8);
                }));
                function signAllTransactions(_x5) {
                  return _signAllTransactions.apply(this, arguments);
                }
                return signAllTransactions;
              }()
            };
            return _context9.abrupt("return", providerHandlers);
          case 7:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));
  return _getProviderHandlers.apply(this, arguments);
}

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var SolanaPrivateKeyProvider = /*#__PURE__*/function (_BaseProvider) {
  _inherits(SolanaPrivateKeyProvider, _BaseProvider);
  var _super = _createSuper(SolanaPrivateKeyProvider);
  function SolanaPrivateKeyProvider(_ref) {
    var config = _ref.config,
      state = _ref.state;
    _classCallCheck(this, SolanaPrivateKeyProvider);
    return _super.call(this, {
      config: {
        chainConfig: _objectSpread(_objectSpread({}, config.chainConfig), {}, {
          chainNamespace: CHAIN_NAMESPACES.SOLANA
        })
      },
      state: state
    });
  }
  _createClass(SolanaPrivateKeyProvider, [{
    key: "enable",
    value: function () {
      var _enable = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (this.state.privateKey) {
                  _context.next = 2;
                  break;
                }
                throw ethErrors.provider.custom({
                  message: "Private key is not found in state, plz pass it in constructor state param",
                  code: 4902
                });
              case 2:
                _context.next = 4;
                return this.setupProvider(this.state.privateKey);
              case 4:
                return _context.abrupt("return", this._providerEngineProxy.request({
                  method: "eth_accounts"
                }));
              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));
      function enable() {
        return _enable.apply(this, arguments);
      }
      return enable;
    }()
  }, {
    key: "setupProvider",
    value: function () {
      var _setupProvider = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(privKey) {
        var providerHandlers, solanaMiddleware, engine, _createJsonRpcClient, networkMiddleware, provider;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return getProviderHandlers({
                  privKey: privKey,
                  getProviderEngineProxy: this.getProviderEngineProxy.bind(this)
                });
              case 2:
                providerHandlers = _context2.sent;
                solanaMiddleware = createSolanaMiddleware(providerHandlers);
                engine = new JRPCEngine();
                _createJsonRpcClient = createJsonRpcClient(this.config.chainConfig), networkMiddleware = _createJsonRpcClient.networkMiddleware;
                engine.push(this.getChainSwitchMiddleware());
                engine.push(this.getAccountMiddleware());
                engine.push(solanaMiddleware);
                engine.push(networkMiddleware);
                provider = providerFromEngine(engine);
                this.updateProviderEngineProxy(provider);
                _context2.next = 14;
                return this.lookupNetwork();
              case 14:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));
      function setupProvider(_x) {
        return _setupProvider.apply(this, arguments);
      }
      return setupProvider;
    }()
  }, {
    key: "updateAccount",
    value: function () {
      var _updateAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(params) {
        var existingKey;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (this._providerEngineProxy) {
                  _context3.next = 2;
                  break;
                }
                throw ethErrors.provider.custom({
                  message: "Provider is not initialized",
                  code: 4902
                });
              case 2:
                _context3.next = 4;
                return this._providerEngineProxy.request({
                  method: "solanaPrivateKey"
                });
              case 4:
                existingKey = _context3.sent;
                if (!(existingKey !== params.privateKey)) {
                  _context3.next = 14;
                  break;
                }
                _context3.next = 8;
                return this.setupProvider(params.privateKey);
              case 8:
                _context3.t0 = this._providerEngineProxy;
                _context3.next = 11;
                return this._providerEngineProxy.request({
                  method: "requestAccounts"
                });
              case 11:
                _context3.t1 = _context3.sent;
                _context3.t2 = {
                  accounts: _context3.t1
                };
                _context3.t0.emit.call(_context3.t0, "accountsChanged", _context3.t2);
              case 14:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));
      function updateAccount(_x2) {
        return _updateAccount.apply(this, arguments);
      }
      return updateAccount;
    }()
  }, {
    key: "switchChain",
    value: function () {
      var _switchChain = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(params) {
        var chainConfig, privKey;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                if (this._providerEngineProxy) {
                  _context4.next = 2;
                  break;
                }
                throw ethErrors.provider.custom({
                  message: "Provider is not initialized",
                  code: 4902
                });
              case 2:
                chainConfig = this.getChainConfig(params.chainId);
                this.update({
                  chainId: "loading"
                });
                this.configure({
                  chainConfig: chainConfig
                });
                _context4.next = 7;
                return this._providerEngineProxy.request({
                  method: "solanaPrivateKey"
                });
              case 7:
                privKey = _context4.sent;
                _context4.next = 10;
                return this.setupProvider(privKey);
              case 10:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));
      function switchChain(_x3) {
        return _switchChain.apply(this, arguments);
      }
      return switchChain;
    }()
  }, {
    key: "lookupNetwork",
    value: function () {
      var _lookupNetwork = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
        var health, chainConfig;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                if (this._providerEngineProxy) {
                  _context5.next = 2;
                  break;
                }
                throw ethErrors.provider.custom({
                  message: "Provider is not initialized",
                  code: 4902
                });
              case 2:
                _context5.next = 4;
                return this._providerEngineProxy.request({
                  method: "getHealth",
                  params: []
                });
              case 4:
                health = _context5.sent;
                chainConfig = this.config.chainConfig;
                if (!(health !== "ok")) {
                  _context5.next = 8;
                  break;
                }
                throw WalletInitializationError.rpcConnectionError("Failed to lookup network for following rpc target: ".concat(chainConfig.rpcTarget));
              case 8:
                this.update({
                  chainId: chainConfig.chainId
                });
                if (this.state.chainId !== chainConfig.chainId) {
                  this.provider.emit("chainChanged", this.state.chainId);
                  this.provider.emit("connect", {
                    chainId: this.state.chainId
                  });
                }
                return _context5.abrupt("return", this.state.chainId);
              case 11:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));
      function lookupNetwork() {
        return _lookupNetwork.apply(this, arguments);
      }
      return lookupNetwork;
    }()
  }, {
    key: "getChainSwitchMiddleware",
    value: function getChainSwitchMiddleware() {
      var _this = this;
      var chainSwitchHandlers = {
        addNewChainConfig: function () {
          var _addNewChainConfig = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(req) {
            var _req$params, chainId, chainName, rpcUrls, blockExplorerUrls, nativeCurrency;
            return _regeneratorRuntime.wrap(function _callee6$(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    if (req.params) {
                      _context6.next = 2;
                      break;
                    }
                    throw ethErrors.rpc.invalidParams("Missing request params");
                  case 2:
                    _req$params = req.params, chainId = _req$params.chainId, chainName = _req$params.chainName, rpcUrls = _req$params.rpcUrls, blockExplorerUrls = _req$params.blockExplorerUrls, nativeCurrency = _req$params.nativeCurrency;
                    if (chainId) {
                      _context6.next = 5;
                      break;
                    }
                    throw ethErrors.rpc.invalidParams("Missing chainId in chainParams");
                  case 5:
                    if (!(!rpcUrls || rpcUrls.length === 0)) {
                      _context6.next = 7;
                      break;
                    }
                    throw ethErrors.rpc.invalidParams("Missing rpcUrls in chainParams");
                  case 7:
                    if (nativeCurrency) {
                      _context6.next = 9;
                      break;
                    }
                    throw ethErrors.rpc.invalidParams("Missing nativeCurrency in chainParams");
                  case 9:
                    _this.addChain({
                      chainNamespace: CHAIN_NAMESPACES.SOLANA,
                      chainId: chainId,
                      ticker: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.symbol) || "SOL",
                      tickerName: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.name) || "Solana",
                      displayName: chainName,
                      rpcTarget: rpcUrls[0],
                      blockExplorer: (blockExplorerUrls === null || blockExplorerUrls === void 0 ? void 0 : blockExplorerUrls[0]) || ""
                    });
                  case 10:
                  case "end":
                    return _context6.stop();
                }
              }
            }, _callee6);
          }));
          function addNewChainConfig(_x4) {
            return _addNewChainConfig.apply(this, arguments);
          }
          return addNewChainConfig;
        }(),
        switchSolanaChain: function () {
          var _switchSolanaChain = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(req) {
            return _regeneratorRuntime.wrap(function _callee7$(_context7) {
              while (1) {
                switch (_context7.prev = _context7.next) {
                  case 0:
                    if (req.params) {
                      _context7.next = 2;
                      break;
                    }
                    throw ethErrors.rpc.invalidParams("Missing request params");
                  case 2:
                    if (req.params.chainId) {
                      _context7.next = 4;
                      break;
                    }
                    throw ethErrors.rpc.invalidParams("Missing chainId");
                  case 4:
                    _context7.next = 6;
                    return _this.switchChain(req.params);
                  case 6:
                  case "end":
                    return _context7.stop();
                }
              }
            }, _callee7);
          }));
          function switchSolanaChain(_x5) {
            return _switchSolanaChain.apply(this, arguments);
          }
          return switchSolanaChain;
        }()
      };
      var chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);
      return chainSwitchMiddleware;
    }
  }, {
    key: "getAccountMiddleware",
    value: function getAccountMiddleware() {
      var _this2 = this;
      var accountHandlers = {
        updatePrivatekey: function () {
          var _updatePrivatekey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(req) {
            var privateKey;
            return _regeneratorRuntime.wrap(function _callee8$(_context8) {
              while (1) {
                switch (_context8.prev = _context8.next) {
                  case 0:
                    if (req.params) {
                      _context8.next = 2;
                      break;
                    }
                    throw ethErrors.rpc.invalidParams("Missing request params");
                  case 2:
                    if (req.params.privateKey) {
                      _context8.next = 4;
                      break;
                    }
                    throw ethErrors.rpc.invalidParams("Missing privateKey");
                  case 4:
                    privateKey = req.params.privateKey;
                    _context8.next = 7;
                    return _this2.updateAccount({
                      privateKey: privateKey
                    });
                  case 7:
                  case "end":
                    return _context8.stop();
                }
              }
            }, _callee8);
          }));
          function updatePrivatekey(_x6) {
            return _updatePrivatekey.apply(this, arguments);
          }
          return updatePrivatekey;
        }()
      };
      return createAccountMiddleware(accountHandlers);
    }
  }]);
  return SolanaPrivateKeyProvider;
}(BaseProvider);
_defineProperty(SolanaPrivateKeyProvider, "getProviderInstance", /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(params) {
    var providerFactory;
    return _regeneratorRuntime.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            providerFactory = new SolanaPrivateKeyProvider({
              config: {
                chainConfig: params.chainConfig
              }
            });
            _context9.next = 3;
            return providerFactory.setupProvider(params.privKey);
          case 3:
            return _context9.abrupt("return", providerFactory);
          case 4:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));
  return function (_x7) {
    return _ref2.apply(this, arguments);
  };
}());

var SolanaWallet = /*#__PURE__*/function () {
  function SolanaWallet(provider) {
    _classCallCheck(this, SolanaWallet);
    _defineProperty(this, "provider", void 0);
    this.provider = provider;
  }
  _createClass(SolanaWallet, [{
    key: "requestAccounts",
    value: function () {
      var _requestAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var accounts;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.provider.request({
                  method: "requestAccounts",
                  params: {}
                });
              case 2:
                accounts = _context.sent;
                return _context.abrupt("return", accounts);
              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));
      function requestAccounts() {
        return _requestAccounts.apply(this, arguments);
      }
      return requestAccounts;
    }()
  }, {
    key: "signAndSendTransaction",
    value: function () {
      var _signAndSendTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(transaction) {
        var _yield$this$provider$, signature;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.provider.request({
                  method: "signAndSendTransaction",
                  params: {
                    message: transaction
                  }
                });
              case 2:
                _yield$this$provider$ = _context2.sent;
                signature = _yield$this$provider$.signature;
                return _context2.abrupt("return", {
                  signature: signature
                });
              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));
      function signAndSendTransaction(_x) {
        return _signAndSendTransaction.apply(this, arguments);
      }
      return signAndSendTransaction;
    }()
  }, {
    key: "signTransaction",
    value: function () {
      var _signTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(transaction) {
        var signedTransaction;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.provider.request({
                  method: "signTransaction",
                  params: {
                    message: transaction
                  }
                });
              case 2:
                signedTransaction = _context3.sent;
                return _context3.abrupt("return", signedTransaction);
              case 4:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));
      function signTransaction(_x2) {
        return _signTransaction.apply(this, arguments);
      }
      return signTransaction;
    }()
  }, {
    key: "signAllTransactions",
    value: function () {
      var _signAllTransactions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(transactions) {
        var signedTransactions;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this.provider.request({
                  method: "signAllTransactions",
                  params: {
                    message: transactions
                  }
                });
              case 2:
                signedTransactions = _context4.sent;
                return _context4.abrupt("return", signedTransactions);
              case 4:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));
      function signAllTransactions(_x3) {
        return _signAllTransactions.apply(this, arguments);
      }
      return signAllTransactions;
    }()
  }, {
    key: "signMessage",
    value: function () {
      var _signMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(data) {
        var response;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return this.provider.request({
                  method: "signMessage",
                  params: {
                    message: data
                  }
                });
              case 2:
                response = _context5.sent;
                return _context5.abrupt("return", response);
              case 4:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));
      function signMessage(_x4) {
        return _signMessage.apply(this, arguments);
      }
      return signMessage;
    }()
  }, {
    key: "request",
    value: function () {
      var _request = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(args) {
        var result;
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return this.provider.request(args);
              case 2:
                result = _context6.sent;
                return _context6.abrupt("return", result);
              case 4:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));
      function request(_x5) {
        return _request.apply(this, arguments);
      }
      return request;
    }()
  }]);
  return SolanaWallet;
}();

export { PhantomInjectedProvider, SlopeInjectedProxyProvider, SolanaPrivateKeyProvider, SolanaWallet, SolflareInjectedProvider, SolletInjectedProvider, TorusInjectedProvider };
//# sourceMappingURL=solanaProvider.esm.js.map
