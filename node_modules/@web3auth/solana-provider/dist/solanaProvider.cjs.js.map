{"version":3,"file":"solanaProvider.cjs.js","mappings":";;UAAA;UACA;;;;;WCDA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;;ACNA,MAAM,8BAA4B;;;ACAlC,MAAM,2BAA4B;;;ACAlC,MAAM,wBAA4B;;;ACAlC,MAAM,yCAA4B;;;ACAlC,MAAM,8BAA4B;;;ACAlC,MAAM,gCAA4B;;;ACAlC,MAAM,8BAA4B;;;ACAlC,MAAM,2BAA4B;;;ACAlC,MAAM,gCAA4B;;ACAlC,MAAM,8BAA4B;;ACAlC,MAAM,oBAA4B;;ACAlC,MAAM,6BAA4B;;ACAkC;AACkF;AAG/I,SAASE,uBAAuB,CAACC,OAAe,EAAoC;EACzF,OAAO,UAACC,GAAyB,EAAEC,GAAyB,EAAEC,IAA4B,EAAEC,GAA0B,EAAK;IACzH,IAAIH,GAAG,CAACI,MAAM,KAAK,gBAAgB,EAAE;MACnCH,GAAG,CAACI,MAAM,GAAGN,OAAO;MACpB,OAAOI,GAAG,EAAE;IACd;IACA,OAAOD,IAAI,EAAE;EACf,CAAC;AACH;AAEO,SAASI,8BAA8B,CAACC,cAAyD,EAAoC;EAC1I,OAAO,UACLP,GAAyB,EACzBC,GAA4D,EAC5DC,IAA4B,EAC5BC,GAA0B,EACvB;IACH,IAAIH,GAAG,CAACI,MAAM,KAAK,wBAAwB,EAAE;MAC3CH,GAAG,CAACI,MAAM,GAAGE,cAAc;MAC3B,OAAOJ,GAAG,EAAE;IACd;IACA,OAAOD,IAAI,EAAE;EACf,CAAC;AACH;AAEO,SAASM,sBAAsB,CAACD,cAAyD,EAAoC;EAClI,IAAQR,OAAO,GAAKQ,cAAc,CAA1BR,OAAO;EAEf,OAAOF,kDAAe,CAAC,CAACC,uBAAuB,CAACC,OAAO,CAAC,EAAEO,8BAA8B,CAACC,cAAc,CAAC,CAAC,CAAC;AAC5G;AAEO,SAASE,mBAAmB,CAACF,cAAyD,EAG3F;EACA,IAAQG,SAAS,GAAKH,cAAc,CAA5BG,SAAS;EACjB,IAAMC,eAAe,GAAGf,0DAAqB,CAAC;IAAEc,SAAS,EAATA;EAAU,CAAC,CAAC;EAC5D,IAAME,iBAAiB,GAAGf,kDAAe,CAAC,CAACW,sBAAsB,CAACD,cAAc,CAAC,EAAEI,eAAe,CAAC,CAAC;EACpG,OAAO;IAAEC,iBAAiB,EAAjBA,iBAAiB;IAAED,eAAe,EAAfA;EAAgB,CAAC;AAC/C;;;;AC1CgH;AAazG,SAASG,2BAA2B,OAAuG;EAAA,IAApGC,WAAW,QAAXA,WAAW;EACvD,OAAOF,wDAAqB;IAAA,gFAAC,iBAAOG,OAAO,EAAEC,QAAQ,EAAEf,IAAI;MAAA;MAAA;QAAA;UAAA;YAAA;cACjDE,MAAM,GAAKY,OAAO,CAAlBZ,MAAM;cAAA,MACVA,MAAM,KAAK,aAAa;gBAAA;gBAAA;cAAA;cAAA,iCAASF,IAAI,EAAE;YAAA;cAAA,IAEtCa,WAAW;gBAAA;gBAAA;cAAA;cAAA,MAAQ,IAAIG,KAAK,CAAC,kDAAkD,CAAC;YAAA;cAAA;cAAA,OAE9DH,WAAW,CAACC,OAAO,CAAC;YAAA;cAArCG,QAAQ;cACdF,QAAQ,CAACZ,MAAM,GAAGc,QAAQ;cAAC,iCACpBC,SAAS;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CACjB;IAAA;MAAA;IAAA;EAAA,IAAC;AACJ;AAEO,SAASC,+BAA+B,QAIV;EAAA,IAHnCC,eAAe,SAAfA,eAAe;EAIf,OAAOT,wDAAqB;IAAA,gFAAC,kBAAOG,OAAO,EAAEC,QAAQ,EAAEf,IAAI;MAAA;MAAA;QAAA;UAAA;YAAA;cACjDE,MAAM,GAAKY,OAAO,CAAlBZ,MAAM;cAAA,MACVA,MAAM,KAAK,iBAAiB;gBAAA;gBAAA;cAAA;cAAA,kCAASF,IAAI,EAAE;YAAA;cAAA,IAE1CoB,eAAe;gBAAA;gBAAA;cAAA;cAAA,MAAQ,IAAIJ,KAAK,CAAC,sDAAsD,CAAC;YAAA;cAAA;cAAA,OAEtEI,eAAe,CAACN,OAAO,CAAC;YAAA;cAAzCG,QAAQ;cACdF,QAAQ,CAACZ,MAAM,GAAGc,QAAQ;cAAC,kCACpBC,SAAS;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CACjB;IAAA;MAAA;IAAA;EAAA,IAAC;AACJ;AAEO,SAASG,2BAA2B,CACzCC,YAAoB,EACpBC,OAA4C,EACV;EAClC,OAAOZ,wDAAqB;IAAA,gFAAa,kBAAOG,OAAO,EAAEC,QAAQ,EAAEf,IAAI;MAAA;MAAA;QAAA;UAAA;YAAA;cAC7DE,MAAM,GAAKY,OAAO,CAAlBZ,MAAM;cAAA,MACVA,MAAM,KAAKoB,YAAY;gBAAA;gBAAA;cAAA;cAAA,kCAAStB,IAAI,EAAE;YAAA;cAAA,IAErCuB,OAAO;gBAAA;gBAAA;cAAA;cAAA,MAAQ,IAAIP,KAAK,8BAAuBM,YAAY,mBAAgB;YAAA;cAAA;cAAA,OAE3DC,OAAO,CAACT,OAAO,CAAC;YAAA;cAA/BX,MAAM;cAEZY,QAAQ,CAACZ,MAAM,GAAGA,MAAM;cAAC,kCAClBe,SAAS;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CACjB;IAAA;MAAA;IAAA;EAAA,IAAC;AACJ;AAEO,SAASM,sBAAsB,CAACC,gBAAmC,EAAoC;EAC5G,IAAQZ,WAAW,GACjBY,gBAAgB,CADVZ,WAAW;IAAEO,eAAe,GAClCK,gBAAgB,CADGL,eAAe;IAAEM,eAAe,GACnDD,gBAAgB,CADoBC,eAAe;IAAEC,sBAAsB,GAC3EF,gBAAgB,CADqCE,sBAAsB;IAAEC,mBAAmB,GAChGH,gBAAgB,CAD6DG,mBAAmB;IAAEC,WAAW,GAC7GJ,gBAAgB,CADkFI,WAAW;IAAEC,aAAa,GAC5HL,gBAAgB,CAD+FK,aAAa;IAAEC,YAAY,GAC1IN,gBAAgB,CAD8GM,YAAY;EAG5I,OAAOpC,kDAAe,CAAC,CACrBwB,+BAA+B,CAAC;IAAEC,eAAe,EAAfA;EAAgB,CAAC,CAAC,EACpDR,2BAA2B,CAAC;IAAEC,WAAW,EAAXA;EAAY,CAAC,CAAC,EAC5CQ,2BAA2B,CAAwC,iBAAiB,EAAEK,eAAe,CAAC,EACtGL,2BAA2B,CAAkD,wBAAwB,EAAEM,sBAAsB,CAAC,EAC9HN,2BAA2B,CAA4C,qBAAqB,EAAEO,mBAAmB,CAAC,EAClHP,2BAA2B,CAAsC,aAAa,EAAEQ,WAAW,CAAC,EAC5FR,2BAA2B,CAAe,kBAAkB,EAAES,aAAa,CAAC,EAC5ET,2BAA2B,CAAe,iBAAiB,EAAEU,YAAY,CAAC,CAC3E,CAAC;AACJ;AAiBO,SAASC,2BAA2B,QAAmG;EAAA,IAAhGC,iBAAiB,SAAjBA,iBAAiB;IAAEC,iBAAiB,SAAjBA,iBAAiB;EAChF,OAAOvC,kDAAe,CAAC,CACrB0B,2BAA2B,CAAgC,gBAAgB,EAAEY,iBAAiB,CAAC,EAC/FZ,2BAA2B,CAA4B,mBAAmB,EAAEa,iBAAiB,CAAC,CAC/F,CAAC;AACJ;AAKO,SAASC,uBAAuB,QAA2E;EAAA,IAAxEC,gBAAgB,SAAhBA,gBAAgB;EACxD,OAAOzC,kDAAe,CAAC,CAAC0B,2BAA2B,CAA+B,eAAe,EAAEe,gBAAgB,CAAC,CAAC,CAAC;AACxH;;;;;;;;;;;;;;ACxGiE;AACM;AACF;AACyB;AAE7B;AAC6B;AAEvF,IAAeK,oBAAoB;EAAA;EAAA;EACxC,oCAA0F;IAAA,IAA5EC,MAAM,QAANA,MAAM;MAAEC,KAAK,QAALA,KAAK;IAAA;IAAA,yBACnB;MAAED,MAAM,EAAE;QAAEE,WAAW,kCAAOF,MAAM,CAACE,WAAW;UAAEC,cAAc,EAAEN,4CAAuBO;QAAA;MAAG,CAAC;MAAEH,KAAK,EAALA;IAAM,CAAC;EAC9G;EAAC;IAAA;IAAA;MAAA,uFAED,iBAAyBI,CAAsB;QAAA;UAAA;YAAA;cAAA;gBAAA,iCACtCC,OAAO,CAACC,OAAO,EAAE;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACzB;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,yFAED,kBAA2BC,gBAAmB;QAAA;QAAA;UAAA;YAAA;cAAA;gBACtCC,MAAM,GAAG,IAAIb,yCAAU,EAAE;gBAEzBb,gBAAgB,GAAG,IAAI,CAAC2B,mBAAmB,CAACF,gBAAgB,CAAC;gBAC7DG,gBAAgB,GAAG7B,sBAAsB,CAACC,gBAAgB,CAAC;gBACjE0B,MAAM,CAACG,IAAI,CAACD,gBAAgB,CAAC;gBAEvBE,gBAAgB,GAAGjD,sBAAsB,CAAC,IAAI,CAACoC,MAAM,CAACE,WAAW,CAAsB;gBAC7FO,MAAM,CAACG,IAAI,CAACC,gBAAgB,CAAC;gBAEvBC,qBAAqB,GAAG,IAAI,CAACC,wBAAwB,CAACP,gBAAgB,CAAC;gBAC7E,IAAIM,qBAAqB,EAAE;kBACzBL,MAAM,CAACG,IAAI,CAACE,qBAAqB,CAAC;gBACpC;gBAEME,QAAQ,GAAGrB,uDAAkB,CAACc,MAAM,CAAC;gBAC3C,IAAI,CAACQ,yBAAyB,CAACD,QAAQ,CAAC;gBAAC;gBAAA,OACnC,IAAI,CAACE,aAAa,EAAE;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAC3B;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,yFAED;QAAA;QAAA;UAAA;YAAA;cAAA;gBACUhB,WAAW,GAAK,IAAI,CAACF,MAAM,CAA3BE,WAAW;gBACnB,IAAI,CAACiB,MAAM,CAAC;kBACVhE,OAAO,EAAE+C,WAAW,CAAC/C;gBACvB,CAAC,CAAC;gBAAC,kCACI+C,WAAW,CAAC/C,OAAO,IAAI,EAAE;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACjC;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA,OAED,kCAAmCkD,CAAI,EAAoC;MACzE,OAAO7B,SAAS;IAClB;EAAC;EAAA;AAAA,EAvCmDsB,0CAAY;;ACRlE,MAAM,6BAA4B;;;ACAlC,MAAM,uCAA4B;;;;ACEV;AACmB;AAKpC,IAAMwB,uBAAuB,GAAG,SAA1BA,uBAAuB,CAAId,gBAAqC,EAAwB;EACnG,IAAMzB,gBAAmC,GAAG;IAC1CL,eAAe;MAAA,2FAAE;QAAA;UAAA;YAAA;cAAA;gBAAA,iCACR8B,gBAAgB,CAACe,SAAS,GAAG,CAACH,8BAAW,CAACZ,gBAAgB,CAACe,SAAS,CAACE,OAAO,EAAE,CAAC,CAAC,GAAG,EAAE;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAC7F;MAAA;QAAA;MAAA;MAAA;IAAA;IACDtD,WAAW;MAAA,uFAAE;QAAA;UAAA;YAAA;cAAA;gBAAA,kCAAaqC,gBAAgB,CAACe,SAAS,GAAG,CAACH,8BAAW,CAACZ,gBAAgB,CAACe,SAAS,CAACE,OAAO,EAAE,CAAC,CAAC,GAAG,EAAE;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAAC;MAAA;QAAA;MAAA;MAAA;IAAA;IAChHrC,aAAa;MAAA,yFAAE;QAAA;UAAA;YAAA;cAAA;gBAAA,MACPiC,wEAAgC,EAAE;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACzC;MAAA;QAAA;MAAA;MAAA;IAAA;IACDhC,YAAY;MAAA,wFAAE;QAAA;UAAA;YAAA;cAAA;gBAAA,MACNgC,wEAAgC,EAAE;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACzC;MAAA;QAAA;MAAA;MAAA;IAAA;IACDrC,eAAe;MAAA,2FAAE,kBAAO5B,GAA0C;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACtCoD,gBAAgB,CAACxB,eAAe,CAAC5B,GAAG,CAACwE,MAAM,CAACC,OAAO,CAAC;cAAA;gBAAxEC,WAAW;gBAAA,kCACVA,WAAW;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACnB;MAAA;QAAA;MAAA;MAAA;IAAA;IACD3C,WAAW;MAAA,uFAAE,kBAAO/B,GAAmE;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OAC/DoD,gBAAgB,CAACrB,WAAW,CAAC/B,GAAG,CAACwE,MAAM,CAACC,OAAO,EAAEzE,GAAG,CAACwE,MAAM,CAACG,OAAO,CAAC;cAAA;gBAApFC,OAAO;gBAAA,kCACNA,OAAO,CAACC,SAAS;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACzB;MAAA;QAAA;MAAA;MAAA;IAAA;IACD/C,mBAAmB;MAAA,+FAAE,kBAAO9B,GAA4C;QAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA,MAClE,iBAACA,GAAG,CAACwE,MAAM,wCAAV,YAAYC,OAAO,KAAI,kBAACzE,GAAG,CAACwE,MAAM,yCAAV,aAAYC,OAAO,CAACK,MAAM;kBAAA;kBAAA;gBAAA;gBAAA,MAC/Cb,mEAA2B,CAAC,SAAS,CAAC;cAAA;gBAAA;gBAAA,OAEpBb,gBAAgB,CAACtB,mBAAmB,CAAC9B,GAAG,CAACwE,MAAM,CAACC,OAAO,CAAC;cAAA;gBAA5EC,WAAW;gBAAA,kCACVA,WAAW;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACnB;MAAA;QAAA;MAAA;MAAA;IAAA;IACD7C,sBAAsB;MAAA,kGAAE,kBAAO7B,GAA0C;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACnDoD,gBAAgB,CAACvB,sBAAsB,CAAC7B,GAAG,CAACwE,MAAM,CAACC,OAAO,CAAC;cAAA;gBAAzEO,KAAK;gBAAA,kCACJ;kBAAEH,SAAS,EAAEG,KAAK,CAACH;gBAAU,CAAC;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACtC;MAAA;QAAA;MAAA;MAAA;IAAA;EACH,CAAC;EACD,OAAOlD,gBAAgB;AACzB,CAAC;;;;;;;ACzCoI;AAI9H,SAASsD,qCAAqC,CAACrB,QAA0B,EAAoC;EAClH,OAAO/C,wDAAqB;IAAA,+EAAC,iBAAOb,GAA2B,EAAEC,GAA0B,EAAEiF,KAA6B;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,OACnGtB,QAAQ,CAAC5C,OAAO,CAAC,uCACjChB,GAAG,EACN;YAAA;cAFIK,MAAM;cAGZJ,GAAG,CAACI,MAAM,GAAGA,MAAM;YAAC;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CACrB;IAAA;MAAA;IAAA;EAAA,IAAC;AACJ;;;;;;;;;ACPoE;AACD;AACc;AAE1E,IAAM8E,uBAAuB;EAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OAClC,6BAA8B/B,gBAAwC,EAAqB;MACzF,OAAOc,uBAAuB,CAACd,gBAAgB,CAAC;IAClD;EAAC;IAAA;IAAA,OAED,kCAAmCA,gBAAwC,EAAoC;MAC7G,OAAO6B,qCAAqC,CAAC7B,gBAAgB,CAAC;IAChE;EAAC;EAAA;AAAA,EAP0CT,oBAAoB;;ACRjE,MAAM,uBAA4B;;;;ACAmC;AAG7C;AACmB;AAKpC,IAAM2C,gBAAgB,GAAG,SAAnBA,gBAAgB,CAAIlC,gBAAgC,EAAEmC,sBAAsD,EAAwB;EAC/I,IAAM5D,gBAAmC,GAAG;IAC1CL,eAAe;MAAA,2FAAE;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACQ8B,gBAAgB,CAACoC,OAAO,EAAE;cAAA;gBAAA;gBAAzCC,IAAI,yBAAJA,IAAI;gBAAA,iCACL,CAACA,IAAI,CAACtB,SAAS,CAAC;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACxB;MAAA;QAAA;MAAA;MAAA;IAAA;IACDpD,WAAW;MAAA,uFAAE;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACYqC,gBAAgB,CAACoC,OAAO,EAAE;cAAA;gBAAA;gBAAzCC,IAAI,0BAAJA,IAAI;gBAAA,kCACL,CAACA,IAAI,CAACtB,SAAS,CAAC;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACxB;MAAA;QAAA;MAAA;MAAA;IAAA;IACDnC,aAAa;MAAA,yFAAE;QAAA;UAAA;YAAA;cAAA;gBAAA,MACPiC,wEAAgC,EAAE;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACzC;MAAA;QAAA;MAAA;MAAA;IAAA;IACDhC,YAAY;MAAA,wFAAE;QAAA;UAAA;YAAA;cAAA;gBAAA,MACNgC,wEAAgC,EAAE;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACzC;MAAA;QAAA;MAAA;MAAA;IAAA;IACDrC,eAAe;MAAA,2FAAE,kBAAO5B,GAA0C;QAAA;QAAA;UAAA;YAAA;cAAA;gBAC1D0F,SAAS,GAAG1F,GAAG,CAACwE,MAAM,CAACC,OAAO;gBAAA,IAC/BiB,SAAS;kBAAA;kBAAA;gBAAA;gBAAA,MAAQzB,oEAA4B,CAAC;kBAAEQ,OAAO,EAAE;gBAA8B,CAAC,CAAC;cAAA;gBAAA;gBAAA,OACvErB,gBAAgB,CAACxB,eAAe,CAACoC,8BAAW,CAAC0B,SAAS,CAACE,gBAAgB,EAAE,CAAC,CAAC;cAAA;gBAAA;gBAA1FH,IAAI,0BAAJA,IAAI;gBAAA,MACR,CAACA,IAAI,CAACtB,SAAS,IAAI,CAACsB,IAAI,CAACZ,SAAS;kBAAA;kBAAA;gBAAA;gBAAA,MAAQ,IAAI3D,KAAK,CAAC,qCAAqC,CAAC;cAAA;gBACxFiD,SAAS,GAAG,IAAIkB,iCAAS,CAACI,IAAI,CAACtB,SAAS,CAAC;gBACzCU,SAAS,GAAGb,8BAAW,CAACyB,IAAI,CAACZ,SAAS,CAAC;gBAC7Ca,SAAS,CAACI,YAAY,CAAC3B,SAAS,EAAE4B,MAAM,CAACC,IAAI,CAACnB,SAAS,CAAC,CAAC;gBAAC,kCACnDa,SAAS;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACjB;MAAA;QAAA;MAAA;MAAA;IAAA;IACD3D,WAAW;MAAA,uFAAE,kBAAO/B,GAAyC;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACpCoD,gBAAgB,CAACrB,WAAW,CAAC/B,GAAG,CAACwE,MAAM,CAACC,OAAO,CAAC;cAAA;gBAAjExD,QAAQ;gBAAA,kCACP+C,8BAAW,CAAC/C,QAAQ,CAACwE,IAAI,CAACZ,SAAS,CAAC;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAC5C;MAAA;QAAA;MAAA;MAAA;IAAA;IACDhD,sBAAsB;MAAA,kGAAE,kBAAO7B,GAA0C;QAAA;QAAA;UAAA;YAAA;cAAA;gBACjE4D,QAAQ,GAAG2B,sBAAsB,EAAE;gBAAA,IACpC3B,QAAQ;kBAAA;kBAAA;gBAAA;gBAAA,MAAQK,iEAAyB,CAAC;kBAAEQ,OAAO,EAAE,6BAA6B;kBAAEyB,IAAI,EAAE;gBAAK,CAAC,CAAC;cAAA;gBAChGR,SAAS,GAAG1F,GAAG,CAACwE,MAAM,CAACC,OAAO;gBAAA,IAC/BiB,SAAS;kBAAA;kBAAA;gBAAA;gBAAA,MAAQzB,oEAA4B,CAAC;kBAAEQ,OAAO,EAAE;gBAA8B,CAAC,CAAC;cAAA;gBAAA;gBAAA,OACvErB,gBAAgB,CAACxB,eAAe,CAACoC,8BAAW,CAAC0B,SAAS,CAACE,gBAAgB,EAAE,CAAC,CAAC;cAAA;gBAAA;gBAA1FH,IAAI,0BAAJA,IAAI;gBAAA,MACR,CAACA,IAAI,CAACtB,SAAS,IAAI,CAACsB,IAAI,CAACZ,SAAS;kBAAA;kBAAA;gBAAA;gBAAA,MAAQ,IAAI3D,KAAK,CAAC,qCAAqC,CAAC;cAAA;gBACxFiD,SAAS,GAAG,IAAIkB,iCAAS,CAACI,IAAI,CAACtB,SAAS,CAAC;gBACzCU,SAAS,GAAGb,8BAAW,CAACyB,IAAI,CAACZ,SAAS,CAAC;gBAC7Ca,SAAS,CAACI,YAAY,CAAC3B,SAAS,EAAE4B,MAAM,CAACC,IAAI,CAACnB,SAAS,CAAC,CAAC;gBAAC;gBAAA,OAC/BjB,QAAQ,CAAC5C,OAAO,CAAoB;kBAAEZ,MAAM,EAAE,wBAAwB;kBAAEoE,MAAM,EAAE;gBAAG,CAAC,CAAC;cAAA;gBAA1G1B,WAAW;gBACXqD,IAAI,GAAG,IAAIf,kCAAU,CAACtC,WAAW,CAACpC,SAAS,CAAC;gBAAA;gBAAA,OAChCyF,IAAI,CAACC,kBAAkB,CAACV,SAAS,CAACW,SAAS,EAAE,CAAC;cAAA;gBAA1DpG,GAAG;gBAAA,kCACF;kBAAE4E,SAAS,EAAE5E;gBAAI,CAAC;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAC1B;MAAA;QAAA;MAAA;MAAA;IAAA;IACD6B,mBAAmB;MAAA,+FAAE,kBAAO9B,GAA4C;QAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA,MAClE,iBAACA,GAAG,CAACwE,MAAM,wCAAV,YAAYC,OAAO,KAAI,kBAACzE,GAAG,CAACwE,MAAM,yCAAV,aAAYC,OAAO,CAACK,MAAM;kBAAA;kBAAA;gBAAA;gBAAA,MAC/Cb,mEAA2B,CAAC,SAAS,CAAC;cAAA;gBAGxCqC,OAAO,GAAGtG,GAAG,CAACwE,MAAM,CAACC,OAAO;gBAC1BK,MAAM,GAAKwB,OAAO,CAAlBxB,MAAM;gBAERyB,UAAU,GAAG,EAAE;gBAErB,KAASC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG1B,MAAM,EAAE0B,CAAC,EAAE,EAAE;kBAC/BD,UAAU,CAAC/C,IAAI,CAACQ,8BAAW,CAAChE,GAAG,CAACwE,MAAM,CAACC,OAAO,CAAC+B,CAAC,CAAC,CAACZ,gBAAgB,EAAE,CAAC,CAAC;gBACxE;gBAAC;gBAAA,OAC2BxC,gBAAgB,CAACtB,mBAAmB,CAACyE,UAAU,CAAC;cAAA;gBAAA;gBAApEE,GAAG,0BAAHA,GAAG;gBAAEhB,IAAI,0BAAJA,IAAI;gBAAA,MAEb,CAACA,IAAI,CAACtB,SAAS,IAAI,qBAAAsB,IAAI,CAACiB,UAAU,qDAAf,iBAAiB5B,MAAM,MAAKA,MAAM;kBAAA;kBAAA;gBAAA;gBAAA,MAAQ,IAAI5D,KAAK,CAACuF,GAAG,CAAC;cAAA;gBAEzEtC,SAAS,GAAG,IAAIkB,iCAAS,CAACI,IAAI,CAACtB,SAAS,CAAC;gBAE/C,KAASqC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG1B,MAAM,EAAE0B,CAAC,EAAE,EAAE;kBACzB3B,SAAS,GAAGb,8BAAW,CAACyB,IAAI,CAACiB,UAAU,CAACF,CAAC,CAAC,CAAC;kBACjDF,OAAO,CAACE,CAAC,CAAC,CAACV,YAAY,CAAC3B,SAAS,EAAE4B,MAAM,CAACC,IAAI,CAACnB,SAAS,CAAC,CAAC;gBAC5D;gBAAC,kCAEMyB,OAAO;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACf;MAAA;QAAA;MAAA;MAAA;IAAA;EACH,CAAC;EACD,OAAO3E,gBAAgB;AACzB,CAAC;;;;;;;;;AChFmE;AACd;AAE/C,IAAMgF,0BAA0B;EAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OACrC,6BAA8BvD,gBAAgC,EAAqB;MACjF,OAAOkC,gBAAgB,CAAClC,gBAAgB,EAAE,IAAI,CAACmC,sBAAsB,CAACqB,IAAI,CAAC,IAAI,CAAC,CAAC;IACnF;EAAC;EAAA;AAAA,EAH6CjE,oBAAoB;;;;ACLV;AAGf;AAIwB;AAE5D,IAAMkE,mBAAmB,GAAG,SAAtBA,mBAAmB,CAAIzD,gBAAgC,EAAEmC,sBAAsD,EAAwB;EAClJ,IAAMuB,wBAAwB,GAAG5C,uBAAuB,CAACd,gBAAgB,CAAwB;EACjG0D,wBAAwB,CAACjF,sBAAsB;IAAA,+EAAG,iBAAO7B,GAA0C;MAAA;MAAA;QAAA;UAAA;YAAA;cAC3F4D,QAAQ,GAAG2B,sBAAsB,EAAE;cAAA,IACpC3B,QAAQ;gBAAA;gBAAA;cAAA;cAAA,MAAQK,iEAAyB,CAAC;gBAAEQ,OAAO,EAAE,6BAA6B;gBAAEyB,IAAI,EAAE;cAAK,CAAC,CAAC;YAAA;cAAA;cAAA,OAC5E9C,gBAAgB,CAACxB,eAAe,CAAC5B,GAAG,CAACwE,MAAM,CAACC,OAAO,CAAC;YAAA;cAAxEC,WAAW;cAAA;cAAA,OACUd,QAAQ,CAAC5C,OAAO,CAAoB;gBAAEZ,MAAM,EAAE,wBAAwB;gBAAEoE,MAAM,EAAE;cAAG,CAAC,CAAC;YAAA;cAA1G1B,WAAW;cACXqD,IAAI,GAAG,IAAIf,kCAAU,CAACtC,WAAW,CAACpC,SAAS,CAAC;cAAA;cAAA,OAChCyF,IAAI,CAACC,kBAAkB,CAAC1B,WAAW,CAAC2B,SAAS,EAAE,CAAC;YAAA;cAA5DpG,GAAG;cAAA,iCACF;gBAAE4E,SAAS,EAAE5E;cAAI,CAAC;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAC1B;IAAA;MAAA;IAAA;EAAA;EACD,OAAO6G,wBAAwB;AACjC,CAAC;;;;;;;;;ACnBmE;AACX;AAElD,IAAMC,wBAAwB;EAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OACnC,6BAA8B3D,gBAAgC,EAAqB;MACjF,OAAOyD,mBAAmB,CAACzD,gBAAgB,EAAE,IAAI,CAACmC,sBAAsB,CAACqB,IAAI,CAAC,IAAI,CAAC,CAAC;IACtF;EAAC;EAAA;AAAA,EAH2CjE,oBAAoB;;;;ACJR;AAGf;AAIwB;AAE5D,IAAMqE,iBAAiB,GAAG,SAApBA,iBAAiB,CAAI5D,gBAA8B,EAAEmC,sBAAsD,EAAwB;EAC9I,IAAM5D,gBAAgB,GAAGuC,uBAAuB,CAACd,gBAAgB,CAAwB;EACzFzB,gBAAgB,CAACI,WAAW;IAAA,+EAAG,iBAAO/B,GAAyC;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,OACjDoD,gBAAgB,CAAC6D,IAAI,CAACjH,GAAG,CAACwE,MAAM,CAACC,OAAO,EAAE,MAAM,CAAC;YAAA;cAAA;cAArEI,SAAS,yBAATA,SAAS;cAAA,iCACVA,SAAS;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CACjB;IAAA;MAAA;IAAA;EAAA;EACDlD,gBAAgB,CAACE,sBAAsB;IAAA,gFAAG,kBAAO7B,GAA0C;MAAA;MAAA;QAAA;UAAA;YAAA;cACnF4D,QAAQ,GAAG2B,sBAAsB,EAAE;cAAA,IACpC3B,QAAQ;gBAAA;gBAAA;cAAA;cAAA,MAAQK,iEAAyB,CAAC;gBAAEQ,OAAO,EAAE,6BAA6B;gBAAEyB,IAAI,EAAE;cAAK,CAAC,CAAC;YAAA;cAAA;cAAA,OAC5E9C,gBAAgB,CAACxB,eAAe,CAAC5B,GAAG,CAACwE,MAAM,CAACC,OAAO,CAAC;YAAA;cAAxEC,WAAW;cAAA;cAAA,OACUd,QAAQ,CAAC5C,OAAO,CAAoB;gBAAEZ,MAAM,EAAE,wBAAwB;gBAAEoE,MAAM,EAAE;cAAG,CAAC,CAAC;YAAA;cAA1G1B,WAAW;cACXqD,IAAI,GAAG,IAAIf,kCAAU,CAACtC,WAAW,CAACpC,SAAS,CAAC;cAAA;cAAA,OAChCyF,IAAI,CAACC,kBAAkB,CAAC1B,WAAW,CAAC2B,SAAS,EAAE,CAAC;YAAA;cAA5DpG,GAAG;cAAA,kCACF;gBAAE4E,SAAS,EAAE5E;cAAI,CAAC;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAC1B;IAAA;MAAA;IAAA;EAAA;EACD,OAAO0B,gBAAgB;AACzB,CAAC;;;;;;;;;ACvBmE;AACb;AAEhD,IAAMuF,sBAAsB;EAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OACjC,6BAA8B9D,gBAA8B,EAAqB;MAC/E,OAAO4D,iBAAiB,CAAC5D,gBAAgB,EAAE,IAAI,CAACmC,sBAAsB,CAACqB,IAAI,CAAC,IAAI,CAAC,CAAC;IACpF;EAAC;EAAA;AAAA,EAHyCjE,oBAAoB;;;;ACJrB;AAKpC,IAAMwE,gBAAgB,GAAG,SAAnBA,gBAAgB,CAAI/D,gBAAsC,EAAwB;EAC7F,IAAMzB,gBAAmC,GAAG;IAC1CL,eAAe;MAAA,2FAAE;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACQ8B,gBAAgB,CAACpC,OAAO,CAAW;kBACxDZ,MAAM,EAAE,wBAAwB;kBAChCoE,MAAM,EAAE,CAAC;gBACX,CAAC,CAAC;cAAA;gBAHIrD,QAAQ;gBAAA,iCAIPA,QAAQ;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAChB;MAAA;QAAA;MAAA;MAAA;IAAA;IAEDJ,WAAW;MAAA,uFAAE;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACYqC,gBAAgB,CAACpC,OAAO,CAAW;kBACxDZ,MAAM,EAAE,wBAAwB;kBAChCoE,MAAM,EAAE,CAAC;gBACX,CAAC,CAAC;cAAA;gBAHIrD,QAAQ;gBAAA,kCAIPA,QAAQ;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAChB;MAAA;QAAA;MAAA;MAAA;IAAA;IAEDa,aAAa;MAAA,yFAAE;QAAA;UAAA;YAAA;cAAA;gBAAA,MACPiC,wEAAgC,EAAE;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACzC;MAAA;QAAA;MAAA;MAAA;IAAA;IACDhC,YAAY;MAAA,wFAAE;QAAA;UAAA;YAAA;cAAA;gBAAA,MACNgC,wEAAgC,EAAE;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACzC;MAAA;QAAA;MAAA;MAAA;IAAA;IACDlC,WAAW;MAAA,uFAAE,kBAAO/B,GAAyC;QAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA,mBACtDA,GAAG,CAACwE,MAAM,wCAAV,YAAYC,OAAO;kBAAA;kBAAA;gBAAA;gBAAA,MAChBR,mEAA2B,CAAC,SAAS,CAAC;cAAA;gBAAA;gBAAA,OAExBb,gBAAgB,CAACrB,WAAW,CAAC/B,GAAG,CAACwE,MAAM,CAACC,OAAO,CAAC;cAAA;gBAAhEA,OAAO;gBAAA,kCACNA,OAAO;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACf;MAAA;QAAA;MAAA;MAAA;IAAA;IAED7C,eAAe;MAAA,2FAAE,kBAAO5B,GAA0C;QAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA,oBAC3DA,GAAG,CAACwE,MAAM,yCAAV,aAAYC,OAAO;kBAAA;kBAAA;gBAAA;gBAAA,MAChBR,mEAA2B,CAAC,SAAS,CAAC;cAAA;gBAExCyB,SAAS,GAAG1F,GAAG,CAACwE,MAAM,CAACC,OAAO;gBAAA;gBAAA,OACbrB,gBAAgB,CAACxB,eAAe,CAAC8D,SAAS,CAAC;cAAA;gBAA5DzE,QAAQ;gBAAA,kCACPA,QAAQ;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAChB;MAAA;QAAA;MAAA;MAAA;IAAA;IAEDY,sBAAsB;MAAA,kGAAE,kBAAO7B,GAA0C;QAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA,oBAClEA,GAAG,CAACwE,MAAM,yCAAV,aAAYC,OAAO;kBAAA;kBAAA;gBAAA;gBAAA,MAChBR,mEAA2B,CAAC,SAAS,CAAC;cAAA;gBAExCyB,SAAS,GAAG1F,GAAG,CAACwE,MAAM,CAACC,OAAO;gBAAA;gBAAA,OACbrB,gBAAgB,CAACgE,eAAe,CAAC1B,SAAS,CAAC;cAAA;gBAA5DzE,QAAQ;gBAAA,kCACP;kBAAE4D,SAAS,EAAE5D;gBAAS,CAAC;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAC/B;MAAA;QAAA;MAAA;MAAA;IAAA;IAEDa,mBAAmB;MAAA,+FAAE,kBAAO9B,GAA4C;QAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA,MAClE,kBAACA,GAAG,CAACwE,MAAM,yCAAV,aAAYC,OAAO,KAAI,kBAACzE,GAAG,CAACwE,MAAM,yCAAV,aAAYC,OAAO,CAACK,MAAM;kBAAA;kBAAA;gBAAA;gBAAA,MAC/Cb,mEAA2B,CAAC,SAAS,CAAC;cAAA;gBAExCoD,YAAY,GAAGrH,GAAG,CAACwE,MAAM,CAACC,OAAO;gBAAA;gBAAA,OAChBrB,gBAAgB,CAACtB,mBAAmB,CAACuF,YAAY,CAAC;cAAA;gBAAnEpG,QAAQ;gBAAA,kCACPA,QAAQ;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAChB;MAAA;QAAA;MAAA;MAAA;IAAA;EACH,CAAC;EACD,OAAOU,gBAAgB;AACzB,CAAC;;;;;;;;;;;;;;ACnEgE;AACV;AACmC;AACI;AACnD;AAGgC;AACM;AAC3B;AAE/C,IAAM6F,qBAAqB;EAAA;EAAA;EAChC,qCAA0F;IAAA,IAA5E5E,MAAM,QAANA,MAAM;MAAEC,KAAK,QAALA,KAAK;IAAA;IAAA,yBACnB;MAAED,MAAM,EAAE;QAAEE,WAAW,EAAE,0EAAKF,MAAM,CAACE,WAAW;UAAEC,cAAc,EAAEN,4CAAuBO;QAAA;MAAG,CAAC;MAAEH,KAAK,EAALA;IAAM,CAAC;EAC9G;EAAC;IAAA;IAAA;MAAA,uFAED,iBAAyBI,CAAsB;QAAA;UAAA;YAAA;cAAA;gBAAA,iCACtCC,OAAO,CAACC,OAAO,EAAE;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACzB;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,yFAED,kBAA2BC,gBAAsC;QAAA;UAAA;YAAA;cAAA;gBAC/D,IAAI,CAACqE,4BAA4B,CAACrE,gBAAgB,CAAC;gBAAC;gBAAA,OAC9C,IAAI,CAACsE,WAAW,CAACtE,gBAAgB,CAAC;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACzC;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,yFAED;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA,IACO,IAAI,CAACQ,QAAQ;kBAAA;kBAAA;gBAAA;gBAAA,MAAQK,iEAAyB,CAAC;kBAAEQ,OAAO,EAAE,0CAA0C;kBAAEyB,IAAI,EAAE;gBAAK,CAAC,CAAC;cAAA;gBAChHnG,OAAO,GAAK,IAAI,CAAC6C,MAAM,CAACE,WAAW,CAAnC/C,OAAO;gBAAA;gBAAA,OAEgB,IAAI,CAAC6D,QAAQ,CAAC5C,OAAO,CAAkB;kBACpEZ,MAAM,EAAE;gBACV,CAAC,CAAC;cAAA;gBAFIuH,gBAAgB;gBAIhBC,mBAAmB,GAAGN,oCAAW,CAACK,gBAAgB,CAACE,QAAQ,EAAE,CAAC,GAAGF,gBAAgB,eAAQG,QAAQ,CAACH,gBAAgB,EAAE,EAAE,CAAC,CAACE,QAAQ,CAAC,EAAE,CAAC,CAAE;gBAAA,MACxI9H,OAAO,KAAK6H,mBAAmB;kBAAA;kBAAA;gBAAA;gBAAA,MAC3BL,iEAA4C,4CAAqCK,mBAAmB,yBAAe7H,OAAO,EAAG;cAAA;gBAErI,IAAI,CAACgE,MAAM,CAAC;kBAAEhE,OAAO,EAAE6H;gBAAoB,CAAC,CAAC;gBAC7C,IAAI,CAAChE,QAAQ,CAACoE,IAAI,CAAC,SAAS,EAAE;kBAAEjI,OAAO,EAAE,IAAI,CAAC8C,KAAK,CAAC9C;gBAAQ,CAAC,CAAC;gBAC9D,IAAI,CAAC6D,QAAQ,CAACoE,IAAI,CAAC,cAAc,EAAE,IAAI,CAACnF,KAAK,CAAC9C,OAAO,CAAC;gBAAC,kCAChD,IAAI,CAAC8C,KAAK,CAAC9C,OAAO;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAC1B;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,uFAED,kBAA0BqD,gBAAsC;QAAA;QAAA;UAAA;YAAA;cAAA;gBACxDzB,gBAAgB,GAAGwF,gBAAgB,CAAC/D,gBAAgB,CAAC;gBACrDG,gBAAgB,GAAG7B,sBAAsB,CAACC,gBAAgB,CAAC;gBAC3D+B,qBAAqB,GAAGuB,qCAAqC,CAAC7B,gBAAgB,CAAC;gBAC/EC,MAAM,GAAG,IAAIb,yCAAU,EAAE;gBAC/Ba,MAAM,CAACG,IAAI,CAACD,gBAAgB,CAAC;gBAC7BF,MAAM,CAACG,IAAI,CAACE,qBAAqB,CAAC;gBAC5BE,QAAQ,GAAGrB,uDAAkB,CAACc,MAAM,CAAC;gBAC3C,IAAI,CAACQ,yBAAyB,CAACD,QAAQ,CAAC;gBAAC;gBAAA,OACnC,IAAI,CAACE,aAAa,EAAE;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAC3B;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,wGAED,kBAA2CV,gBAAsC;QAAA;QAAA;UAAA;YAAA;cAAA;gBAC/EA,gBAAgB,CAAC6E,EAAE,CAAC,iBAAiB;kBAAA,gFAAE,kBAAO9G,QAAkB;oBAAA;sBAAA;wBAAA;0BAAA;4BAC9D,KAAI,CAACyC,QAAQ,CAACoE,IAAI,CAAC,iBAAiB,EAAE7G,QAAQ,CAAC;0BAAC;0BAAA;4BAAA;wBAAA;sBAAA;oBAAA;kBAAA,CACjD;kBAAA;oBAAA;kBAAA;gBAAA,IAAC;gBACFiC,gBAAgB,CAAC6E,EAAE,CAAC,cAAc;kBAAA,gFAAE,kBAAOlI,OAAe;oBAAA;oBAAA;sBAAA;wBAAA;0BAAA;4BAClD6H,mBAAmB,GAAGN,oCAAW,CAACvH,OAAO,CAAC,GAAGA,OAAO,eAAQ+H,QAAQ,CAAC/H,OAAO,EAAE,EAAE,CAAC,CAAC8H,QAAQ,CAAC,EAAE,CAAC,CAAE,EACtG;4BACA,KAAI,CAACK,SAAS,CAAC;8BACbpF,WAAW,EAAE,0EAAK,KAAI,CAACF,MAAM,CAACE,WAAW;gCAAE/C,OAAO,EAAE6H;8BAAmB;4BACzE,CAAC,CAAC;4BAAC;4BAAA,OACG,KAAI,CAACO,aAAa,CAAC/E,gBAAgB,CAAC;0BAAA;0BAAA;4BAAA;wBAAA;sBAAA;oBAAA;kBAAA,CAC3C;kBAAA;oBAAA;kBAAA;gBAAA,IAAC;cAAC;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACJ;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;EAAA;AAAA,EAxDwCV,0CAAY;;ACX3B;AACsB;AACJ;AACM;AACJ;;;ACJhD,MAAM,4BAA4B;;;;;;;;ACAqB;AAEZ;AAC0C;AAC7D;AACmB;AAIpC,SAAeY,mBAAmB;EAAA;AAAA;AAsExC;EAAA,2FAtEM;IAAA;IAAA;MAAA;QAAA;UAAA;YACLgF,OAAO,QAAPA,OAAO,EACP/C,sBAAsB,QAAtBA,sBAAsB;YAKhBgD,gBAAgB,GAAG,SAAnBA,gBAAgB,GAAkB;cACtC,OAAOH,6CAAqB,CAACrC,MAAM,CAACC,IAAI,CAACsC,OAAO,EAAE,KAAK,CAAC,CAAC;YAC3D,CAAC;YAAA,MACG,OAAOA,OAAO,KAAK,QAAQ;cAAA;cAAA;YAAA;YAAA,MAAQf,4DAAuC,CAAC,0BAA0B,CAAC;UAAA;YACpGkB,OAAO,GAAGF,gBAAgB,EAAE;YAC5B5G,gBAAmC,GAAG;cAC1CL,eAAe;gBAAA,2FAAE;kBAAA;oBAAA;sBAAA;wBAAA;0BAAA,iCACR,CAACmH,OAAO,CAACtE,SAAS,CAACuE,QAAQ,EAAE,CAAC;wBAAA;wBAAA;0BAAA;sBAAA;oBAAA;kBAAA;gBAAA,CACtC;gBAAA;kBAAA;gBAAA;gBAAA;cAAA;cACD3H,WAAW;gBAAA,uFAAE;kBAAA;oBAAA;sBAAA;wBAAA;0BAAA,kCAAY,CAAC0H,OAAO,CAACtE,SAAS,CAACuE,QAAQ,EAAE,CAAC;wBAAA;wBAAA;0BAAA;sBAAA;oBAAA;kBAAA;gBAAA;gBAAA;kBAAA;gBAAA;gBAAA;cAAA;cAEvD1G,aAAa;gBAAA,yFAAE;kBAAA;oBAAA;sBAAA;wBAAA;0BAAA,kCAAYsG,OAAO;wBAAA;wBAAA;0BAAA;sBAAA;oBAAA;kBAAA;gBAAA;gBAAA;kBAAA;gBAAA;gBAAA;cAAA;cAClCrG,YAAY;gBAAA,wFAAE;kBAAA;oBAAA;sBAAA;wBAAA;0BAAA,kCAAY+B,8BAAW,CAACyE,OAAO,CAACE,SAAS,CAAC;wBAAA;wBAAA;0BAAA;sBAAA;oBAAA;kBAAA;gBAAA;gBAAA;kBAAA;gBAAA;gBAAA;cAAA;cAExD/G,eAAe;gBAAA,2FAAE,kBAAO5B,GAA0C;kBAAA;kBAAA;kBAAA;oBAAA;sBAAA;wBAAA;0BAAA,mBAC3DA,GAAG,CAACwE,MAAM,wCAAV,YAAYC,OAAO;4BAAA;4BAAA;0BAAA;0BAAA,MAChBR,mEAA2B,CAAC,SAAS,CAAC;wBAAA;0BAExCS,WAAW,GAAG1E,GAAG,CAACwE,MAAM,CAACC,OAAO;0BACtCC,WAAW,CAACkE,WAAW,CAACH,OAAO,CAAC;0BAAC,kCAC1B/D,WAAW;wBAAA;wBAAA;0BAAA;sBAAA;oBAAA;kBAAA;gBAAA,CACnB;gBAAA;kBAAA;gBAAA;gBAAA;cAAA;cAED3C,WAAW;gBAAA,uFAAE,kBAAO/B,GAAyC;kBAAA;kBAAA;kBAAA;oBAAA;sBAAA;wBAAA;0BAAA,oBACtDA,GAAG,CAACwE,MAAM,yCAAV,aAAYC,OAAO;4BAAA;4BAAA;0BAAA;0BAAA,MAChBR,mEAA2B,CAAC,SAAS,CAAC;wBAAA;0BAExC4E,SAAS,GAAGR,oCAAkB,CAACrI,GAAG,CAACwE,MAAM,CAACC,OAAO,EAAEgE,OAAO,CAACE,SAAS,CAAC;0BAAA,kCACpEE,SAAS;wBAAA;wBAAA;0BAAA;sBAAA;oBAAA;kBAAA;gBAAA,CACjB;gBAAA;kBAAA;gBAAA;gBAAA;cAAA;cAEDhH,sBAAsB;gBAAA,kGAAE,kBAAO7B,GAA0C;kBAAA;kBAAA;kBAAA;oBAAA;sBAAA;wBAAA;0BAAA,oBAClEA,GAAG,CAACwE,MAAM,yCAAV,aAAYC,OAAO;4BAAA;4BAAA;0BAAA;0BAAA,MAChBR,mEAA2B,CAAC,SAAS,CAAC;wBAAA;0BAExC8E,oBAAoB,GAAGxD,sBAAsB,EAAE;0BAAA,IAChDwD,oBAAoB;4BAAA;4BAAA;0BAAA;0BAAA,MAAQ9E,iEAAyB,CAAC;4BAAEQ,OAAO,EAAE,6BAA6B;4BAAEyB,IAAI,EAAE;0BAAK,CAAC,CAAC;wBAAA;0BAE5GxB,WAAW,GAAG1E,GAAG,CAACwE,MAAM,CAACC,OAAO;0BACtCC,WAAW,CAACuC,IAAI,CAACwB,OAAO,CAAC;0BAAC;0BAAA,OAERM,oBAAoB,CAAC/H,OAAO,CAAS;4BACrDZ,MAAM,EAAE,iBAAiB;4BACzBoE,MAAM,EAAE,CAACR,8BAAW,CAACU,WAAW,CAAC2B,SAAS,EAAE,CAAC;0BAC/C,CAAC,CAAC;wBAAA;0BAHI2C,GAAG;0BAAA,kCAIF;4BAAEnE,SAAS,EAAEmE;0BAAI,CAAC;wBAAA;wBAAA;0BAAA;sBAAA;oBAAA;kBAAA;gBAAA,CAC1B;gBAAA;kBAAA;gBAAA;gBAAA;cAAA;cAEDlH,mBAAmB;gBAAA,+FAAE,kBAAO9B,GAA4C;kBAAA;kBAAA;kBAAA;oBAAA;sBAAA;wBAAA;0BAAA,MAClE,kBAACA,GAAG,CAACwE,MAAM,yCAAV,aAAYC,OAAO,KAAI,kBAACzE,GAAG,CAACwE,MAAM,yCAAV,aAAYC,OAAO,CAACK,MAAM;4BAAA;4BAAA;0BAAA;0BAAA,MAC/Cb,mEAA2B,CAAC,SAAS,CAAC;wBAAA;0BAGxCgF,IAAI,mBAAGjJ,GAAG,CAACwE,MAAM,iDAAV,aAAYC,OAAO;0BAAA,uCACfwE,IAAI,IAAI,EAAE;0BAAA;4BAA3B,oDAA6B;8BAAlBC,EAAE;8BACLxE,WAAW,GAAGwE,EAAE;8BACtBxE,WAAW,CAACkE,WAAW,CAACH,OAAO,CAAC;4BAClC;0BAAC;4BAAA;0BAAA;4BAAA;0BAAA;0BAAA,kCACMQ,IAAI;wBAAA;wBAAA;0BAAA;sBAAA;oBAAA;kBAAA;gBAAA,CACZ;gBAAA;kBAAA;gBAAA;gBAAA;cAAA;YACH,CAAC;YAAA,kCAEMtH,gBAAgB;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACxB;EAAA;AAAA;;;;;;;;;;;;;;AC/EgE;AACmB;AACY;AACF;AACnD;AAEgB;AAQnB;AACsB;AAQvD,IAAMwH,wBAAwB;EAAA;EAAA;EACnC,wCAAmG;IAAA,IAArFvG,MAAM,QAANA,MAAM;MAAEC,KAAK,QAALA,KAAK;IAAA;IAAA,yBACnB;MAAED,MAAM,EAAE;QAAEE,WAAW,EAAE,gFAAKF,MAAM,CAACE,WAAW;UAAEC,cAAc,EAAEN,4CAAuBO;QAAA;MAAG,CAAC;MAAEH,KAAK,EAALA;IAAM,CAAC;EAC9G;EAAC;IAAA;IAAA;MAAA,kFAWD;QAAA;UAAA;YAAA;cAAA;gBAAA,IACO,IAAI,CAACA,KAAK,CAACuG,UAAU;kBAAA;kBAAA;gBAAA;gBAAA,MAClBnF,iEAAyB,CAAC;kBAAEQ,OAAO,EAAE,2EAA2E;kBAAEyB,IAAI,EAAE;gBAAK,CAAC,CAAC;cAAA;gBAAA;gBAAA,OACjI,IAAI,CAACiC,aAAa,CAAC,IAAI,CAACtF,KAAK,CAACuG,UAAU,CAAC;cAAA;gBAAA,iCACxC,IAAI,CAACL,oBAAoB,CAAC/H,OAAO,CAAoB;kBAAEZ,MAAM,EAAE;gBAAe,CAAC,CAAC;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACxF;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,yFAED,kBAA2BkI,OAAe;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACThF,mBAAmB,CAAC;kBAAEgF,OAAO,EAAPA,OAAO;kBAAE/C,sBAAsB,EAAE,IAAI,CAACA,sBAAsB,CAACqB,IAAI,CAAC,IAAI;gBAAE,CAAC,CAAC;cAAA;gBAAzHjF,gBAAgB;gBAEhB4B,gBAAgB,GAAG7B,sBAAsB,CAACC,gBAAgB,CAAC;gBAE3D0B,MAAM,GAAG,IAAIb,yCAAU,EAAE;gBAAA,uBACD/B,mBAAmB,CAAC,IAAI,CAACmC,MAAM,CAACE,WAAW,CAAsB,EAAvFlC,iBAAiB,wBAAjBA,iBAAiB;gBACzByC,MAAM,CAACG,IAAI,CAAC,IAAI,CAAC6F,wBAAwB,EAAE,CAAC;gBAC5ChG,MAAM,CAACG,IAAI,CAAC,IAAI,CAAC8F,oBAAoB,EAAE,CAAC;gBACxCjG,MAAM,CAACG,IAAI,CAACD,gBAAgB,CAAC;gBAC7BF,MAAM,CAACG,IAAI,CAAC5C,iBAAiB,CAAC;gBAExBgD,QAAQ,GAAGrB,uDAAkB,CAACc,MAAM,CAAC;gBAE3C,IAAI,CAACQ,yBAAyB,CAACD,QAAQ,CAAC;gBAAC;gBAAA,OAEnC,IAAI,CAACE,aAAa,EAAE;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAC3B;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,yFAED,kBAA2BU,MAA8B;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA,IAClD,IAAI,CAACuE,oBAAoB;kBAAA;kBAAA;gBAAA;gBAAA,MAAQ9E,iEAAyB,CAAC;kBAAEQ,OAAO,EAAE,6BAA6B;kBAAEyB,IAAI,EAAE;gBAAK,CAAC,CAAC;cAAA;gBAAA;gBAAA,OAC7F,IAAI,CAAC6C,oBAAoB,CAAC/H,OAAO,CAAkB;kBAAEZ,MAAM,EAAE;gBAAmB,CAAC,CAAC;cAAA;gBAAtGmJ,WAAW;gBAAA,MACbA,WAAW,KAAK/E,MAAM,CAAC4E,UAAU;kBAAA;kBAAA;gBAAA;gBAAA;gBAAA,OAC7B,IAAI,CAACjB,aAAa,CAAC3D,MAAM,CAAC4E,UAAU,CAAC;cAAA;gBAAA,eAC3C,IAAI,CAACL,oBAAoB;gBAAA;gBAAA,OACP,IAAI,CAACA,oBAAoB,CAAC/H,OAAO,CAAoB;kBAAEZ,MAAM,EAAE;gBAAkB,CAAC,CAAC;cAAA;gBAAA;gBAAA;kBAAnGe,QAAQ;gBAAA;gBAAA,aADgB6G,IAAI,oBAAC,iBAAiB;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAInD;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,uFAED,kBAAyBxD,MAA2B;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA,IAC7C,IAAI,CAACuE,oBAAoB;kBAAA;kBAAA;gBAAA;gBAAA,MAAQ9E,iEAAyB,CAAC;kBAAEQ,OAAO,EAAE,6BAA6B;kBAAEyB,IAAI,EAAE;gBAAK,CAAC,CAAC;cAAA;gBACjHpD,WAAW,GAAG,IAAI,CAAC0G,cAAc,CAAChF,MAAM,CAACzE,OAAO,CAAC;gBACvD,IAAI,CAACgE,MAAM,CAAC;kBACVhE,OAAO,EAAE;gBACX,CAAC,CAAC;gBACF,IAAI,CAACmI,SAAS,CAAC;kBAAEpF,WAAW,EAAXA;gBAAY,CAAC,CAAC;gBAAC;gBAAA,OACV,IAAI,CAACiG,oBAAoB,CAAC/H,OAAO,CAAkB;kBAAEZ,MAAM,EAAE;gBAAmB,CAAC,CAAC;cAAA;gBAAlGkI,OAAO;gBAAA;gBAAA,OACP,IAAI,CAACH,aAAa,CAACG,OAAO,CAAC;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAClC;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,yFAED;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA,IACO,IAAI,CAACS,oBAAoB;kBAAA;kBAAA;gBAAA;gBAAA,MAAQ9E,iEAAyB,CAAC;kBAAEQ,OAAO,EAAE,6BAA6B;kBAAEyB,IAAI,EAAE;gBAAK,CAAC,CAAC;cAAA;gBAAA;gBAAA,OAClG,IAAI,CAAC6C,oBAAoB,CAAC/H,OAAO,CAAkB;kBACtEZ,MAAM,EAAE,WAAW;kBACnBoE,MAAM,EAAE;gBACV,CAAC,CAAC;cAAA;gBAHIiF,MAAM;gBAIJ3G,WAAW,GAAK,IAAI,CAACF,MAAM,CAA3BE,WAAW;gBAAA,MACf2G,MAAM,KAAK,IAAI;kBAAA;kBAAA;gBAAA;gBAAA,MACXlC,iEAA4C,8DAAuDzE,WAAW,CAACpC,SAAS,EAAG;cAAA;gBACnI,IAAI,CAACqD,MAAM,CAAC;kBAAEhE,OAAO,EAAE+C,WAAW,CAAC/C;gBAAQ,CAAC,CAAC;gBAC7C,IAAI,IAAI,CAAC8C,KAAK,CAAC9C,OAAO,KAAK+C,WAAW,CAAC/C,OAAO,EAAE;kBAC9C,IAAI,CAAC6D,QAAQ,CAACoE,IAAI,CAAC,cAAc,EAAE,IAAI,CAACnF,KAAK,CAAC9C,OAAO,CAAC;kBACtD,IAAI,CAAC6D,QAAQ,CAACoE,IAAI,CAAC,SAAS,EAAE;oBAAEjI,OAAO,EAAE,IAAI,CAAC8C,KAAK,CAAC9C;kBAAQ,CAAC,CAAC;gBAChE;gBAAC,kCACM,IAAI,CAAC8C,KAAK,CAAC9C,OAAO;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAC1B;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA,OAED,oCAAqE;MAAA;MACnE,IAAM2J,mBAAyC,GAAG;QAChDvH,iBAAiB;UAAA,6FAAE,kBAAOnC,GAAyC;YAAA;YAAA;cAAA;gBAAA;kBAAA;oBAAA,IAC5DA,GAAG,CAACwE,MAAM;sBAAA;sBAAA;oBAAA;oBAAA,MAAQP,mEAA2B,CAAC,wBAAwB,CAAC;kBAAA;oBAAA,cACDjE,GAAG,CAACwE,MAAM,EAA7EzE,OAAO,eAAPA,OAAO,EAAE4J,SAAS,eAATA,SAAS,EAAEC,OAAO,eAAPA,OAAO,EAAEC,iBAAiB,eAAjBA,iBAAiB,EAAEC,cAAc,eAAdA,cAAc;oBAAA,IAEjE/J,OAAO;sBAAA;sBAAA;oBAAA;oBAAA,MAAQkE,mEAA2B,CAAC,gCAAgC,CAAC;kBAAA;oBAAA,MAC7E,CAAC2F,OAAO,IAAIA,OAAO,CAAC9E,MAAM,KAAK,CAAC;sBAAA;sBAAA;oBAAA;oBAAA,MAAQb,mEAA2B,CAAC,gCAAgC,CAAC;kBAAA;oBAAA,IACpG6F,cAAc;sBAAA;sBAAA;oBAAA;oBAAA,MAAQ7F,mEAA2B,CAAC,uCAAuC,CAAC;kBAAA;oBAC/F,KAAI,CAAC8F,QAAQ,CAAC;sBACZhH,cAAc,EAAEN,4CAAuB;sBACvC1C,OAAO,EAAPA,OAAO;sBACPiK,MAAM,EAAE,CAAAF,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEG,MAAM,KAAI,KAAK;sBACvCC,UAAU,EAAE,CAAAJ,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEK,IAAI,KAAI,QAAQ;sBAC5CC,WAAW,EAAET,SAAS;sBACtBjJ,SAAS,EAAEkJ,OAAO,CAAC,CAAC,CAAC;sBACrBS,aAAa,EAAE,CAAAR,iBAAiB,aAAjBA,iBAAiB,uBAAjBA,iBAAiB,CAAG,CAAC,CAAC,KAAI;oBAC3C,CAAC,CAAC;kBAAC;kBAAA;oBAAA;gBAAA;cAAA;YAAA;UAAA,CACJ;UAAA;YAAA;UAAA;UAAA;QAAA;QACDzH,iBAAiB;UAAA,6FAAE,kBAAOpC,GAAqC;YAAA;cAAA;gBAAA;kBAAA;oBAAA,IACxDA,GAAG,CAACwE,MAAM;sBAAA;sBAAA;oBAAA;oBAAA,MAAQP,mEAA2B,CAAC,wBAAwB,CAAC;kBAAA;oBAAA,IACvEjE,GAAG,CAACwE,MAAM,CAACzE,OAAO;sBAAA;sBAAA;oBAAA;oBAAA,MAAQkE,mEAA2B,CAAC,iBAAiB,CAAC;kBAAA;oBAAA;oBAAA,OACvE,KAAI,CAACqG,WAAW,CAACtK,GAAG,CAACwE,MAAM,CAAC;kBAAA;kBAAA;oBAAA;gBAAA;cAAA;YAAA;UAAA,CACnC;UAAA;YAAA;UAAA;UAAA;QAAA;MACH,CAAC;MACD,IAAM+F,qBAAqB,GAAGrI,2BAA2B,CAACwH,mBAAmB,CAAC;MAC9E,OAAOa,qBAAqB;IAC9B;EAAC;IAAA;IAAA,OAED,gCAAiE;MAAA;MAC/D,IAAMC,eAAiC,GAAG;QACxClI,gBAAgB;UAAA,4FAAE,kBAAOtC,GAAwC;YAAA;YAAA;cAAA;gBAAA;kBAAA;oBAAA,IAC1DA,GAAG,CAACwE,MAAM;sBAAA;sBAAA;oBAAA;oBAAA,MAAQP,mEAA2B,CAAC,wBAAwB,CAAC;kBAAA;oBAAA,IACvEjE,GAAG,CAACwE,MAAM,CAAC4E,UAAU;sBAAA;sBAAA;oBAAA;oBAAA,MAAQnF,mEAA2B,CAAC,oBAAoB,CAAC;kBAAA;oBAC3EmF,UAAU,GAAKpJ,GAAG,CAACwE,MAAM,CAAzB4E,UAAU;oBAAA;oBAAA,OACZ,MAAI,CAACqB,aAAa,CAAC;sBAAErB,UAAU,EAAVA;oBAAW,CAAC,CAAC;kBAAA;kBAAA;oBAAA;gBAAA;cAAA;YAAA;UAAA,CACzC;UAAA;YAAA;UAAA;UAAA;QAAA;MACH,CAAC;MACD,OAAO/G,uBAAuB,CAACmI,eAAe,CAAC;IACjD;EAAC;EAAA;AAAA,EAtH2C9H,0CAAY;AAuHzD,yBAvHYyG,wBAAwB;EAAA,gFAKC,kBAAO3E,MAG1C;IAAA;IAAA;MAAA;QAAA;UAAA;YACOkG,eAAe,GAAG,IAAIvB,wBAAwB,CAAC;cAAEvG,MAAM,EAAE;gBAAEE,WAAW,EAAE0B,MAAM,CAAC1B;cAAY;YAAE,CAAC,CAAC;YAAA;YAAA,OAC/F4H,eAAe,CAACvC,aAAa,CAAC3D,MAAM,CAAC8D,OAAO,CAAC;UAAA;YAAA,kCAC5CoC,eAAe;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACvB;EAAA;IAAA;EAAA;AAAA;;;;AEnCiC;;;;;;;;ACK7B,IAAMC,YAAY;EAGvB,sBAAY/G,QAAkC,EAAE;IAAA;IAAA;IAC9C,IAAI,CAACA,QAAQ,GAAGA,QAAQ;EAC1B;EAAC;IAAA;IAAA;MAAA,2FAED;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACyB,IAAI,CAACA,QAAQ,CAAC5C,OAAO,CAAW;kBACrDZ,MAAM,EAAE,iBAAiB;kBACzBoE,MAAM,EAAE,CAAC;gBACX,CAAC,CAAC;cAAA;gBAHIrD,QAAQ;gBAAA,iCAIPA,QAAQ;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAChB;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,kGAED,kBAAoCuD,WAAwB;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OAC9B,IAAI,CAACd,QAAQ,CAAC5C,OAAO,CAAwB;kBACvEZ,MAAM,EAAE,wBAAwB;kBAChCoE,MAAM,EAAE;oBACNC,OAAO,EAAEC;kBACX;gBACF,CAAC,CAAC;cAAA;gBAAA;gBALMG,SAAS,yBAATA,SAAS;gBAAA,kCAMV;kBAAEA,SAAS,EAATA;gBAAU,CAAC;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACrB;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,2FAED,kBAA6BH,WAAwB;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OAClB,IAAI,CAACd,QAAQ,CAAC5C,OAAO,CAAC;kBACrDZ,MAAM,EAAE,iBAAiB;kBACzBoE,MAAM,EAAE;oBACNC,OAAO,EAAEC;kBACX;gBACF,CAAC,CAAC;cAAA;gBALIkG,iBAAiB;gBAAA,kCAMhBA,iBAAiB;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACzB;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,+FAED,kBAAiCvD,YAA2B;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACxB,IAAI,CAACzD,QAAQ,CAAC5C,OAAO,CAAC;kBACtDZ,MAAM,EAAE,qBAAqB;kBAC7BoE,MAAM,EAAE;oBACNC,OAAO,EAAE4C;kBACX;gBACF,CAAC,CAAC;cAAA;gBALIwD,kBAAkB;gBAAA,kCAMjBA,kBAAkB;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAC1B;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,uFAED,kBAAyBpF,IAAgB;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OAChB,IAAI,CAAC7B,QAAQ,CAAC5C,OAAO,CAAa;kBACvDZ,MAAM,EAAE,aAAa;kBACrBoE,MAAM,EAAE;oBACNC,OAAO,EAAEgB;kBACX;gBACF,CAAC,CAAC;cAAA;gBALIxE,QAAQ;gBAAA,kCAMPA,QAAQ;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAChB;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,mFAED,kBAAwB6J,IAAsB;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACvB,IAAI,CAAClH,QAAQ,CAAC5C,OAAO,CAAI8J,IAAI,CAAC;cAAA;gBAA7CzK,MAAM;gBAAA,kCACLA,MAAM;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACd;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;EAAA;AAAA;;AC/DyB;AACA","sources":["webpack://@web3auth/solana-provider/webpack/bootstrap","webpack://@web3auth/solana-provider/webpack/runtime/compat get default export","webpack://@web3auth/solana-provider/webpack/runtime/define property getters","webpack://@web3auth/solana-provider/webpack/runtime/hasOwnProperty shorthand","webpack://@web3auth/solana-provider/webpack/runtime/make namespace object","webpack://@web3auth/solana-provider/external commonjs2 \"@babel/runtime/helpers/classCallCheck\"","webpack://@web3auth/solana-provider/external commonjs2 \"@babel/runtime/helpers/createClass\"","webpack://@web3auth/solana-provider/external commonjs2 \"@babel/runtime/helpers/inherits\"","webpack://@web3auth/solana-provider/external commonjs2 \"@babel/runtime/helpers/possibleConstructorReturn\"","webpack://@web3auth/solana-provider/external commonjs2 \"@babel/runtime/helpers/getPrototypeOf\"","webpack://@web3auth/solana-provider/external commonjs2 \"@babel/runtime/helpers/asyncToGenerator\"","webpack://@web3auth/solana-provider/external commonjs2 \"@babel/runtime/helpers/defineProperty\"","webpack://@web3auth/solana-provider/external commonjs2 \"@babel/runtime/regenerator\"","webpack://@web3auth/solana-provider/external commonjs2 \"@toruslabs/base-controllers\"","webpack://@web3auth/solana-provider/external commonjs2 \"@toruslabs/openlogin-jrpc\"","webpack://@web3auth/solana-provider/external commonjs2 \"@web3auth/base\"","webpack://@web3auth/solana-provider/external commonjs2 \"@web3auth/base-provider\"","webpack://@web3auth/solana-provider/./src/rpc/JrpcClient.ts","webpack://@web3auth/solana-provider/./src/rpc/solanaRpcMiddlewares.ts","webpack://@web3auth/solana-provider/./src/providers/injectedProviders/base/baseInjectedProvider.ts","webpack://@web3auth/solana-provider/external commonjs2 \"bs58\"","webpack://@web3auth/solana-provider/external commonjs2 \"eth-rpc-errors\"","webpack://@web3auth/solana-provider/./src/providers/injectedProviders/base/providerHandlers.ts","webpack://@web3auth/solana-provider/./src/providers/injectedProviders/injectedProviderProxy.ts","webpack://@web3auth/solana-provider/./src/providers/injectedProviders/phantom/phantomInjectedProvider.ts","webpack://@web3auth/solana-provider/external commonjs2 \"@solana/web3.js\"","webpack://@web3auth/solana-provider/./src/providers/injectedProviders/slope/providerHandlers.ts","webpack://@web3auth/solana-provider/./src/providers/injectedProviders/slope/slopeInjectedProvider.ts","webpack://@web3auth/solana-provider/./src/providers/injectedProviders/solflare/providerHandlers.ts","webpack://@web3auth/solana-provider/./src/providers/injectedProviders/solflare/solflareInjectedProvider.ts","webpack://@web3auth/solana-provider/./src/providers/injectedProviders/sollet/providerHandlers.ts","webpack://@web3auth/solana-provider/./src/providers/injectedProviders/sollet/solletInjectedProvider.ts","webpack://@web3auth/solana-provider/./src/providers/injectedProviders/torus/providerHandlers.ts","webpack://@web3auth/solana-provider/./src/providers/injectedProviders/torus/torusInjectedProvider.ts","webpack://@web3auth/solana-provider/./src/providers/injectedProviders/index.ts","webpack://@web3auth/solana-provider/external commonjs2 \"@toruslabs/tweetnacl-js\"","webpack://@web3auth/solana-provider/./src/providers/privateKeyProvider/solanaPrivateKeyUtils.ts","webpack://@web3auth/solana-provider/./src/providers/privateKeyProvider/solanaPrivateKeyProvider.ts","webpack://@web3auth/solana-provider/./src/providers/privateKeyProvider/index.ts","webpack://@web3auth/solana-provider/./src/providers/index.ts","webpack://@web3auth/solana-provider/./src/solanaWallet.ts","webpack://@web3auth/solana-provider/./src/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/classCallCheck\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/createClass\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/inherits\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/possibleConstructorReturn\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/getPrototypeOf\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/asyncToGenerator\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/regenerator\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/base-controllers\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/openlogin-jrpc\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@web3auth/base\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@web3auth/base-provider\");","import { createFetchMiddleware } from \"@toruslabs/base-controllers\";\nimport { JRPCEngineEndCallback, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig } from \"@web3auth/base\";\n\nexport function createChainIdMiddleware(chainId: string): JRPCMiddleware<unknown, unknown> {\n  return (req: JRPCRequest<unknown>, res: JRPCResponse<string>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => {\n    if (req.method === \"solana_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createProviderConfigMiddleware(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): JRPCMiddleware<unknown, unknown> {\n  return (\n    req: JRPCRequest<unknown>,\n    res: JRPCResponse<Omit<CustomChainConfig, \"chainNamespace\">>,\n    next: JRPCEngineNextCallback,\n    end: JRPCEngineEndCallback\n  ) => {\n    if (req.method === \"solana_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createConfigMiddleware(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): JRPCMiddleware<unknown, unknown> {\n  const { chainId } = providerConfig;\n\n  return mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig)]);\n}\n\nexport function createJsonRpcClient(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): {\n  networkMiddleware: JRPCMiddleware<unknown, unknown>;\n  fetchMiddleware: JRPCMiddleware<unknown, unknown>;\n} {\n  const { rpcTarget } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({ rpcTarget });\n  const networkMiddleware = mergeMiddleware([createConfigMiddleware(providerConfig), fetchMiddleware]);\n  return { networkMiddleware, fetchMiddleware };\n}\n","import type { Transaction } from \"@solana/web3.js\";\nimport { createAsyncMiddleware, JRPCMiddleware, JRPCRequest, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\n\nexport interface IProviderHandlers {\n  requestAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;\n  getAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;\n  getPrivateKey: (req: JRPCRequest<unknown>) => Promise<string>;\n  signTransaction: (req: JRPCRequest<{ message: Transaction }>) => Promise<Transaction>;\n  signAllTransactions: (req: JRPCRequest<{ message: Transaction[] }>) => Promise<Transaction[]>;\n  signAndSendTransaction: (req: JRPCRequest<{ message: Transaction }>) => Promise<{ signature: string }>;\n  getSecretKey: (req: JRPCRequest<unknown>) => Promise<string>;\n  signMessage: (req: JRPCRequest<{ message: Uint8Array; display?: string }>) => Promise<Uint8Array>;\n}\n\nexport function createGetAccountsMiddleware({ getAccounts }: { getAccounts: IProviderHandlers[\"getAccounts\"] }): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== \"getAccounts\") return next();\n\n    if (!getAccounts) throw new Error(\"WalletMiddleware - opts.getAccounts not provided\");\n    // This calls from the prefs controller\n    const accounts = await getAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nexport function createRequestAccountsMiddleware({\n  requestAccounts,\n}: {\n  requestAccounts: IProviderHandlers[\"requestAccounts\"];\n}): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== \"requestAccounts\") return next();\n\n    if (!requestAccounts) throw new Error(\"WalletMiddleware - opts.requestAccounts not provided\");\n    // This calls the UI login function\n    const accounts = await requestAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nexport function createGenericJRPCMiddleware<T, U>(\n  targetMethod: string,\n  handler: (req: JRPCRequest<T>) => Promise<U>\n): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware<T, unknown>(async (request, response, next) => {\n    const { method } = request;\n    if (method !== targetMethod) return next();\n\n    if (!handler) throw new Error(`WalletMiddleware - ${targetMethod} not provided`);\n\n    const result = await handler(request);\n\n    response.result = result;\n    return undefined;\n  });\n}\n\nexport function createSolanaMiddleware(providerHandlers: IProviderHandlers): JRPCMiddleware<unknown, unknown> {\n  const { getAccounts, requestAccounts, signTransaction, signAndSendTransaction, signAllTransactions, signMessage, getPrivateKey, getSecretKey } =\n    providerHandlers;\n\n  return mergeMiddleware([\n    createRequestAccountsMiddleware({ requestAccounts }),\n    createGetAccountsMiddleware({ getAccounts }),\n    createGenericJRPCMiddleware<{ message: Transaction }, Transaction>(\"signTransaction\", signTransaction),\n    createGenericJRPCMiddleware<{ message: Transaction }, { signature: string }>(\"signAndSendTransaction\", signAndSendTransaction),\n    createGenericJRPCMiddleware<{ message: Transaction[] }, Transaction[]>(\"signAllTransactions\", signAllTransactions),\n    createGenericJRPCMiddleware<{ message: Uint8Array }, Uint8Array>(\"signMessage\", signMessage),\n    createGenericJRPCMiddleware<void, string>(\"solanaPrivateKey\", getPrivateKey),\n    createGenericJRPCMiddleware<void, string>(\"solanaSecretKey\", getSecretKey),\n  ]);\n}\nexport interface AddSolanaChainParameter {\n  chainId: string; // A 0x-prefixed hexadecimal string\n  chainName: string;\n  nativeCurrency: {\n    name: string;\n    symbol: string; // 2-6 characters long\n    decimals: 18;\n  };\n  rpcUrls: string[];\n  blockExplorerUrls?: string[];\n}\n\nexport interface IChainSwitchHandlers {\n  addNewChainConfig: (req: JRPCRequest<AddSolanaChainParameter>) => Promise<void>;\n  switchSolanaChain: (req: JRPCRequest<{ chainId: string }>) => Promise<void>;\n}\nexport function createChainSwitchMiddleware({ addNewChainConfig, switchSolanaChain }: IChainSwitchHandlers): JRPCMiddleware<unknown, unknown> {\n  return mergeMiddleware([\n    createGenericJRPCMiddleware<AddSolanaChainParameter, void>(\"addSolanaChain\", addNewChainConfig),\n    createGenericJRPCMiddleware<{ chainId: string }, void>(\"switchSolanaChain\", switchSolanaChain),\n  ]);\n}\n\nexport interface IAccountHandlers {\n  updatePrivatekey: (req: JRPCRequest<{ privateKey: string }>) => Promise<void>;\n}\nexport function createAccountMiddleware({ updatePrivatekey }: IAccountHandlers): JRPCMiddleware<unknown, unknown> {\n  return mergeMiddleware([createGenericJRPCMiddleware<{ privateKey: string }, void>(\"updateAccount\", updatePrivatekey)]);\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine, JRPCMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\n\nimport { createConfigMiddleware } from \"../../../rpc/JrpcClient\";\nimport { createSolanaMiddleware, IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport abstract class BaseInjectedProvider<P> extends BaseProvider<BaseProviderConfig, BaseProviderState, P> {\n  constructor({ config, state }: { config: BaseProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public async switchChain(_: { chainId: string }): Promise<void> {\n    return Promise.resolve();\n  }\n\n  public async setupProvider(injectedProvider: P): Promise<void> {\n    const engine = new JRPCEngine();\n\n    const providerHandlers = this.getProviderHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    engine.push(solanaMiddleware);\n\n    const configMiddleware = createConfigMiddleware(this.config.chainConfig as CustomChainConfig);\n    engine.push(configMiddleware);\n\n    const injectedProviderProxy = this.getInjectedProviderProxy(injectedProvider);\n    if (injectedProviderProxy) {\n      engine.push(injectedProviderProxy);\n    }\n\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    const { chainConfig } = this.config;\n    this.update({\n      chainId: chainConfig.chainId,\n    });\n    return chainConfig.chainId || \"\";\n  }\n\n  protected getInjectedProviderProxy(_: P): JRPCMiddleware<unknown, unknown> {\n    return undefined;\n  }\n\n  protected abstract getProviderHandlers(injectedProvider: P): IProviderHandlers;\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"bs58\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"eth-rpc-errors\");","import { Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IBaseWalletProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getBaseProviderHandlers = (injectedProvider: IBaseWalletProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      return injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : [];\n    },\n    getAccounts: async () => (injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : []),\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<Transaction> => {\n      const transaction = await injectedProvider.signTransaction(req.params.message);\n      return transaction;\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array; display?: \"utf8\" | \"hex\" }>): Promise<Uint8Array> => {\n      const sigData = await injectedProvider.signMessage(req.params.message, req.params.display);\n      return sigData.signature;\n    },\n    signAllTransactions: async (req: JRPCRequest<{ message: Transaction[] }>): Promise<Transaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transaction = await injectedProvider.signAllTransactions(req.params.message);\n      return transaction;\n    },\n    signAndSendTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n      const txRes = await injectedProvider.signAndSendTransaction(req.params.message);\n      return { signature: txRes.signature };\n    },\n  };\n  return providerHandlers;\n};\n","import { createAsyncMiddleware, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse } from \"@toruslabs/openlogin-jrpc\";\n\nimport { InjectedProvider } from \"./interface\";\n\nexport function createInjectedProviderProxyMiddleware(provider: InjectedProvider): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (req: JRPCRequest<unknown[]>, res: JRPCResponse<unknown>, _next: JRPCEngineNextCallback) => {\n    const result = await provider.request({\n      ...req,\n    });\n    res.result = result;\n  });\n}\n","import { JRPCMiddleware } from \"@toruslabs/openlogin-jrpc\";\n\nimport { IPhantomWalletProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getBaseProviderHandlers } from \"../base/providerHandlers\";\nimport { createInjectedProviderProxyMiddleware } from \"../injectedProviderProxy\";\n\nexport class PhantomInjectedProvider extends BaseInjectedProvider<IPhantomWalletProvider> {\n  protected getProviderHandlers(injectedProvider: IPhantomWalletProvider): IProviderHandlers {\n    return getBaseProviderHandlers(injectedProvider);\n  }\n\n  protected getInjectedProviderProxy(injectedProvider: IPhantomWalletProvider): JRPCMiddleware<unknown, unknown> {\n    return createInjectedProviderProxyMiddleware(injectedProvider);\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@solana/web3.js\");","import { Connection, PublicKey, Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ISlopeProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getSlopeHandlers = (injectedProvider: ISlopeProvider, getProviderEngineProxy: () => SafeEventEmitterProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      const { data } = await injectedProvider.connect();\n      return [data.publicKey];\n    },\n    getAccounts: async () => {\n      const { data } = await injectedProvider.connect();\n      return [data.publicKey];\n    },\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<Transaction> => {\n      const txMessage = req.params.message;\n      if (!txMessage) throw ethErrors.rpc.invalidRequest({ message: \"Invalid transaction message\" });\n      const { data } = await injectedProvider.signTransaction(bs58.encode(txMessage.serializeMessage()));\n      if (!data.publicKey || !data.signature) throw new Error(\"Invalid signature from slope wallet\");\n      const publicKey = new PublicKey(data.publicKey);\n      const signature = bs58.decode(data.signature);\n      txMessage.addSignature(publicKey, Buffer.from(signature));\n      return txMessage;\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      const response = await injectedProvider.signMessage(req.params.message);\n      return bs58.decode(response.data.signature);\n    },\n    signAndSendTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n      const provider = getProviderEngineProxy();\n      if (!provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n      const txMessage = req.params.message;\n      if (!txMessage) throw ethErrors.rpc.invalidRequest({ message: \"Invalid transaction message\" });\n      const { data } = await injectedProvider.signTransaction(bs58.encode(txMessage.serializeMessage()));\n      if (!data.publicKey || !data.signature) throw new Error(\"Invalid signature from slope wallet\");\n      const publicKey = new PublicKey(data.publicKey);\n      const signature = bs58.decode(data.signature);\n      txMessage.addSignature(publicKey, Buffer.from(signature));\n      const chainConfig = (await provider.request<CustomChainConfig>({ method: \"solana_provider_config\", params: [] })) as CustomChainConfig;\n      const conn = new Connection(chainConfig.rpcTarget);\n      const res = await conn.sendRawTransaction(txMessage.serialize());\n      return { signature: res };\n    },\n    signAllTransactions: async (req: JRPCRequest<{ message: Transaction[] }>): Promise<Transaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const allTxns = req.params.message;\n      const { length } = allTxns;\n\n      const unsignedTx = [];\n\n      for (let i = 0; i < length; i++) {\n        unsignedTx.push(bs58.encode(req.params.message[i].serializeMessage()));\n      }\n      const { msg, data } = await injectedProvider.signAllTransactions(unsignedTx);\n\n      if (!data.publicKey || data.signatures?.length !== length) throw new Error(msg);\n\n      const publicKey = new PublicKey(data.publicKey);\n\n      for (let i = 0; i < length; i++) {\n        const signature = bs58.decode(data.signatures[i]);\n        allTxns[i].addSignature(publicKey, Buffer.from(signature));\n      }\n\n      return allTxns;\n    },\n  };\n  return providerHandlers;\n};\n","import { ISlopeProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getSlopeHandlers } from \"./providerHandlers\";\n\nexport class SlopeInjectedProxyProvider extends BaseInjectedProvider<ISlopeProvider> {\n  protected getProviderHandlers(injectedProvider: ISlopeProvider): IProviderHandlers {\n    return getSlopeHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n}\n","import { Connection, Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IBaseWalletProvider, SolflareWallet } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { getBaseProviderHandlers } from \"../base/providerHandlers\";\n\nexport const getSolflareHandlers = (injectedProvider: SolflareWallet, getProviderEngineProxy: () => SafeEventEmitterProvider): IProviderHandlers => {\n  const solflareProviderHandlers = getBaseProviderHandlers(injectedProvider as IBaseWalletProvider);\n  solflareProviderHandlers.signAndSendTransaction = async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n    const provider = getProviderEngineProxy();\n    if (!provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const transaction = await injectedProvider.signTransaction(req.params.message);\n    const chainConfig = (await provider.request<CustomChainConfig>({ method: \"solana_provider_config\", params: [] })) as CustomChainConfig;\n    const conn = new Connection(chainConfig.rpcTarget);\n    const res = await conn.sendRawTransaction(transaction.serialize());\n    return { signature: res };\n  };\n  return solflareProviderHandlers;\n};\n","import { SolflareWallet } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getSolflareHandlers } from \"./providerHandlers\";\n\nexport class SolflareInjectedProvider extends BaseInjectedProvider<SolflareWallet> {\n  protected getProviderHandlers(injectedProvider: SolflareWallet): IProviderHandlers {\n    return getSolflareHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n}\n","import type SolletWallet from \"@project-serum/sol-wallet-adapter\";\nimport { Connection, Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IBaseWalletProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { getBaseProviderHandlers } from \"../base/providerHandlers\";\n\nexport const getSolletHandlers = (injectedProvider: SolletWallet, getProviderEngineProxy: () => SafeEventEmitterProvider): IProviderHandlers => {\n  const providerHandlers = getBaseProviderHandlers(injectedProvider as IBaseWalletProvider);\n  providerHandlers.signMessage = async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n    const { signature } = await injectedProvider.sign(req.params.message, \"utf8\");\n    return signature;\n  };\n  providerHandlers.signAndSendTransaction = async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n    const provider = getProviderEngineProxy();\n    if (!provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const transaction = await injectedProvider.signTransaction(req.params.message);\n    const chainConfig = (await provider.request<CustomChainConfig>({ method: \"solana_provider_config\", params: [] })) as CustomChainConfig;\n    const conn = new Connection(chainConfig.rpcTarget);\n    const res = await conn.sendRawTransaction(transaction.serialize());\n    return { signature: res };\n  };\n  return providerHandlers;\n};\n","import type SolletWallet from \"@project-serum/sol-wallet-adapter\";\n\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getSolletHandlers } from \"./providerHandlers\";\n\nexport class SolletInjectedProvider extends BaseInjectedProvider<SolletWallet> {\n  protected getProviderHandlers(injectedProvider: SolletWallet): IProviderHandlers {\n    return getSolletHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n}\n","import { Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ITorusWalletProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getTorusHandlers = (injectedProvider: ITorusWalletProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      const accounts = await injectedProvider.request<string[]>({\n        method: \"solana_requestAccounts\",\n        params: {},\n      });\n      return accounts;\n    },\n\n    getAccounts: async () => {\n      const accounts = await injectedProvider.request<string[]>({\n        method: \"solana_requestAccounts\",\n        params: {},\n      });\n      return accounts;\n    },\n\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const message = await injectedProvider.signMessage(req.params.message);\n      return message;\n    },\n\n    signTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<Transaction> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const txMessage = req.params.message;\n      const response = await injectedProvider.signTransaction(txMessage);\n      return response;\n    },\n\n    signAndSendTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const txMessage = req.params.message;\n      const response = await injectedProvider.sendTransaction(txMessage);\n      return { signature: response };\n    },\n\n    signAllTransactions: async (req: JRPCRequest<{ message: Transaction[] }>): Promise<Transaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transactions = req.params.message;\n      const response = await injectedProvider.signAllTransactions(transactions);\n      return response;\n    },\n  };\n  return providerHandlers;\n};\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, isHexStrict, WalletInitializationError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ITorusWalletProvider } from \"../../../interface\";\nimport { createSolanaMiddleware } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { createInjectedProviderProxyMiddleware } from \"../injectedProviderProxy\";\nimport { getTorusHandlers } from \"./providerHandlers\";\n\nexport class TorusInjectedProvider extends BaseProvider<BaseProviderConfig, BaseProviderState, ITorusWalletProvider> {\n  constructor({ config, state }: { config: BaseProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public async switchChain(_: { chainId: string }): Promise<void> {\n    return Promise.resolve();\n  }\n\n  public async setupProvider(injectedProvider: ITorusWalletProvider): Promise<void> {\n    this.handleInjectedProviderUpdate(injectedProvider);\n    await this.setupEngine(injectedProvider);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this.provider) throw ethErrors.provider.custom({ message: \"Torus solana provider is not initialized\", code: 4902 });\n    const { chainId } = this.config.chainConfig;\n\n    const connectedChainId = await this.provider.request<unknown, string>({\n      method: \"solana_chainId\",\n    });\n\n    const connectedHexChainId = isHexStrict(connectedChainId.toString()) ? connectedChainId : `0x${parseInt(connectedChainId, 10).toString(16)}`;\n    if (chainId !== connectedHexChainId)\n      throw WalletInitializationError.rpcConnectionError(`Invalid network, net_version is: ${connectedHexChainId}, expected: ${chainId}`);\n\n    this.update({ chainId: connectedHexChainId });\n    this.provider.emit(\"connect\", { chainId: this.state.chainId });\n    this.provider.emit(\"chainChanged\", this.state.chainId);\n    return this.state.chainId;\n  }\n\n  private async setupEngine(injectedProvider: ITorusWalletProvider): Promise<void> {\n    const providerHandlers = getTorusHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    const injectedProviderProxy = createInjectedProviderProxyMiddleware(injectedProvider);\n    const engine = new JRPCEngine();\n    engine.push(solanaMiddleware);\n    engine.push(injectedProviderProxy);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  private async handleInjectedProviderUpdate(injectedProvider: ITorusWalletProvider): Promise<void> {\n    injectedProvider.on(\"accountsChanged\", async (accounts: string[]) => {\n      this.provider.emit(\"accountsChanged\", accounts);\n    });\n    injectedProvider.on(\"chainChanged\", async (chainId: string) => {\n      const connectedHexChainId = isHexStrict(chainId) ? chainId : `0x${parseInt(chainId, 10).toString(16)}`;\n      // Check if chainId changed and trigger event\n      this.configure({\n        chainConfig: { ...this.config.chainConfig, chainId: connectedHexChainId },\n      });\n      await this.setupProvider(injectedProvider);\n    });\n  }\n}\n","export * from \"./interface\";\nexport * from \"./phantom/phantomInjectedProvider\";\nexport * from \"./slope/slopeInjectedProvider\";\nexport * from \"./solflare/solflareInjectedProvider\";\nexport * from \"./sollet/solletInjectedProvider\";\nexport * from \"./torus/torusInjectedProvider\";\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/tweetnacl-js\");","import { Keypair, Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport nacl from \"@toruslabs/tweetnacl-js\";\nimport { SafeEventEmitterProvider, WalletInitializationError } from \"@web3auth/base\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IProviderHandlers } from \"../../rpc/solanaRpcMiddlewares\";\n\nexport async function getProviderHandlers({\n  privKey,\n  getProviderEngineProxy,\n}: {\n  privKey: string;\n  getProviderEngineProxy: () => SafeEventEmitterProvider | null;\n}): Promise<IProviderHandlers> {\n  const keyPairGenerator = (): Keypair => {\n    return Keypair.fromSecretKey(Buffer.from(privKey, \"hex\"));\n  };\n  if (typeof privKey !== \"string\") throw WalletInitializationError.invalidParams(\"privKey must be a string\");\n  const keyPair = keyPairGenerator();\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      return [keyPair.publicKey.toBase58()];\n    },\n    getAccounts: async () => [keyPair.publicKey.toBase58()],\n\n    getPrivateKey: async () => privKey,\n    getSecretKey: async () => bs58.encode(keyPair.secretKey),\n\n    signTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<Transaction> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transaction = req.params.message;\n      transaction.partialSign(keyPair);\n      return transaction;\n    },\n\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const signedMsg = nacl.sign.detached(req.params.message, keyPair.secretKey);\n      return signedMsg;\n    },\n\n    signAndSendTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const _providerEngineProxy = getProviderEngineProxy();\n      if (!_providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n\n      const transaction = req.params.message;\n      transaction.sign(keyPair);\n\n      const sig = await _providerEngineProxy.request<string>({\n        method: \"sendTransaction\",\n        params: [bs58.encode(transaction.serialize())],\n      });\n      return { signature: sig };\n    },\n\n    signAllTransactions: async (req: JRPCRequest<{ message: Transaction[] }>): Promise<Transaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const txns = req.params?.message;\n      for (const tx of txns || []) {\n        const transaction = tx;\n        transaction.partialSign(keyPair);\n      }\n      return txns;\n    },\n  };\n\n  return providerHandlers;\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine, JRPCMiddleware, JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig, WalletInitializationError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { createJsonRpcClient } from \"../../rpc/JrpcClient\";\nimport {\n  AddSolanaChainParameter,\n  createAccountMiddleware,\n  createChainSwitchMiddleware,\n  createSolanaMiddleware,\n  IAccountHandlers,\n  IChainSwitchHandlers,\n} from \"../../rpc/solanaRpcMiddlewares\";\nimport { getProviderHandlers } from \"./solanaPrivateKeyUtils\";\n\nexport interface SolanaPrivKeyProviderConfig extends BaseProviderConfig {\n  chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n}\nexport interface SolanaPrivKeyProviderState extends BaseProviderState {\n  privateKey?: string;\n}\nexport class SolanaPrivateKeyProvider extends BaseProvider<BaseProviderConfig, SolanaPrivKeyProviderState, string> {\n  constructor({ config, state }: { config: SolanaPrivKeyProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public static getProviderInstance = async (params: {\n    privKey: string;\n    chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n  }): Promise<SolanaPrivateKeyProvider> => {\n    const providerFactory = new SolanaPrivateKeyProvider({ config: { chainConfig: params.chainConfig } });\n    await providerFactory.setupProvider(params.privKey);\n    return providerFactory;\n  };\n\n  public async enable(): Promise<string[]> {\n    if (!this.state.privateKey)\n      throw ethErrors.provider.custom({ message: \"Private key is not found in state, plz pass it in constructor state param\", code: 4902 });\n    await this.setupProvider(this.state.privateKey);\n    return this._providerEngineProxy.request<unknown, string[]>({ method: \"eth_accounts\" });\n  }\n\n  public async setupProvider(privKey: string): Promise<void> {\n    const providerHandlers = await getProviderHandlers({ privKey, getProviderEngineProxy: this.getProviderEngineProxy.bind(this) });\n\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n\n    const engine = new JRPCEngine();\n    const { networkMiddleware } = createJsonRpcClient(this.config.chainConfig as CustomChainConfig);\n    engine.push(this.getChainSwitchMiddleware());\n    engine.push(this.getAccountMiddleware());\n    engine.push(solanaMiddleware);\n    engine.push(networkMiddleware);\n\n    const provider = providerFromEngine(engine);\n\n    this.updateProviderEngineProxy(provider);\n\n    await this.lookupNetwork();\n  }\n\n  public async updateAccount(params: { privateKey: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const existingKey = await this._providerEngineProxy.request<unknown, string>({ method: \"solanaPrivateKey\" });\n    if (existingKey !== params.privateKey) {\n      await this.setupProvider(params.privateKey);\n      this._providerEngineProxy.emit(\"accountsChanged\", {\n        accounts: await this._providerEngineProxy.request<unknown, string[]>({ method: \"requestAccounts\" }),\n      });\n    }\n  }\n\n  public async switchChain(params: { chainId: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const chainConfig = this.getChainConfig(params.chainId);\n    this.update({\n      chainId: \"loading\",\n    });\n    this.configure({ chainConfig });\n    const privKey = await this._providerEngineProxy.request<unknown, string>({ method: \"solanaPrivateKey\" });\n    await this.setupProvider(privKey);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const health = await this._providerEngineProxy.request<unknown, string>({\n      method: \"getHealth\",\n      params: [],\n    });\n    const { chainConfig } = this.config;\n    if (health !== \"ok\")\n      throw WalletInitializationError.rpcConnectionError(`Failed to lookup network for following rpc target: ${chainConfig.rpcTarget}`);\n    this.update({ chainId: chainConfig.chainId });\n    if (this.state.chainId !== chainConfig.chainId) {\n      this.provider.emit(\"chainChanged\", this.state.chainId);\n      this.provider.emit(\"connect\", { chainId: this.state.chainId });\n    }\n    return this.state.chainId;\n  }\n\n  private getChainSwitchMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const chainSwitchHandlers: IChainSwitchHandlers = {\n      addNewChainConfig: async (req: JRPCRequest<AddSolanaChainParameter>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        const { chainId, chainName, rpcUrls, blockExplorerUrls, nativeCurrency } = req.params;\n\n        if (!chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId in chainParams\");\n        if (!rpcUrls || rpcUrls.length === 0) throw ethErrors.rpc.invalidParams(\"Missing rpcUrls in chainParams\");\n        if (!nativeCurrency) throw ethErrors.rpc.invalidParams(\"Missing nativeCurrency in chainParams\");\n        this.addChain({\n          chainNamespace: CHAIN_NAMESPACES.SOLANA,\n          chainId,\n          ticker: nativeCurrency?.symbol || \"SOL\",\n          tickerName: nativeCurrency?.name || \"Solana\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: blockExplorerUrls?.[0] || \"\",\n        });\n      },\n      switchSolanaChain: async (req: JRPCRequest<{ chainId: string }>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId\");\n        await this.switchChain(req.params);\n      },\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n\n  private getAccountMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const accountHandlers: IAccountHandlers = {\n      updatePrivatekey: async (req: JRPCRequest<{ privateKey: string }>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.privateKey) throw ethErrors.rpc.invalidParams(\"Missing privateKey\");\n        const { privateKey } = req.params;\n        await this.updateAccount({ privateKey });\n      },\n    };\n    return createAccountMiddleware(accountHandlers);\n  }\n}\n","export * from \"./solanaPrivateKeyProvider\";\n","export * from \"./injectedProviders\";\nexport * from \"./privateKeyProvider\";\n","import { Transaction } from \"@solana/web3.js\";\nimport { RequestArguments, SafeEventEmitterProvider } from \"@web3auth/base\";\n\nimport { ISolanaWallet } from \"./interface\";\n\nexport class SolanaWallet implements ISolanaWallet {\n  public provider: SafeEventEmitterProvider;\n\n  constructor(provider: SafeEventEmitterProvider) {\n    this.provider = provider;\n  }\n\n  public async requestAccounts(): Promise<string[]> {\n    const accounts = await this.provider.request<string[]>({\n      method: \"requestAccounts\",\n      params: {},\n    });\n    return accounts;\n  }\n\n  public async signAndSendTransaction(transaction: Transaction): Promise<{ signature: string }> {\n    const { signature } = await this.provider.request<{ signature: string }>({\n      method: \"signAndSendTransaction\",\n      params: {\n        message: transaction,\n      },\n    });\n    return { signature };\n  }\n\n  public async signTransaction(transaction: Transaction): Promise<Transaction> {\n    const signedTransaction = (await this.provider.request({\n      method: \"signTransaction\",\n      params: {\n        message: transaction,\n      },\n    })) as Transaction;\n    return signedTransaction;\n  }\n\n  public async signAllTransactions(transactions: Transaction[]): Promise<Transaction[]> {\n    const signedTransactions = (await this.provider.request({\n      method: \"signAllTransactions\",\n      params: {\n        message: transactions,\n      },\n    })) as Transaction[];\n    return signedTransactions;\n  }\n\n  public async signMessage(data: Uint8Array): Promise<Uint8Array> {\n    const response = await this.provider.request<Uint8Array>({\n      method: \"signMessage\",\n      params: {\n        message: data,\n      },\n    });\n    return response as Uint8Array;\n  }\n\n  public async request<T>(args: RequestArguments): Promise<T> {\n    const result = await this.provider.request<T>(args);\n    return result as T;\n  }\n}\n","export * from \"./interface\";\nexport * from \"./providers\";\nexport * from \"./solanaWallet\";\n"],"names":["createFetchMiddleware","mergeMiddleware","createChainIdMiddleware","chainId","req","res","next","end","method","result","createProviderConfigMiddleware","providerConfig","createConfigMiddleware","createJsonRpcClient","rpcTarget","fetchMiddleware","networkMiddleware","createAsyncMiddleware","createGetAccountsMiddleware","getAccounts","request","response","Error","accounts","undefined","createRequestAccountsMiddleware","requestAccounts","createGenericJRPCMiddleware","targetMethod","handler","createSolanaMiddleware","providerHandlers","signTransaction","signAndSendTransaction","signAllTransactions","signMessage","getPrivateKey","getSecretKey","createChainSwitchMiddleware","addNewChainConfig","switchSolanaChain","createAccountMiddleware","updatePrivatekey","providerFromEngine","JRPCEngine","CHAIN_NAMESPACES","BaseProvider","BaseInjectedProvider","config","state","chainConfig","chainNamespace","SOLANA","_","Promise","resolve","injectedProvider","engine","getProviderHandlers","solanaMiddleware","push","configMiddleware","injectedProviderProxy","getInjectedProviderProxy","provider","updateProviderEngineProxy","lookupNetwork","update","bs58","ethErrors","getBaseProviderHandlers","publicKey","encode","toBytes","rpc","methodNotSupported","params","message","transaction","display","sigData","signature","length","invalidParams","txRes","createInjectedProviderProxyMiddleware","_next","PhantomInjectedProvider","Connection","PublicKey","getSlopeHandlers","getProviderEngineProxy","connect","data","txMessage","invalidRequest","serializeMessage","decode","addSignature","Buffer","from","custom","code","conn","sendRawTransaction","serialize","allTxns","unsignedTx","i","msg","signatures","SlopeInjectedProxyProvider","bind","getSolflareHandlers","solflareProviderHandlers","SolflareInjectedProvider","getSolletHandlers","sign","SolletInjectedProvider","getTorusHandlers","sendTransaction","transactions","isHexStrict","WalletInitializationError","TorusInjectedProvider","handleInjectedProviderUpdate","setupEngine","connectedChainId","connectedHexChainId","toString","parseInt","rpcConnectionError","emit","on","configure","setupProvider","Keypair","nacl","privKey","keyPairGenerator","fromSecretKey","keyPair","toBase58","secretKey","partialSign","signedMsg","detached","_providerEngineProxy","sig","txns","tx","SolanaPrivateKeyProvider","privateKey","getChainSwitchMiddleware","getAccountMiddleware","existingKey","getChainConfig","health","chainSwitchHandlers","chainName","rpcUrls","blockExplorerUrls","nativeCurrency","addChain","ticker","symbol","tickerName","name","displayName","blockExplorer","switchChain","chainSwitchMiddleware","accountHandlers","updateAccount","providerFactory","SolanaWallet","signedTransaction","signedTransactions","args"],"sourceRoot":""}