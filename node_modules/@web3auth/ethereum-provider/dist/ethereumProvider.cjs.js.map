{"version":3,"file":"ethereumProvider.cjs.js","mappings":"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","sources":["webpack://@web3auth/ethereum-provider/webpack/bootstrap","webpack://@web3auth/ethereum-provider/webpack/runtime/compat get default export","webpack://@web3auth/ethereum-provider/webpack/runtime/define property getters","webpack://@web3auth/ethereum-provider/webpack/runtime/hasOwnProperty shorthand","webpack://@web3auth/ethereum-provider/webpack/runtime/make namespace object","webpack://@web3auth/ethereum-provider/external commonjs2 \"@babel/runtime/helpers/asyncToGenerator\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@babel/runtime/helpers/classCallCheck\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@babel/runtime/helpers/createClass\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@babel/runtime/helpers/assertThisInitialized\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@babel/runtime/helpers/get\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@babel/runtime/helpers/inherits\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@babel/runtime/helpers/possibleConstructorReturn\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@babel/runtime/helpers/getPrototypeOf\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@babel/runtime/helpers/defineProperty\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@babel/runtime/regenerator\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@toruslabs/base-controllers\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@toruslabs/openlogin-jrpc\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@web3auth/base\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@web3auth/base-provider\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"eth-rpc-errors\"","webpack://@web3auth/ethereum-provider/./src/rpc/walletMidddleware.ts","webpack://@web3auth/ethereum-provider/./src/rpc/ethRpcMiddlewares.ts","webpack://@web3auth/ethereum-provider/./src/rpc/jrpcClient.ts","webpack://@web3auth/ethereum-provider/./src/providers/injectedProviders/walletConnectUtils.ts","webpack://@web3auth/ethereum-provider/./src/providers/injectedProviders/WalletConnectProvider.ts","webpack://@web3auth/ethereum-provider/./src/providers/injectedProviders/index.ts","webpack://@web3auth/ethereum-provider/external commonjs2 \"@ethereumjs/tx\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@ethereumjs/util\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@metamask/eth-sig-util\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@babel/runtime/helpers/typeof\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@toruslabs/http-helpers\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"assert\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"jsonschema\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"bignumber.js\"","webpack://@web3auth/ethereum-provider/./src/providers/converter.ts","webpack://@web3auth/ethereum-provider/./src/providers/privateKeyProviders/TransactionFormatter/utils.ts","webpack://@web3auth/ethereum-provider/./src/providers/privateKeyProviders/ethPrivatekeyUtils.ts","webpack://@web3auth/ethereum-provider/external commonjs2 \"@ethereumjs/common\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"bn.js\"","webpack://@web3auth/ethereum-provider/./src/providers/utils.ts","webpack://@web3auth/ethereum-provider/./src/providers/privateKeyProviders/TransactionFormatter/constants.ts","webpack://@web3auth/ethereum-provider/./src/providers/privateKeyProviders/TransactionFormatter/index.ts","webpack://@web3auth/ethereum-provider/./src/providers/privateKeyProviders/EthereumPrivateKeyProvider.ts","webpack://@web3auth/ethereum-provider/./src/providers/privateKeyProviders/index.ts","webpack://@web3auth/ethereum-provider/./src/providers/index.ts","webpack://@web3auth/ethereum-provider/./src/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/asyncToGenerator\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/classCallCheck\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/createClass\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/assertThisInitialized\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/get\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/inherits\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/possibleConstructorReturn\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/getPrototypeOf\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/regenerator\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/base-controllers\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/openlogin-jrpc\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@web3auth/base\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@web3auth/base-provider\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"eth-rpc-errors\");","import type { MessageTypes, TypedDataV1, TypedMessage } from \"@metamask/eth-sig-util\";\nimport { createAsyncMiddleware, createScaffoldMiddleware, JRPCMiddleware, JRPCRequest, JRPCResponse } from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport type { MessageParams, TransactionParams, TypedMessageParams, WalletMiddlewareOptions } from \"./interfaces\";\n\nfunction resemblesAddress(str: string): boolean {\n  // hex prefix 2 + 20 bytes\n  return str.length === 2 + 20 * 2;\n}\n\nexport function createWalletMiddleware({\n  getAccounts,\n  getPrivateKey,\n  processDecryptMessage,\n  processEncryptionPublicKey,\n  processEthSignMessage,\n  processPersonalMessage,\n  processTransaction,\n  processSignTransaction,\n  processTypedMessage,\n  processTypedMessageV3,\n  processTypedMessageV4,\n}: WalletMiddlewareOptions): JRPCMiddleware<string, unknown> {\n  if (!getAccounts) {\n    throw new Error(\"opts.getAccounts is required\");\n  }\n\n  //\n  // utility\n  //\n\n  /**\n   * Validates the keyholder address, and returns a normalized (i.e. lowercase)\n   * copy of it.\n   *\n   * an error\n   */\n  async function validateAndNormalizeKeyholder(address: string, req: JRPCRequest<unknown>): Promise<string> {\n    if (typeof address === \"string\" && address.length > 0) {\n      // ensure address is included in provided accounts\n      const accounts: string[] = await getAccounts(req);\n      const normalizedAccounts: string[] = accounts.map((_address) => _address.toLowerCase());\n      const normalizedAddress: string = address.toLowerCase();\n\n      if (normalizedAccounts.includes(normalizedAddress)) {\n        return normalizedAddress;\n      }\n    }\n    throw ethErrors.rpc.invalidParams({\n      message: `Invalid parameters: must provide an Ethereum address.`,\n    });\n  }\n\n  //\n  // account lookups\n  //\n\n  async function lookupAccounts(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    res.result = await getAccounts(req);\n  }\n\n  async function lookupDefaultAccount(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    const accounts = await getAccounts(req);\n    res.result = accounts[0] || null;\n  }\n\n  //\n  // transaction signatures\n  //\n\n  async function sendTransaction(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processTransaction) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const txParams: TransactionParams = (req.params as TransactionParams[])[0] || {\n      from: \"\",\n    };\n    txParams.from = await validateAndNormalizeKeyholder(txParams.from as string, req);\n    res.result = await processTransaction(txParams, req);\n  }\n\n  async function signTransaction(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processSignTransaction) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const txParams: TransactionParams = (req.params as TransactionParams[])[0] || {\n      from: \"\",\n    };\n    txParams.from = await validateAndNormalizeKeyholder(txParams.from as string, req);\n    res.result = await processSignTransaction(txParams, req);\n  }\n\n  //\n  // message signatures\n  //\n\n  async function ethSign(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processEthSignMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address: string = await validateAndNormalizeKeyholder((req.params as string[])[0], req);\n    const message: string = (req.params as string[])[1];\n    const extraParams: Record<string, unknown> = (req.params as Record<string, unknown>[])[2] || {};\n    const msgParams: MessageParams<string> = {\n      ...extraParams,\n      from: address,\n      data: message,\n    };\n\n    res.result = await processEthSignMessage(msgParams, req);\n  }\n\n  async function signTypedData(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processTypedMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const message: TypedDataV1 = (req.params as TypedDataV1[])[0];\n    const address: string = await validateAndNormalizeKeyholder((req.params as string[])[1], req);\n    const version = \"V1\";\n    const extraParams: Record<string, unknown> = (req.params as Record<string, unknown>[])[2] || {};\n    const msgParams: MessageParams<TypedDataV1> = {\n      ...extraParams,\n      from: address,\n      data: message,\n    };\n\n    res.result = await processTypedMessage(msgParams, req, version);\n  }\n\n  async function signTypedDataV3(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processTypedMessageV3) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address: string = await validateAndNormalizeKeyholder((req.params as string[])[0], req);\n    const message: TypedMessage<MessageTypes> = (req.params as TypedMessage<MessageTypes>[])[1];\n    const version = \"V3\";\n    const msgParams: TypedMessageParams<TypedMessage<MessageTypes>> = {\n      data: message,\n      from: address,\n      version,\n    };\n\n    res.result = await processTypedMessageV3(msgParams, req, version);\n  }\n\n  async function signTypedDataV4(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processTypedMessageV4) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address: string = await validateAndNormalizeKeyholder((req.params as string[])[0], req);\n    const message: TypedMessage<MessageTypes> = (req.params as TypedMessage<MessageTypes>[])[1];\n    const version = \"V4\";\n    const msgParams: TypedMessageParams<TypedMessage<MessageTypes>> = {\n      data: message,\n      from: address,\n      version,\n    };\n\n    res.result = await processTypedMessageV4(msgParams, req, version);\n  }\n\n  async function personalSign(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processPersonalMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    // process normally\n    const firstParam: string = (req.params as string[])[0];\n    const secondParam: string = (req.params as string[])[1];\n    // non-standard \"extraParams\" to be appended to our \"msgParams\" obj\n    const extraParams: Record<string, unknown> = (req.params as Record<string, unknown>[])[2] || {};\n\n    // We initially incorrectly ordered these parameters.\n    // To gracefully respect users who adopted this API early,\n    // we are currently gracefully recovering from the wrong param order\n    // when it is clearly identifiable.\n    //\n    // That means when the first param is definitely an address,\n    // and the second param is definitely not, but is hex.\n    let address: string, message: string;\n    if (resemblesAddress(firstParam) && !resemblesAddress(secondParam)) {\n      let warning = `The eth_personalSign method requires params ordered `;\n      warning += `[message, address]. This was previously handled incorrectly, `;\n      warning += `and has been corrected automatically. `;\n      warning += `Please switch this param order for smooth behavior in the future.`;\n      (res as any).warning = warning;\n\n      address = firstParam;\n      message = secondParam;\n    } else {\n      message = firstParam;\n      address = secondParam;\n    }\n    address = await validateAndNormalizeKeyholder(address, req);\n\n    const msgParams: MessageParams<string> = {\n      ...extraParams,\n      from: address,\n      data: message,\n    };\n\n    // eslint-disable-next-line require-atomic-updates\n    res.result = await processPersonalMessage(msgParams, req);\n  }\n\n  async function encryptionPublicKey(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processEncryptionPublicKey) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address: string = await validateAndNormalizeKeyholder((req.params as string)[0], req);\n\n    res.result = await processEncryptionPublicKey(address, req);\n  }\n\n  async function decryptMessage(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processDecryptMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const ciphertext: string = (req.params as string)[0];\n    const address: string = await validateAndNormalizeKeyholder((req.params as string)[1], req);\n    const extraParams: Record<string, unknown> = (req.params as Record<string, unknown>[])[2] || {};\n    const msgParams: MessageParams<string> = {\n      ...extraParams,\n      from: address,\n      data: ciphertext,\n    };\n\n    res.result = processDecryptMessage(msgParams, req);\n  }\n\n  async function fetchPrivateKey(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!getPrivateKey) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n    res.result = getPrivateKey(req);\n  }\n\n  return createScaffoldMiddleware({\n    // account lookups\n    eth_accounts: createAsyncMiddleware(lookupAccounts),\n    eth_private_key: createAsyncMiddleware(fetchPrivateKey),\n    eth_coinbase: createAsyncMiddleware(lookupDefaultAccount),\n    // tx signatures\n    eth_sendTransaction: createAsyncMiddleware(sendTransaction),\n    eth_signTransaction: createAsyncMiddleware(signTransaction),\n    // message signatures\n    eth_sign: createAsyncMiddleware(ethSign),\n    eth_signTypedData: createAsyncMiddleware(signTypedData),\n    eth_signTypedData_v3: createAsyncMiddleware(signTypedDataV3),\n    eth_signTypedData_v4: createAsyncMiddleware(signTypedDataV4),\n    personal_sign: createAsyncMiddleware(personalSign),\n    eth_getEncryptionPublicKey: createAsyncMiddleware(encryptionPublicKey),\n    eth_decrypt: createAsyncMiddleware(decryptMessage),\n  });\n}\n","import {\n  createAsyncMiddleware,\n  createScaffoldMiddleware,\n  JRPCMiddleware,\n  JRPCRequest,\n  JRPCResponse,\n  mergeMiddleware,\n} from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { AddEthereumChainParameter, IAccountHandlers, IChainSwitchHandlers, IProviderHandlers } from \"./interfaces\";\nimport { createWalletMiddleware } from \"./walletMidddleware\";\n\nexport function createEthMiddleware(providerHandlers: IProviderHandlers): JRPCMiddleware<unknown, unknown> {\n  const {\n    getAccounts,\n    getPrivateKey,\n    processTransaction,\n    processSignTransaction,\n    processEthSignMessage,\n    processTypedMessage,\n    processTypedMessageV3,\n    processTypedMessageV4,\n    processPersonalMessage,\n    processEncryptionPublicKey,\n    processDecryptMessage,\n  } = providerHandlers;\n  const ethMiddleware = mergeMiddleware([\n    createScaffoldMiddleware({\n      eth_syncing: false,\n    }),\n    createWalletMiddleware({\n      getAccounts,\n      getPrivateKey,\n      processTransaction,\n      processEthSignMessage,\n      processSignTransaction,\n      processTypedMessage,\n      processTypedMessageV3,\n      processTypedMessageV4,\n      processPersonalMessage,\n      processEncryptionPublicKey,\n      processDecryptMessage,\n    }),\n  ]);\n  return ethMiddleware;\n}\n\nexport function createChainSwitchMiddleware({ addChain, switchChain }: IChainSwitchHandlers): JRPCMiddleware<unknown, unknown> {\n  async function addNewChain(req: JRPCRequest<AddEthereumChainParameter[]>, res: JRPCResponse<unknown>): Promise<void> {\n    const chainParams = req.params?.length ? req.params[0] : undefined;\n    if (!chainParams) throw ethErrors.rpc.invalidParams(\"Missing chain params\");\n    if (!chainParams.chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId in chainParams\");\n    if (!chainParams.rpcUrls || chainParams.rpcUrls.length === 0) throw ethErrors.rpc.invalidParams(\"Missing rpcUrls in chainParams\");\n    if (!chainParams.nativeCurrency) throw ethErrors.rpc.invalidParams(\"Missing nativeCurrency in chainParams\");\n\n    res.result = await addChain(chainParams);\n  }\n  async function updateChain(req: JRPCRequest<{ chainId: string }[]>, res: JRPCResponse<unknown>): Promise<void> {\n    const chainParams = req.params?.length ? req.params[0] : undefined;\n    if (!chainParams) throw ethErrors.rpc.invalidParams(\"Missing chainId\");\n    res.result = await switchChain(chainParams);\n  }\n\n  return createScaffoldMiddleware({\n    wallet_addEthereumChain: createAsyncMiddleware(addNewChain),\n    wallet_switchEthereumChain: createAsyncMiddleware(updateChain),\n  });\n}\n\n// #region account middlewares\nexport function createAccountMiddleware({ updatePrivatekey }: IAccountHandlers): JRPCMiddleware<unknown, unknown> {\n  async function updateAccount(req: JRPCRequest<{ privateKey: string }[]>, res: JRPCResponse<unknown>): Promise<void> {\n    const accountParams = req.params?.length ? req.params[0] : undefined;\n    if (!accountParams?.privateKey) throw ethErrors.rpc.invalidParams(\"Missing privateKey\");\n    res.result = await updatePrivatekey(accountParams);\n  }\n\n  return createScaffoldMiddleware({\n    wallet_updateAccount: createAsyncMiddleware(updateAccount),\n  });\n}\n\n// #endregion account middlewares\n","import { createFetchMiddleware } from \"@toruslabs/base-controllers\";\nimport { JRPCEngineEndCallback, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport type { CustomChainConfig } from \"@web3auth/base\";\n\nexport function createChainIdMiddleware(chainId: string): JRPCMiddleware<unknown, unknown> {\n  return (req: JRPCRequest<unknown>, res: JRPCResponse<string>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => {\n    if (req.method === \"eth_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createProviderConfigMiddleware(providerConfig: CustomChainConfig): JRPCMiddleware<unknown, unknown> {\n  return (req: JRPCRequest<unknown>, res: JRPCResponse<CustomChainConfig>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => {\n    if (req.method === \"eth_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createJsonRpcClient(providerConfig: CustomChainConfig): {\n  networkMiddleware: JRPCMiddleware<unknown, unknown>;\n  fetchMiddleware: JRPCMiddleware<unknown, unknown>;\n} {\n  const { chainId, rpcTarget } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({ rpcTarget });\n  const networkMiddleware = mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig), fetchMiddleware]);\n  return { networkMiddleware, fetchMiddleware };\n}\n","import { MessageTypes, TypedDataV1, TypedMessage } from \"@metamask/eth-sig-util\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport type { IConnector, ITxData } from \"@walletconnect/types\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IProviderHandlers, MessageParams, TransactionParams, TypedMessageParams } from \"../../rpc/interfaces\";\n\nexport function getProviderHandlers({ connector }: { connector: IConnector }): IProviderHandlers {\n  return {\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getAccounts: async (_: JRPCRequest<unknown>) => {\n      const { accounts } = connector;\n      if (accounts && accounts.length) {\n        return accounts;\n      }\n      throw new Error(\"Failed to get accounts\");\n    },\n    processTransaction: async (txParams: TransactionParams, _: JRPCRequest<unknown>): Promise<string> => {\n      const result = await connector.sendTransaction(txParams as ITxData);\n      return result;\n    },\n    processSignTransaction: async (txParams: TransactionParams, _: JRPCRequest<unknown>): Promise<string> => {\n      const result = await connector.signTransaction(txParams as ITxData);\n      return result;\n    },\n    processEthSignMessage: async (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): Promise<string> => {\n      const result = await connector.signMessage([msgParams.from, msgParams.data]);\n      return result;\n    },\n    processPersonalMessage: async (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): Promise<string> => {\n      const result = await connector.signPersonalMessage([msgParams.data, msgParams.from]);\n      return result;\n    },\n    processTypedMessage: async (msgParams: MessageParams<TypedDataV1>, _: JRPCRequest<unknown>): Promise<string> => {\n      const result = await connector.signTypedData([msgParams.from, msgParams.data]);\n      return result;\n    },\n    processTypedMessageV3: async (msgParams: TypedMessageParams<TypedMessage<MessageTypes>>): Promise<string> => {\n      const result = await connector.signTypedData([msgParams.from, msgParams.data]);\n      return result;\n    },\n    processTypedMessageV4: async (msgParams: TypedMessageParams<TypedMessage<MessageTypes>>): Promise<string> => {\n      const result = await connector.signTypedData([msgParams.from, msgParams.data]);\n      return result;\n    },\n    processEncryptionPublicKey: async (_: string): Promise<string> => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    processDecryptMessage: (_: MessageParams<string>): string => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n  };\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine } from \"@toruslabs/openlogin-jrpc\";\nimport type { IConnector } from \"@walletconnect/types\";\nimport { CHAIN_NAMESPACES, CustomChainConfig, getChainConfig, isHexStrict, log, WalletInitializationError, WalletLoginError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { createEthMiddleware } from \"../../rpc/ethRpcMiddlewares\";\nimport { createJsonRpcClient } from \"../../rpc/jrpcClient\";\nimport { getProviderHandlers } from \"./walletConnectUtils\";\n\nexport interface WalletConnectProviderConfig extends BaseProviderConfig {\n  chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n}\n\nexport interface WalletConnectProviderState extends BaseProviderState {\n  accounts: string[];\n}\n\nexport class WalletConnectProvider extends BaseProvider<BaseProviderConfig, WalletConnectProviderState, IConnector> {\n  private connector: IConnector | null = null;\n\n  constructor({ config, state, connector }: { config: WalletConnectProviderConfig; state?: BaseProviderState; connector?: IConnector }) {\n    super({\n      config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.EIP155 }, skipLookupNetwork: !!config.skipLookupNetwork },\n      state: { ...(state || {}), chainId: \"loading\", accounts: [] },\n    });\n    this.connector = connector || null;\n  }\n\n  public static getProviderInstance = async (params: {\n    connector: IConnector;\n    chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n    skipLookupNetwork: boolean;\n  }): Promise<WalletConnectProvider> => {\n    const providerFactory = new WalletConnectProvider({ config: { chainConfig: params.chainConfig, skipLookupNetwork: params.skipLookupNetwork } });\n    await providerFactory.setupProvider(params.connector);\n    return providerFactory;\n  };\n\n  public async enable(): Promise<string[]> {\n    if (!this.connector)\n      throw ethErrors.provider.custom({ message: \"Connector is not initialized, pass wallet connect connector in constructor\", code: 4902 });\n    await this.setupProvider(this.connector);\n    return this._providerEngineProxy.request({ method: \"eth_accounts\" });\n  }\n\n  public async setupProvider(connector: IConnector): Promise<void> {\n    this.onConnectorStateUpdate(connector);\n    await this.setupEngine(connector);\n  }\n\n  public async switchChain({ chainId, addChain = true, lookup = true }: { chainId: string; addChain?: boolean; lookup?: boolean }): Promise<void> {\n    if (!this.connector)\n      throw ethErrors.provider.custom({ message: \"Connector is not initialized, pass wallet connect connector in constructor\", code: 4902 });\n    const currentChainConfig = this.getChainConfig(chainId);\n    this.update({\n      chainId: \"loading\",\n    });\n    const { rpcTarget, displayName } = currentChainConfig;\n    if (addChain) {\n      try {\n        await this.connector.sendCustomRequest({\n          method: \"wallet_addEthereumChain\",\n          params: [{ chainId, chainName: displayName, rpcUrls: [rpcTarget] }],\n        });\n      } catch (error) {\n        log.error(error);\n      }\n    }\n\n    try {\n      await this.connector.sendCustomRequest({\n        method: \"wallet_switchEthereumChain\",\n        params: [{ chainId }],\n      });\n    } catch (error) {\n      log.error(error);\n      // ignore this error because metamask & others return provider.result as null\n      // wallet connect thinks this is wrong\n      if (error.message !== \"JSON RPC response format is invalid\") {\n        throw error;\n      }\n    }\n\n    this.configure({ chainConfig: currentChainConfig });\n    if (lookup) await this.lookupNetwork(this.connector);\n  }\n\n  async addChain(chainConfig: CustomChainConfig): Promise<void> {\n    if (!this.connector) throw WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n    const { rpcTarget, displayName } = chainConfig;\n\n    try {\n      await this.connector.sendCustomRequest({\n        method: \"wallet_addEthereumChain\",\n        params: [{ chainId: chainConfig.chainId, chainName: displayName, rpcUrls: [rpcTarget] }],\n      });\n      super.addChain(chainConfig);\n    } catch (error) {\n      log.error(error);\n      throw error;\n    }\n  }\n\n  protected async lookupNetwork(connector: IConnector): Promise<string> {\n    if (!connector.connected) throw WalletLoginError.notConnectedError(\"Wallet connect connector is not connected\");\n    if (!this.provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const { chainId } = this.config.chainConfig;\n    const connectedHexChainId = isHexStrict(connector.chainId.toString()) ? connector.chainId : `0x${connector.chainId.toString(16)}`;\n    if (chainId !== connectedHexChainId)\n      throw WalletInitializationError.rpcConnectionError(`Invalid network, net_version is: ${connectedHexChainId}, expected: ${chainId}`);\n\n    this.provider.emit(\"connect\", { chainId });\n    this.provider.emit(\"chainChanged\", this.state.chainId);\n    return connectedHexChainId;\n  }\n\n  private async setupEngine(connector: IConnector): Promise<void> {\n    const providerHandlers = getProviderHandlers({ connector });\n    this.update({\n      accounts: connector.accounts || [],\n    });\n    const ethMiddleware = createEthMiddleware(providerHandlers);\n    const engine = new JRPCEngine();\n    const { networkMiddleware } = createJsonRpcClient(this.config.chainConfig as CustomChainConfig);\n    engine.push(ethMiddleware);\n    engine.push(networkMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    if (!this.config.skipLookupNetwork) await this.lookupNetwork(connector);\n  }\n\n  private async onConnectorStateUpdate(connector: IConnector) {\n    connector.on(\"session_update\", async (error: Error | null, payload) => {\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Wallet connect connector is not connected\");\n      if (error) {\n        this.provider.emit(\"error\", error);\n        return;\n      }\n      const { accounts, chainId: connectedChainId, rpcUrl }: { accounts?: string[]; chainId?: number; rpcUrl?: string } = payload.params[0];\n      // Check if accounts changed and trigger event\n      if (accounts?.length && this.state.accounts[0] !== accounts[0]) {\n        this.update({\n          accounts,\n        });\n        // await this.setupEngine(connector);\n        this.provider.emit(\"accountsChanged\", accounts);\n      }\n      const connectedHexChainId = `0x${connectedChainId.toString(16)}`;\n      // Check if chainId changed and trigger event\n      if (connectedChainId && this.state.chainId !== connectedHexChainId) {\n        const maybeConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, connectedChainId) || {};\n        // Handle rpcUrl update\n        this.configure({\n          chainConfig: { ...maybeConfig, chainId: connectedHexChainId, rpcTarget: rpcUrl, chainNamespace: CHAIN_NAMESPACES.EIP155 },\n        });\n        await this.setupEngine(connector);\n      }\n    });\n  }\n}\n","export * from \"./WalletConnectProvider\";\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@ethereumjs/tx\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@ethereumjs/util\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@metamask/eth-sig-util\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/typeof\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/http-helpers\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"assert\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"jsonschema\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"bignumber.js\");","import { stripHexPrefix } from \"@ethereumjs/util\";\nimport BigNumber from \"bignumber.js\";\n\ntype DenominationType = \"WEI\" | \"GWEI\" | \"ETH\";\ntype NumericBaseType = \"hex\" | \"dec\";\n\ntype ConverterInput = {\n  value: string | BigNumber;\n  fromNumericBase: NumericBaseType;\n  fromDenomination?: DenominationType;\n  toNumericBase?: NumericBaseType;\n  toDenomination?: DenominationType;\n  numberOfDecimals?: number;\n};\n// Big Number Constants\nconst BIG_NUMBER_WEI_MULTIPLIER = new BigNumber(\"1e18\");\nconst BIG_NUMBER_GWEI_MULTIPLIER = new BigNumber(\"1e9\");\nconst BIG_NUMBER_ETH_MULTIPLIER = new BigNumber(\"1\");\n\n// Setter Maps\nconst toBigNumber: Record<NumericBaseType, (n: string | BigNumber) => BigNumber> = {\n  hex: (n: string | BigNumber) => (typeof n === \"string\" ? new BigNumber(stripHexPrefix(n), 16) : new BigNumber(n, 16)),\n  dec: (n: string | BigNumber) => new BigNumber(n, 10),\n};\nconst toNormalizedDenomination: Record<string, (n: BigNumber) => BigNumber> = {\n  WEI: (bigNumber) => bigNumber.div(BIG_NUMBER_WEI_MULTIPLIER),\n  GWEI: (bigNumber) => bigNumber.div(BIG_NUMBER_GWEI_MULTIPLIER),\n  ETH: (bigNumber) => bigNumber.div(BIG_NUMBER_ETH_MULTIPLIER),\n};\nconst toSpecifiedDenomination: Record<string, (n: BigNumber) => BigNumber> = {\n  WEI: (bigNumber) => bigNumber.times(BIG_NUMBER_WEI_MULTIPLIER).dp(0, BigNumber.ROUND_HALF_UP),\n  GWEI: (bigNumber) => bigNumber.times(BIG_NUMBER_GWEI_MULTIPLIER).dp(9, BigNumber.ROUND_HALF_UP),\n  ETH: (bigNumber) => bigNumber.times(BIG_NUMBER_ETH_MULTIPLIER).dp(9, BigNumber.ROUND_HALF_UP),\n};\nconst baseChange: Record<string, (n: BigNumber) => string> = {\n  hex: (n) => n.toString(16),\n  dec: (n) => new BigNumber(n).toString(10),\n};\n\nconst converter = (params: ConverterInput): string | BigNumber => {\n  const { value, fromNumericBase, fromDenomination, toNumericBase, toDenomination, numberOfDecimals } = params;\n  let convertedValue: string | BigNumber = toBigNumber[fromNumericBase](value);\n\n  if (fromDenomination) {\n    convertedValue = toNormalizedDenomination[fromDenomination](convertedValue as BigNumber);\n  }\n\n  if (toDenomination) {\n    convertedValue = toSpecifiedDenomination[toDenomination](convertedValue as BigNumber);\n  }\n\n  if (numberOfDecimals) {\n    convertedValue = (convertedValue as BigNumber).dp(numberOfDecimals, BigNumber.ROUND_HALF_DOWN);\n  }\n\n  if (toNumericBase) {\n    convertedValue = baseChange[toNumericBase](convertedValue);\n  }\n  return convertedValue;\n};\n\nconst conversionUtil = (\n  value: string | BigNumber,\n  { fromNumericBase = \"hex\", toNumericBase, fromDenomination, toDenomination, numberOfDecimals }: Partial<ConverterInput>\n): BigNumber | string => {\n  return converter({\n    fromNumericBase,\n    toNumericBase,\n    fromDenomination,\n    toDenomination,\n    numberOfDecimals,\n    value: value || \"0\",\n  });\n};\n\nfunction decGWEIToHexWEI(decGWEI: string | BigNumber): string {\n  return conversionUtil(decGWEI, {\n    fromNumericBase: \"dec\",\n    toNumericBase: \"hex\",\n    fromDenomination: \"GWEI\",\n    toDenomination: \"WEI\",\n  }) as string;\n}\n\nfunction hexWEIToDecGWEI(decGWEI: string | BigNumber): string {\n  return conversionUtil(decGWEI, {\n    fromNumericBase: \"hex\",\n    toNumericBase: \"dec\",\n    fromDenomination: \"WEI\",\n    toDenomination: \"GWEI\",\n  }) as string;\n}\n\nexport { conversionUtil, decGWEIToHexWEI, hexWEIToDecGWEI };\n","import { isValidAddress } from \"@ethereumjs/util\";\nimport { SignTypedDataVersion, TYPED_MESSAGE_SCHEMA, TypedDataV1Field, typedSignatureHash } from \"@metamask/eth-sig-util\";\nimport { get } from \"@toruslabs/http-helpers\";\nimport { isHexStrict } from \"@web3auth/base\";\nimport assert from \"assert\";\nimport { BigNumber } from \"bignumber.js\";\nimport { ethErrors } from \"eth-rpc-errors\";\nimport jsonschema from \"jsonschema\";\n\nimport { TypedMessageParams } from \"../../../rpc/interfaces\";\nimport { decGWEIToHexWEI, hexWEIToDecGWEI } from \"../../converter\";\nimport { EIP1159GasData, LegacyGasData } from \"./interfaces\";\n\nexport function normalizeGWEIDecimalNumbers(n: string | BigNumber): string {\n  const numberAsWEIHex = decGWEIToHexWEI(n);\n  const numberAsGWEI = hexWEIToDecGWEI(numberAsWEIHex);\n  return numberAsGWEI;\n}\n\nexport async function fetchEip1159GasEstimates(url: string): Promise<EIP1159GasData> {\n  const estimates = await get<EIP1159GasData>(url);\n  const normalizedEstimates = {\n    ...estimates,\n    estimatedBaseFee: normalizeGWEIDecimalNumbers(estimates.estimatedBaseFee),\n    low: {\n      ...estimates.low,\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.low.suggestedMaxPriorityFeePerGas),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.low.suggestedMaxFeePerGas),\n    },\n    medium: {\n      ...estimates.medium,\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.medium.suggestedMaxPriorityFeePerGas),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.medium.suggestedMaxFeePerGas),\n    },\n    high: {\n      ...estimates.high,\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.high.suggestedMaxPriorityFeePerGas),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.high.suggestedMaxFeePerGas),\n    },\n  };\n  return normalizedEstimates;\n}\n\n/**\n * Hit the legacy MetaSwaps gasPrices estimate api and return the low, medium\n * high values from that API.\n */\nexport async function fetchLegacyGasPriceEstimates(url: string): Promise<LegacyGasData> {\n  const result = await get<{\n    SafeGasPrice: string;\n    ProposeGasPrice: string;\n    FastGasPrice: string;\n  }>(url, {\n    referrer: url,\n    referrerPolicy: \"no-referrer-when-downgrade\",\n    method: \"GET\",\n    mode: \"cors\",\n  });\n  return {\n    low: result.SafeGasPrice,\n    medium: result.ProposeGasPrice,\n    high: result.FastGasPrice,\n  };\n}\n\nexport const validateTypedMessageParams = (parameters: TypedMessageParams<unknown>, activeChainId: number) => {\n  try {\n    assert.ok(parameters && typeof parameters === \"object\", \"Params must be an object.\");\n    assert.ok(\"data\" in parameters, 'Params must include a \"data\" field.');\n    assert.ok(\"from\" in parameters, 'Params must include a \"from\" field.');\n    assert.ok(\n      typeof parameters.from === \"string\" && isValidAddress(parameters.from),\n      '\"from\" field must be a valid, lowercase, hexadecimal Ethereum address string.'\n    );\n    let data = null;\n    let chainId = null;\n    switch ((parameters as TypedMessageParams<unknown>).version) {\n      case SignTypedDataVersion.V1:\n        if (typeof parameters.data === \"string\") {\n          assert.doesNotThrow(() => {\n            data = JSON.parse(parameters.data as string);\n          }, '\"data\" must be a valid JSON string.');\n        } else {\n          // for backward compatiblity we validate for both string and object type.\n          data = parameters.data;\n        }\n        assert.ok(Array.isArray(data as unknown), \"params.data must be an array.\");\n        assert.doesNotThrow(() => {\n          typedSignatureHash(data as TypedDataV1Field[]);\n        }, \"Signing data must be valid EIP-712 typed data.\");\n        break;\n      case SignTypedDataVersion.V3:\n      case SignTypedDataVersion.V4:\n        if (typeof parameters.data === \"string\") {\n          assert.doesNotThrow(() => {\n            data = JSON.parse(parameters.data as string);\n          }, '\"data\" must be a valid JSON string.');\n        } else {\n          // for backward compatiblity we validate for both string and object type.\n          data = parameters.data;\n        }\n\n        assert.ok(data.primaryType in data.types, `Primary type of \"${data.primaryType}\" has no type definition.`);\n        const validation = jsonschema.validate(data, TYPED_MESSAGE_SCHEMA.properties);\n        assert.strictEqual(validation.errors.length, 0, \"Signing data must conform to EIP-712 schema. See https://git.io/fNtcx.\");\n        chainId = data.domain?.chainId;\n        if (chainId) {\n          assert.ok(!Number.isNaN(activeChainId), `Cannot sign messages for chainId \"${chainId}\", because Web3Auth is switching networks.`);\n          if (typeof chainId === \"string\") {\n            chainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n          }\n          assert.strictEqual(chainId, activeChainId, `Provided chainId \"${chainId}\" must match the active chainId \"${activeChainId}\"`);\n        }\n        break;\n      default:\n        assert.fail(`Unknown typed data version \"${(parameters as TypedMessageParams<unknown>).version}\"`);\n    }\n  } catch (error) {\n    throw ethErrors.rpc.invalidInput({\n      message: error?.message,\n    });\n  }\n};\n","import { TransactionFactory } from \"@ethereumjs/tx\";\nimport { privateToAddress, stripHexPrefix } from \"@ethereumjs/util\";\nimport {\n  decrypt,\n  EthEncryptedData,\n  getEncryptionPublicKey,\n  MessageTypes,\n  personalSign,\n  signTypedData,\n  SignTypedDataVersion,\n  TypedDataV1,\n  TypedMessage,\n} from \"@metamask/eth-sig-util\";\nimport { SafeEventEmitterProvider, signMessage } from \"@toruslabs/base-controllers\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { isHexStrict, log } from \"@web3auth/base\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IProviderHandlers, MessageParams, TransactionParams, TypedMessageParams } from \"../../rpc/interfaces\";\nimport { TransactionFormatter } from \"./TransactionFormatter\";\nimport { validateTypedMessageParams } from \"./TransactionFormatter/utils\";\n\nasync function signTx(txParams: TransactionParams & { gas?: string }, privKey: string, txFormatter: TransactionFormatter): Promise<Buffer> {\n  const finalTxParams = await txFormatter.formatTransaction(txParams);\n  const common = await txFormatter.getCommonConfiguration();\n  const unsignedEthTx = TransactionFactory.fromTxData(finalTxParams, {\n    common,\n  });\n  const signedTx = unsignedEthTx.sign(Buffer.from(privKey, \"hex\")).serialize();\n  return signedTx;\n}\n\nexport function getProviderHandlers({\n  txFormatter,\n  privKey,\n  getProviderEngineProxy,\n}: {\n  txFormatter: TransactionFormatter;\n  privKey: string;\n  getProviderEngineProxy: () => SafeEventEmitterProvider | null;\n}): IProviderHandlers {\n  return {\n    getAccounts: async (_: JRPCRequest<unknown>) => [`0x${privateToAddress(Buffer.from(privKey, \"hex\")).toString(\"hex\")}`],\n    getPrivateKey: async (_: JRPCRequest<unknown>) => privKey,\n    processTransaction: async (txParams: TransactionParams & { gas?: string }, _: JRPCRequest<unknown>): Promise<string> => {\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy)\n        throw ethErrors.provider.custom({\n          message: \"Provider is not initialized\",\n          code: 4902,\n        });\n      const signedTx = await signTx(txParams, privKey, txFormatter);\n      const txHash = await providerEngineProxy.request<string[], string>({\n        method: \"eth_sendRawTransaction\",\n        params: [\"0x\".concat(signedTx.toString(\"hex\"))],\n      });\n      return txHash;\n    },\n    processSignTransaction: async (txParams: TransactionParams & { gas?: string }, _: JRPCRequest<unknown>): Promise<string> => {\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy)\n        throw ethErrors.provider.custom({\n          message: \"Provider is not initialized\",\n          code: 4902,\n        });\n      const signedTx = await signTx(txParams, privKey, txFormatter);\n      return `0x${signedTx.toString(\"hex\")}`;\n    },\n    processEthSignMessage: async (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): Promise<string> => {\n      const rawMessageSig = signMessage(privKey, msgParams.data);\n      return rawMessageSig;\n    },\n    processPersonalMessage: async (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): Promise<string> => {\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const sig = personalSign({ privateKey: privKeyBuffer, data: msgParams.data });\n      return sig;\n    },\n    processTypedMessage: async (msgParams: MessageParams<TypedDataV1>, _: JRPCRequest<unknown>): Promise<string> => {\n      log.debug(\"processTypedMessage\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy)\n        throw ethErrors.provider.custom({\n          message: \"Provider is not initialized\",\n          code: 4902,\n        });\n      const chainId = await providerEngineProxy.request<unknown, string>({ method: \"eth_chainId\" });\n      const finalChainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n      const params = {\n        ...msgParams,\n        version: SignTypedDataVersion.V1,\n      };\n      validateTypedMessageParams(params, finalChainId);\n      const data = typeof params.data === \"string\" ? JSON.parse(params.data) : params.data;\n      const sig = signTypedData({ privateKey: privKeyBuffer, data, version: SignTypedDataVersion.V1 });\n      return sig;\n    },\n    processTypedMessageV3: async (msgParams: TypedMessageParams<TypedMessage<MessageTypes>>, _: JRPCRequest<unknown>): Promise<string> => {\n      log.debug(\"processTypedMessageV3\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy)\n        throw ethErrors.provider.custom({\n          message: \"Provider is not initialized\",\n          code: 4902,\n        });\n      const chainId = await providerEngineProxy.request<unknown, string>({ method: \"eth_chainId\" });\n      const finalChainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n      validateTypedMessageParams(msgParams, finalChainId);\n      const data = typeof msgParams.data === \"string\" ? JSON.parse(msgParams.data) : msgParams.data;\n      const sig = signTypedData({ privateKey: privKeyBuffer, data, version: SignTypedDataVersion.V3 });\n      return sig;\n    },\n    processTypedMessageV4: async (msgParams: TypedMessageParams<TypedMessage<MessageTypes>>, _: JRPCRequest<unknown>): Promise<string> => {\n      log.debug(\"processTypedMessageV4\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy)\n        throw ethErrors.provider.custom({\n          message: \"Provider is not initialized\",\n          code: 4902,\n        });\n      const chainId = await providerEngineProxy.request<unknown, string>({ method: \"eth_chainId\" });\n      const finalChainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n      validateTypedMessageParams(msgParams, finalChainId);\n      const data = typeof msgParams.data === \"string\" ? JSON.parse(msgParams.data) : msgParams.data;\n      const sig = signTypedData({ privateKey: privKeyBuffer, data, version: SignTypedDataVersion.V4 });\n      return sig;\n    },\n    processEncryptionPublicKey: async (address: string, _: JRPCRequest<unknown>): Promise<string> => {\n      log.info(\"processEncryptionPublicKey\", address);\n      return getEncryptionPublicKey(privKey);\n    },\n    processDecryptMessage: (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): string => {\n      log.info(\"processDecryptMessage\", msgParams);\n      const stripped = stripHexPrefix(msgParams.data);\n      const buff = Buffer.from(stripped, \"hex\");\n      const decrypted = decrypt({ encryptedData: JSON.parse(buff.toString(\"utf8\")) as EthEncryptedData, privateKey: privKey });\n      return decrypted;\n    },\n  };\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@ethereumjs/common\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"bn.js\");","import { addHexPrefix, stripHexPrefix } from \"@ethereumjs/util\";\nimport { BigNumber } from \"bignumber.js\";\nimport BN from \"bn.js\";\n\nexport function bnLessThan(a, b) {\n  if (a === null || a === undefined || b === null || b === undefined) {\n    return null;\n  }\n  return new BigNumber(a, 10).lt(b, 10);\n}\n\nexport function bnToHex(inputBn: BN) {\n  return addHexPrefix(inputBn.toString(16));\n}\n\nexport function hexToBn(inputHex: string): BN {\n  if (BN.isBN(inputHex)) return inputHex;\n  return new BN(stripHexPrefix(inputHex), 16);\n}\n\nexport function BnMultiplyByFraction(targetBN: BN, numerator: number | string, denominator: number | string): BN {\n  const numberBN = new BN(numerator);\n  const denomBN = new BN(denominator);\n  return targetBN.mul(numberBN).div(denomBN);\n}\n","export const LegacyGasAPIEndpoint = \"https://gas-api.metaswap.codefi.network/networks/<chain_id>/gasPrices\";\nexport const EIP1559APIEndpoint = \"https://gas-api.metaswap.codefi.network/networks/<chain_id>/suggestedGasFees\";\nexport const TRANSACTION_ENVELOPE_TYPES = {\n  LEGACY: \"0x0\",\n  ACCESS_LIST: \"0x1\",\n  FEE_MARKET: \"0x2\",\n};\n\nexport const TRANSACTION_TYPES = {\n  SENT_ETHER: \"sentEther\",\n  CONTRACT_INTERACTION: \"contractInteraction\",\n  DEPLOY_CONTRACT: \"contractDeployment\",\n  STANDARD_TRANSACTION: \"transaction\",\n};\n\nexport const GAS_ESTIMATE_TYPES = {\n  FEE_MARKET: \"fee-market\",\n  LEGACY: \"legacy\",\n  ETH_GASPRICE: \"eth_gasPrice\",\n  NONE: \"none\",\n};\n","import { Common, Hardfork } from \"@ethereumjs/common\";\nimport { addHexPrefix, stripHexPrefix } from \"@ethereumjs/util\";\nimport { Block } from \"@toruslabs/base-controllers\";\nimport { CustomChainConfig, log, SafeEventEmitterProvider } from \"@web3auth/base\";\n\nimport { TransactionParams } from \"../../../rpc/interfaces\";\nimport { decGWEIToHexWEI, hexWEIToDecGWEI } from \"../../converter\";\nimport { bnLessThan, BnMultiplyByFraction, bnToHex, hexToBn } from \"../../utils\";\nimport { EIP1559APIEndpoint, GAS_ESTIMATE_TYPES, LegacyGasAPIEndpoint, TRANSACTION_ENVELOPE_TYPES, TRANSACTION_TYPES } from \"./constants\";\nimport { EIP1159GasData, FallbackGasData, GasData, LegacyGasData, TxType } from \"./interfaces\";\nimport { fetchEip1159GasEstimates, fetchLegacyGasPriceEstimates } from \"./utils\";\n\nexport class TransactionFormatter {\n  private chainConfig: CustomChainConfig | null = null;\n\n  private getProviderEngineProxy: () => SafeEventEmitterProvider;\n\n  private isEIP1559Compatible = false;\n\n  constructor({ getProviderEngineProxy }: { getProviderEngineProxy: () => SafeEventEmitterProvider }) {\n    this.getProviderEngineProxy = getProviderEngineProxy;\n  }\n\n  get providerProxy() {\n    return this.getProviderEngineProxy();\n  }\n\n  async init(): Promise<void> {\n    this.chainConfig = (await this.providerProxy.request<CustomChainConfig>({ method: \"eth_provider_config\", params: [] })) as CustomChainConfig;\n    this.isEIP1559Compatible = await this.getEIP1559Compatibility();\n  }\n\n  async getCommonConfiguration(): Promise<Common> {\n    if (!this.chainConfig) throw new Error(\"Chain config not initialized\");\n    const { displayName: name, chainId } = this.chainConfig;\n    const hardfork = this.isEIP1559Compatible ? Hardfork.London : Hardfork.Berlin;\n    const customChainParams = {\n      name,\n      chainId: chainId === \"loading\" ? 0 : Number.parseInt(chainId, 16),\n      networkId: chainId === \"loading\" ? 0 : Number.parseInt(chainId, 16),\n      defaultHardfork: hardfork,\n    };\n    return Common.custom(customChainParams);\n  }\n\n  async formatTransaction(txParams: TransactionParams & { gas?: string }): Promise<TransactionParams & { gas?: string }> {\n    if (!this.chainConfig) throw new Error(\"Chain config not initialized\");\n\n    const clonedTxParams = {\n      ...txParams,\n    };\n\n    if (clonedTxParams.nonce === undefined)\n      clonedTxParams.nonce = (await this.providerProxy.request<number>({\n        method: \"eth_getTransactionCount\",\n        params: [txParams.from, \"latest\"],\n      })) as number;\n\n    if (!this.isEIP1559Compatible && clonedTxParams.gasPrice) {\n      if (clonedTxParams.maxFeePerGas) delete clonedTxParams.maxFeePerGas;\n      if (clonedTxParams.maxPriorityFeePerGas) delete clonedTxParams.maxPriorityFeePerGas;\n      // if gas is not provided explicitly, estimate it.\n      if (!clonedTxParams.gas) {\n        const defaultGasLimit = await this.getDefaultGasLimit(clonedTxParams);\n        if (defaultGasLimit) {\n          clonedTxParams.gasLimit = defaultGasLimit;\n        }\n      } else {\n        clonedTxParams.gasLimit = clonedTxParams.gas;\n      }\n      return clonedTxParams;\n    }\n\n    if (!clonedTxParams.gas) {\n      const defaultGasLimit = await this.getDefaultGasLimit(clonedTxParams);\n      if (defaultGasLimit) {\n        clonedTxParams.gasLimit = defaultGasLimit;\n      }\n    } else {\n      clonedTxParams.gasLimit = clonedTxParams.gas;\n    }\n\n    const {\n      gasPrice: defaultGasPrice,\n      maxFeePerGas: defaultMaxFeePerGas,\n      maxPriorityFeePerGas: defaultMaxPriorityFeePerGas,\n    } = await this.getDefaultGasFees(clonedTxParams);\n\n    if (this.isEIP1559Compatible) {\n      // If the dapp has suggested a gas price, but no maxFeePerGas or maxPriorityFeePerGas\n      //  then we set maxFeePerGas and maxPriorityFeePerGas to the suggested gasPrice.\n      if (clonedTxParams.gasPrice && !clonedTxParams.maxFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n        clonedTxParams.maxFeePerGas = clonedTxParams.gasPrice;\n\n        clonedTxParams.maxPriorityFeePerGas = bnLessThan(\n          typeof defaultMaxPriorityFeePerGas === \"string\" ? stripHexPrefix(defaultMaxPriorityFeePerGas) : defaultMaxPriorityFeePerGas,\n          typeof clonedTxParams.gasPrice === \"string\" ? stripHexPrefix(clonedTxParams.gasPrice) : clonedTxParams.gasPrice\n        )\n          ? defaultMaxPriorityFeePerGas\n          : clonedTxParams.gasPrice;\n      } else {\n        if (defaultMaxFeePerGas && !clonedTxParams.maxFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxFeePerGas, then we set maxFeePerGas\n          // with the one returned by the gasFeeController, if that is available.\n          clonedTxParams.maxFeePerGas = defaultMaxFeePerGas;\n        }\n\n        if (defaultMaxPriorityFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxPriorityFeePerGas, then we set maxPriorityFeePerGas\n          // with the one returned by the gasFeeController, if that is available.\n          clonedTxParams.maxPriorityFeePerGas = defaultMaxPriorityFeePerGas;\n        }\n\n        if (defaultGasPrice && !clonedTxParams.maxFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxFeePerGas, and no maxFeePerGas is available\n          // then we set maxFeePerGas to the defaultGasPrice, assuming it is\n          // available.\n          clonedTxParams.maxFeePerGas = defaultGasPrice;\n        }\n\n        if (clonedTxParams.maxFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxPriorityFeePerGas, and no maxPriorityFeePerGas is\n          // available  then we set maxPriorityFeePerGas to\n          // clonedTxParams.maxFeePerGas, which will either be the gasPrice from the controller, the maxFeePerGas\n          // set by the dapp, or the maxFeePerGas from the controller.\n          clonedTxParams.maxPriorityFeePerGas = clonedTxParams.maxFeePerGas;\n        }\n      }\n\n      // We remove the gasPrice param entirely when on an eip1559 compatible network\n\n      delete clonedTxParams.gasPrice;\n    } else {\n      // We ensure that maxFeePerGas and maxPriorityFeePerGas are not in the transaction params\n      // when not on a EIP1559 compatible network\n\n      delete clonedTxParams.maxPriorityFeePerGas;\n      delete clonedTxParams.maxFeePerGas;\n    }\n\n    // If we have gotten to this point, and none of gasPrice, maxPriorityFeePerGas or maxFeePerGas are\n    // set on txParams, it means that either we are on a non-EIP1559 network and the dapp didn't suggest\n    // a gas price, or we are on an EIP1559 network, and none of gasPrice, maxPriorityFeePerGas or maxFeePerGas\n    // were available from either the dapp or the network.\n    if (defaultGasPrice && !clonedTxParams.gasPrice && !clonedTxParams.maxPriorityFeePerGas && !clonedTxParams.maxFeePerGas) {\n      clonedTxParams.gasPrice = defaultGasPrice as never;\n    }\n\n    clonedTxParams.type = this.isEIP1559Compatible ? TRANSACTION_ENVELOPE_TYPES.FEE_MARKET : TRANSACTION_ENVELOPE_TYPES.LEGACY;\n    clonedTxParams.chainId = this.chainConfig.chainId;\n    return clonedTxParams;\n  }\n\n  private async fetchEthGasPriceEstimate(): Promise<{ gasPrice: string }> {\n    const gasPrice = (await this.providerProxy.request<string>({ method: \"eth_gasPrice\", params: [] })) as string;\n    return {\n      gasPrice: hexWEIToDecGWEI(gasPrice).toString(),\n    };\n  }\n\n  private async getEIP1559Compatibility(): Promise<boolean> {\n    const latestBlock = await this.providerProxy.request<Block>({ method: \"eth_getBlockByNumber\", params: [\"latest\", false] });\n    const supportsEIP1559 = latestBlock && latestBlock.baseFeePerGas !== undefined;\n\n    return !!supportsEIP1559;\n  }\n\n  private async fetchGasFeeEstimateData(): Promise<GasData> {\n    if (!this.chainConfig) throw new Error(\"Chain config not initialized\");\n    const isLegacyGasAPICompatible = this.chainConfig.chainId === \"0x1\";\n\n    const chainId = Number.parseInt(this.chainConfig.chainId, 16);\n\n    let gasData: GasData;\n\n    try {\n      if (this.isEIP1559Compatible) {\n        // TODO: kovan is not working due to a bug in metamask api\n        const estimates = await fetchEip1159GasEstimates(EIP1559APIEndpoint.replace(\"<chain_id>\", `${chainId}`));\n        gasData = {\n          gasFeeEstimates: estimates,\n          gasEstimateType: GAS_ESTIMATE_TYPES.FEE_MARKET,\n        };\n      } else if (isLegacyGasAPICompatible) {\n        const estimates = await fetchLegacyGasPriceEstimates(LegacyGasAPIEndpoint.replace(\"<chain_id>\", `${chainId}`));\n        gasData = {\n          gasFeeEstimates: estimates,\n          gasEstimateType: GAS_ESTIMATE_TYPES.LEGACY,\n        };\n      } else {\n        throw new Error(\"Main gas fee/price estimation failed. Use fallback\");\n      }\n    } catch (e: unknown) {\n      try {\n        const estimates = await this.fetchEthGasPriceEstimate();\n        gasData = {\n          gasFeeEstimates: estimates,\n          gasEstimateType: GAS_ESTIMATE_TYPES.ETH_GASPRICE,\n        };\n      } catch (error: unknown) {\n        throw new Error(`Gas fee/price estimation failed. Message: ${(error as Error).message}`);\n      }\n    }\n    return gasData;\n  }\n\n  private async getDefaultGasFees(\n    txParams: TransactionParams & { gas?: string }\n  ): Promise<{ gasPrice?: string; maxFeePerGas?: string; maxPriorityFeePerGas?: string }> {\n    if ((!this.isEIP1559Compatible && txParams.gasPrice) || (this.isEIP1559Compatible && txParams.maxFeePerGas && txParams.maxPriorityFeePerGas)) {\n      return {};\n    }\n\n    try {\n      const { gasFeeEstimates, gasEstimateType } = await this.fetchGasFeeEstimateData();\n      if (this.isEIP1559Compatible && gasEstimateType === GAS_ESTIMATE_TYPES.FEE_MARKET) {\n        const { medium: { suggestedMaxPriorityFeePerGas, suggestedMaxFeePerGas } = {} } = gasFeeEstimates as EIP1159GasData;\n\n        if (suggestedMaxPriorityFeePerGas && suggestedMaxFeePerGas) {\n          return {\n            maxFeePerGas: addHexPrefix(decGWEIToHexWEI(suggestedMaxFeePerGas)),\n            maxPriorityFeePerGas: addHexPrefix(decGWEIToHexWEI(suggestedMaxPriorityFeePerGas)),\n          };\n        }\n      } else if (gasEstimateType === GAS_ESTIMATE_TYPES.LEGACY) {\n        // The LEGACY type includes low, medium and high estimates of\n        // gas price values.\n        return {\n          gasPrice: addHexPrefix(decGWEIToHexWEI((gasFeeEstimates as LegacyGasData).medium)),\n        };\n      } else if (gasEstimateType === GAS_ESTIMATE_TYPES.ETH_GASPRICE) {\n        // The ETH_GASPRICE type just includes a single gas price property,\n        // which we can assume was retrieved from eth_gasPrice\n        return {\n          gasPrice: addHexPrefix(decGWEIToHexWEI((gasFeeEstimates as FallbackGasData).gasPrice)),\n        };\n      }\n    } catch (error) {\n      log.error(error);\n    }\n\n    const { gasPrice } = await this.fetchEthGasPriceEstimate();\n\n    return { gasPrice: addHexPrefix(decGWEIToHexWEI(gasPrice)) };\n  }\n\n  private async estimateTxGas(txMeta: TransactionParams): Promise<string> {\n    const txParams = { ...txMeta };\n\n    // `eth_estimateGas` can fail if the user has insufficient balance for the\n    // value being sent, or for the gas cost. We don't want to check their\n    // balance here, we just want the gas estimate. The gas price is removed\n    // to skip those balance checks. We check balance elsewhere. We also delete\n    // maxFeePerGas and maxPriorityFeePerGas to support EIP-1559 txs.\n    delete txParams.gasPrice;\n    delete txParams.maxFeePerGas;\n    delete txParams.maxPriorityFeePerGas;\n    const gas = (await this.providerProxy.request<string>({ method: \"eth_estimateGas\", params: [txParams] })) as string;\n    return gas;\n  }\n\n  private async analyzeGasUsage(txMeta: TransactionParams): Promise<{\n    blockGasLimit: string;\n    estimatedGasHex: string;\n  }> {\n    const block = (await this.providerProxy.request<Block>({ method: \"eth_getBlockByNumber\", params: [\"latest\", false] })) as Block;\n    // fallback to block gasLimit\n    const blockGasLimitBN = hexToBn(block.gasLimit as string);\n    const saferGasLimitBN = BnMultiplyByFraction(blockGasLimitBN, 19, 20);\n    let estimatedGasHex = bnToHex(saferGasLimitBN);\n\n    try {\n      estimatedGasHex = await this.estimateTxGas(txMeta);\n    } catch (error: unknown) {\n      log.warn(error);\n    }\n    return { blockGasLimit: block.gasLimit as string, estimatedGasHex };\n  }\n\n  private addGasBuffer(initialGasLimitHex: string, blockGasLimitHex: string, multiplier = 1.5): string {\n    const initialGasLimitBn = hexToBn(initialGasLimitHex);\n    const blockGasLimitBn = hexToBn(blockGasLimitHex);\n    const upperGasLimitBn = blockGasLimitBn.muln(0.9);\n    const bufferedGasLimitBn = initialGasLimitBn.muln(multiplier);\n\n    // if initialGasLimit is above blockGasLimit, dont modify it\n    if (initialGasLimitBn.gt(upperGasLimitBn)) return bnToHex(initialGasLimitBn);\n    // if bufferedGasLimit is below blockGasLimit, use bufferedGasLimit\n    if (bufferedGasLimitBn.lt(upperGasLimitBn)) return bnToHex(bufferedGasLimitBn);\n    // otherwise use blockGasLimit\n    return bnToHex(upperGasLimitBn);\n  }\n\n  private async determineTransactionCategory(txParameters: TransactionParams & { gas?: string }): Promise<{\n    transactionCategory: TxType | null;\n    code?: string;\n  }> {\n    const { data, to } = txParameters;\n    let code = \"\";\n\n    let txCategory: TxType | null;\n\n    if (data && !to) {\n      txCategory = TRANSACTION_TYPES.DEPLOY_CONTRACT;\n    } else {\n      try {\n        code = (await this.providerProxy.request<string>({ method: \"eth_getCode\", params: [to, \"latest\"] })) as string;\n      } catch (error) {\n        log.warn(error);\n      }\n      const codeIsEmpty = !code || code === \"0x\" || code === \"0x0\";\n\n      txCategory = codeIsEmpty ? TRANSACTION_TYPES.SENT_ETHER : TRANSACTION_TYPES.CONTRACT_INTERACTION;\n    }\n\n    return { transactionCategory: txCategory, code };\n  }\n\n  private async getDefaultGasLimit(txParams: TransactionParams & { gas?: string }): Promise<string> {\n    const { transactionCategory } = await this.determineTransactionCategory({ ...txParams });\n\n    if (txParams.gas) {\n      return txParams.gas;\n    }\n\n    if (txParams.to && transactionCategory === TRANSACTION_TYPES.SENT_ETHER) {\n      // if there's data in the params, but there's no contract code, it's not a valid transaction\n      if (txParams.data) {\n        throw Error(\"TxGasUtil - Trying to call a function on a non-contract address\");\n      }\n\n      const TWENTY_ONE_THOUSAND = 21_000;\n\n      // This is a standard ether simple send, gas requirement is exactly 21k\n      return addHexPrefix(TWENTY_ONE_THOUSAND.toString(16));\n    }\n\n    const { blockGasLimit, estimatedGasHex } = await this.analyzeGasUsage(txParams);\n\n    // add additional gas buffer to our estimation for safety\n    const gasLimit = this.addGasBuffer(addHexPrefix(estimatedGasHex), blockGasLimit as string);\n    return gasLimit;\n  }\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine, JRPCMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { createAccountMiddleware, createChainSwitchMiddleware, createEthMiddleware } from \"../../rpc/ethRpcMiddlewares\";\nimport { AddEthereumChainParameter, IAccountHandlers, IChainSwitchHandlers } from \"../../rpc/interfaces\";\nimport { createJsonRpcClient } from \"../../rpc/jrpcClient\";\nimport { getProviderHandlers } from \"./ethPrivatekeyUtils\";\nimport { TransactionFormatter } from \"./TransactionFormatter\";\n\nexport interface EthereumPrivKeyProviderConfig extends BaseProviderConfig {\n  chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n}\n\nexport interface EthereumPrivKeyProviderState extends BaseProviderState {\n  privateKey?: string;\n}\nexport class EthereumPrivateKeyProvider extends BaseProvider<BaseProviderConfig, EthereumPrivKeyProviderState, string> {\n  constructor({ config, state }: { config: EthereumPrivKeyProviderConfig; state?: EthereumPrivKeyProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.EIP155 } }, state });\n  }\n\n  public static getProviderInstance = async (params: {\n    privKey: string;\n    chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n  }): Promise<EthereumPrivateKeyProvider> => {\n    const providerFactory = new EthereumPrivateKeyProvider({ config: { chainConfig: params.chainConfig } });\n    await providerFactory.setupProvider(params.privKey);\n    return providerFactory;\n  };\n\n  public async enable(): Promise<string[]> {\n    if (!this.state.privateKey)\n      throw ethErrors.provider.custom({ message: \"Private key is not found in state, plz pass it in constructor state param\", code: 4902 });\n    await this.setupProvider(this.state.privateKey);\n    return this._providerEngineProxy.request({ method: \"eth_accounts\" });\n  }\n\n  public async setupProvider(privKey: string): Promise<void> {\n    const txFormatter = new TransactionFormatter({\n      getProviderEngineProxy: this.getProviderEngineProxy.bind(this),\n    });\n    const providerHandlers = getProviderHandlers({\n      txFormatter,\n      privKey,\n      getProviderEngineProxy: this.getProviderEngineProxy.bind(this),\n    });\n    const ethMiddleware = createEthMiddleware(providerHandlers);\n    const chainSwitchMiddleware = this.getChainSwitchMiddleware();\n    const engine = new JRPCEngine();\n    // Not a partial anymore because of checks in ctor\n    const { networkMiddleware } = createJsonRpcClient(this.config.chainConfig as CustomChainConfig);\n    engine.push(ethMiddleware);\n    engine.push(chainSwitchMiddleware);\n    engine.push(this.getAccountMiddleware());\n    engine.push(networkMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await txFormatter.init();\n    await this.lookupNetwork();\n  }\n\n  public async updateAccount(params: { privateKey: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const existingKey = await this._providerEngineProxy.request<unknown, string>({ method: \"eth_private_key\" });\n    if (existingKey !== params.privateKey) {\n      await this.setupProvider(params.privateKey);\n      this._providerEngineProxy.emit(\"accountsChanged\", {\n        accounts: await this._providerEngineProxy.request<unknown, string[]>({ method: \"eth_accounts\" }),\n      });\n    }\n  }\n\n  public async switchChain(params: { chainId: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const chainConfig = this.getChainConfig(params.chainId);\n    this.update({\n      chainId: \"loading\",\n    });\n    this.configure({ chainConfig });\n    const privKey = await this._providerEngineProxy.request<unknown, string>({ method: \"eth_private_key\" });\n    await this.setupProvider(privKey);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const { chainId } = this.config.chainConfig;\n    if (!chainId) throw ethErrors.rpc.invalidParams(\"chainId is required while lookupNetwork\");\n    const network = await this._providerEngineProxy.request<string[], string>({\n      method: \"net_version\",\n      params: [],\n    });\n\n    if (parseInt(chainId, 16) !== parseInt(network, 10)) throw ethErrors.provider.chainDisconnected(`Invalid network, net_version is: ${network}`);\n    if (this.state.chainId !== chainId) {\n      this._providerEngineProxy.emit(\"chainChanged\", chainId);\n      this._providerEngineProxy.emit(\"connect\", { chainId });\n    }\n    this.update({ chainId });\n    return network;\n  }\n\n  private getChainSwitchMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const chainSwitchHandlers: IChainSwitchHandlers = {\n      addChain: async (params: AddEthereumChainParameter): Promise<void> => {\n        const { chainId, chainName, rpcUrls, blockExplorerUrls, nativeCurrency } = params;\n        this.addChain({\n          chainNamespace: \"eip155\",\n          chainId,\n          ticker: nativeCurrency?.symbol || \"ETH\",\n          tickerName: nativeCurrency?.name || \"Ether\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: blockExplorerUrls?.[0] || \"\",\n        });\n      },\n      switchChain: async (params: { chainId: string }): Promise<void> => {\n        const { chainId } = params;\n        await this.switchChain({ chainId });\n      },\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n\n  private getAccountMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const accountHandlers: IAccountHandlers = {\n      updatePrivatekey: async (params: { privateKey: string }): Promise<void> => {\n        const { privateKey } = params;\n        await this.updateAccount({ privateKey });\n      },\n    };\n    return createAccountMiddleware(accountHandlers);\n  }\n}\n","export * from \"./EthereumPrivateKeyProvider\";\nexport * from \"./ethPrivatekeyUtils\";\nexport * from \"./TransactionFormatter\";\n","export * from \"./injectedProviders\";\nexport * from \"./privateKeyProviders\";\n","export * from \"./providers\";\n"],"names":["createAsyncMiddleware","createScaffoldMiddleware","ethErrors","resemblesAddress","str","length","createWalletMiddleware","getAccounts","getPrivateKey","processDecryptMessage","processEncryptionPublicKey","processEthSignMessage","processPersonalMessage","processTransaction","processSignTransaction","processTypedMessage","processTypedMessageV3","processTypedMessageV4","Error","validateAndNormalizeKeyholder","address","req","accounts","normalizedAccounts","map","_address","toLowerCase","normalizedAddress","includes","rpc","invalidParams","message","lookupAccounts","res","result","lookupDefaultAccount","sendTransaction","methodNotSupported","txParams","params","from","signTransaction","ethSign","extraParams","msgParams","data","signTypedData","version","signTypedDataV3","signTypedDataV4","personalSign","firstParam","secondParam","warning","encryptionPublicKey","decryptMessage","ciphertext","fetchPrivateKey","eth_accounts","eth_private_key","eth_coinbase","eth_sendTransaction","eth_signTransaction","eth_sign","eth_signTypedData","eth_signTypedData_v3","eth_signTypedData_v4","personal_sign","eth_getEncryptionPublicKey","eth_decrypt","mergeMiddleware","createEthMiddleware","providerHandlers","ethMiddleware","eth_syncing","createChainSwitchMiddleware","addChain","switchChain","addNewChain","chainParams","undefined","chainId","rpcUrls","nativeCurrency","updateChain","wallet_addEthereumChain","wallet_switchEthereumChain","createAccountMiddleware","updatePrivatekey","updateAccount","accountParams","privateKey","wallet_updateAccount","createFetchMiddleware","createChainIdMiddleware","next","end","method","createProviderConfigMiddleware","providerConfig","createJsonRpcClient","rpcTarget","fetchMiddleware","networkMiddleware","getProviderHandlers","connector","_","signMessage","signPersonalMessage","providerFromEngine","JRPCEngine","CHAIN_NAMESPACES","getChainConfig","isHexStrict","log","WalletInitializationError","WalletLoginError","BaseProvider","WalletConnectProvider","config","state","chainConfig","chainNamespace","EIP155","skipLookupNetwork","provider","custom","code","setupProvider","_providerEngineProxy","request","onConnectorStateUpdate","setupEngine","lookup","currentChainConfig","update","displayName","sendCustomRequest","chainName","error","configure","lookupNetwork","notReady","connected","notConnectedError","connectedHexChainId","toString","rpcConnectionError","emit","engine","push","updateProviderEngineProxy","on","payload","connectedChainId","rpcUrl","maybeConfig","providerFactory","stripHexPrefix","BigNumber","BIG_NUMBER_WEI_MULTIPLIER","BIG_NUMBER_GWEI_MULTIPLIER","BIG_NUMBER_ETH_MULTIPLIER","toBigNumber","hex","n","dec","toNormalizedDenomination","WEI","bigNumber","div","GWEI","ETH","toSpecifiedDenomination","times","dp","ROUND_HALF_UP","baseChange","converter","value","fromNumericBase","fromDenomination","toNumericBase","toDenomination","numberOfDecimals","convertedValue","ROUND_HALF_DOWN","conversionUtil","decGWEIToHexWEI","decGWEI","hexWEIToDecGWEI","isValidAddress","SignTypedDataVersion","TYPED_MESSAGE_SCHEMA","typedSignatureHash","get","assert","jsonschema","normalizeGWEIDecimalNumbers","numberAsWEIHex","numberAsGWEI","fetchEip1159GasEstimates","url","estimates","normalizedEstimates","estimatedBaseFee","low","suggestedMaxPriorityFeePerGas","suggestedMaxFeePerGas","medium","high","fetchLegacyGasPriceEstimates","referrer","referrerPolicy","mode","SafeGasPrice","ProposeGasPrice","FastGasPrice","validateTypedMessageParams","parameters","activeChainId","ok","V1","doesNotThrow","JSON","parse","Array","isArray","V3","V4","primaryType","types","validation","validate","properties","strictEqual","errors","domain","Number","isNaN","parseInt","fail","invalidInput","TransactionFactory","privateToAddress","decrypt","getEncryptionPublicKey","signTx","privKey","txFormatter","formatTransaction","finalTxParams","getCommonConfiguration","common","unsignedEthTx","fromTxData","signedTx","sign","Buffer","serialize","getProviderEngineProxy","providerEngineProxy","concat","txHash","rawMessageSig","privKeyBuffer","sig","debug","finalChainId","info","stripped","buff","decrypted","encryptedData","addHexPrefix","BN","bnLessThan","a","b","lt","bnToHex","inputBn","hexToBn","inputHex","isBN","BnMultiplyByFraction","targetBN","numerator","denominator","numberBN","denomBN","mul","LegacyGasAPIEndpoint","EIP1559APIEndpoint","TRANSACTION_ENVELOPE_TYPES","LEGACY","ACCESS_LIST","FEE_MARKET","TRANSACTION_TYPES","SENT_ETHER","CONTRACT_INTERACTION","DEPLOY_CONTRACT","STANDARD_TRANSACTION","GAS_ESTIMATE_TYPES","ETH_GASPRICE","NONE","Common","Hardfork","TransactionFormatter","providerProxy","getEIP1559Compatibility","isEIP1559Compatible","name","hardfork","London","Berlin","customChainParams","networkId","defaultHardfork","clonedTxParams","nonce","gasPrice","maxFeePerGas","maxPriorityFeePerGas","gas","getDefaultGasLimit","defaultGasLimit","gasLimit","getDefaultGasFees","defaultGasPrice","defaultMaxFeePerGas","defaultMaxPriorityFeePerGas","type","latestBlock","supportsEIP1559","baseFeePerGas","isLegacyGasAPICompatible","replace","gasData","gasFeeEstimates","gasEstimateType","fetchEthGasPriceEstimate","fetchGasFeeEstimateData","txMeta","block","blockGasLimitBN","saferGasLimitBN","estimatedGasHex","estimateTxGas","warn","blockGasLimit","initialGasLimitHex","blockGasLimitHex","multiplier","initialGasLimitBn","blockGasLimitBn","upperGasLimitBn","muln","bufferedGasLimitBn","gt","txParameters","to","txCategory","codeIsEmpty","transactionCategory","determineTransactionCategory","TWENTY_ONE_THOUSAND","analyzeGasUsage","addGasBuffer","EthereumPrivateKeyProvider","bind","chainSwitchMiddleware","getChainSwitchMiddleware","getAccountMiddleware","init","existingKey","network","chainDisconnected","chainSwitchHandlers","blockExplorerUrls","ticker","symbol","tickerName","blockExplorer","accountHandlers"],"sourceRoot":""}